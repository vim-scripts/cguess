
#line 3 "<stdout>"

#define  YY_INT_ALIGNED long int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <stdint.h> /* May break IA64 test-noansi-r */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int32_t yy_accept[543] =
    {   0,
        0,    0,  150,  148,    2,    4,    1,   51,    7,    3,
      147,   46,   48,    6,   52,   53,   44,   42,   10,   43,
       17,   45,    5,   58,   14,   56,   59,   57,   16,   54,
       55,   47,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,   11,   49,   12,   50,   31,    7,    7,
        0,    3,  147,   22,   12,   34,   24,    6,    6,    0,
        0,    0,   40,   20,   36,   18,   37,   19,   39,   15,
        0,    5,   21,    5,   13,   55,   11,   54,   28,   32,
      145,   30,   33,   29,  146,    0,    0,    0,   41,   23,

      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  116,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  112,  147,  147,  147,  147,  147,  147,  147,
       35,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
       25,   35,    7,    6,    0,    0,    0,   40,   38,    9,
       27,   26,    0,    0,    0,    0,   41,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   34,   87,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  117,

      147,  147,  147,  103,  147,  147,  147,   97,   51,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,   69,
      147,  147,  147,  147,  147,  147,  147,  147,  147,   47,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,   83,  147,  147,  101,  147,  110,  147,
       99,  147,  147,  147,  147,  147,  147,  147,  147,  113,
       75,  147,  147,  147,  147,  147,  147,  120,  147,  104,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,   65,

      147,    8,  147,  147,  147,  147,  147,  109,  147,  147,
      147,  147,  128,  147,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   49,  118,   70,   73,
       50,   92,  147,  147,  147,  147,  147,  147,  147,  147,
      107,  147,  147,  147,  147,  147,   25,  147,  147,  147,
      147,  147,  147,  147,  147,  102,  147,  147,  147,  147,
      147,  147,   68,  147,  147,  147,  147,   77,  147,   88,
      147,  147,  147,  115,  147,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,  147,   24,   48,  147,
      147,  147,   98,  108,  147,  147,   82,   85,   72,   89,

      147,  147,  147,  147,  147,  147,   81,  147,  147,  147,
      121,  105,   96,   91,   76,  114,  147,  147,   64,  147,
      125,  147,  147,  147,  147,   23,  129,  147,  130,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      111,  147,  147,   86,  147,  147,  147,   79,  147,  147,
      147,  147,  147,  147,   71,  147,  147,   78,  147,  100,
      147,  147,  147,  132,  147,  147,  138,  134,  126,  147,
      147,  147,  119,  147,   90,  147,   95,   94,  147,   84,
      147,  122,  147,   66,   67,  106,   93,  147,  131,  147,
      147,  147,  147,  147,  147,  147,  147,  147,  147,  147,

       74,   80,  147,  147,  147,  147,  133,  147,  123,  139,
      135,  127,  140,  136,   63,  147,  147,  147,  147,  147,
      147,  147,  147,  147,  147,  147,   61,  147,  147,  144,
      124,  141,  137,   60,  147,  143,  142,  147,  147,  147,
       62,    0
    } ;

static yyconst flex_int32_t yy_base[553] =
    {   0,
        0,  118, 3280, 3281, 3281, 3281, 3281, 3218,  176,    0,
        0,   71,  208,   53,  238, 3281, 3217,  202, 3281,  210,
      232, 3216,  244,   76, 3281,  265, 3215,   74, 3281,  295,
     3281, 3214, 3179,   29,  147,  156,  155,  211,  225, 3162,
       38, 3161, 3154,  237,   29,  140, 3169,  246,  253,  225,
      154,  256, 3158, 3281,  153, 3281, 3281, 3281,  257, 3281,
        0,    0,    0, 3281, 3281, 3281, 3281,   57, 3281,    0,
      359,  366, 3281, 3281, 3281, 3281, 3281, 3281, 3226, 3281,
     3221,  360, 3281,  433, 3281, 3281, 3281,  411, 3205, 3281,
     3281, 3281, 3281, 3204, 3281,  461,  504, 3202, 3281, 3281,

      336, 3163, 3153, 3145, 3144, 3148, 3157,  200, 3160, 3159,
      208,  278, 3138, 3144, 3138, 3135,  247, 3143, 3139, 3135,
     3143, 3131,    0,  250, 3136, 3129, 3135, 3124, 3126, 3140,
     3145, 3138,  276, 3140,  280, 3126,  234,  276, 3131, 3126,
      279,  282, 3122,  277, 3128, 3118,  297, 3127, 3125, 3115,
     3281, 3281,  363,  350,  514,  547,  554,  559, 3281, 3281,
     3281, 3281,  564,  592,  597,  602,  607,  303, 3117, 3107,
     3116, 3123, 3123, 3118,  328, 3112, 3110, 3125,    0, 3108,
      367, 3110, 3120, 3115, 3116, 3100, 3098, 3100,  323, 3114,
     3109, 3111, 3111, 3106, 3097,  323, 3104, 3089, 3106,    0,

     3101, 3090, 3095,    0, 3096, 3101, 3096,    0,    0, 3082,
     3094, 3080, 3075, 3076, 3083, 3085, 3079, 3072, 3070, 3072,
     3075, 3083, 3067, 3065, 3065, 3068, 3064, 3067, 3076,    0,
     3075, 3064, 3069, 3063, 3056, 3071, 3073, 3072, 3060, 3072,
     3057, 3049, 3054, 3047, 3054, 3059, 3045, 3056, 3044, 3045,
     3041, 3047, 3053,    0, 3043, 3038,    0, 3044,    0, 3046,
        0, 3034, 3040, 3031, 3041, 3028, 3028, 3035, 3033,    0,
        0, 3036, 3026, 3025, 3037, 3021, 3026,    0, 3025,    0,
     3036, 3018, 3035, 3018, 3022, 3032, 3027, 3022, 3011, 3009,
     3010, 3009, 3006, 3020, 3009, 3014, 3019, 3018, 3008,    0,

     2996,    0,  437, 3004, 3010, 3009, 2994,    0, 2994, 2995,
     3007, 3006, 3011, 2991, 2989, 3002, 2997, 2986, 2984, 2989,
     2997, 2996, 2991, 2998, 2981, 2993,    0,    0,    0,    0,
        0, 2997, 2981, 2982, 2988, 2987, 2982, 2987, 2969, 2974,
        0, 2983, 2736, 1964, 1705, 1446,    0, 1415, 1408, 1424,
     1423, 1405, 1393, 1388, 1382,    0, 1391, 1388, 1390, 1372,
     1373, 1379,    0, 1374, 1374, 1376, 1370,    0, 1361,    0,
     1373, 1364, 1373,    0, 1354, 1125,  860,  583,  588,  587,
      595,  580,  592,  595,  580,  586,  572,    0,    0,  588,
      569,  568,    0,    0,  584,  577,    0,    0,    0,    0,

      580,  583,  568,  581,  576,  560,    0,  574,  560,  574,
        0,    0,    0,  577,    0,    0,  555,  568,    0,  560,
        0,  567,  559,  558,  547,    0,    0,  564,  566,  544,
      557,  540,  549,  553,  552,  549,  539,  543,  550,  545,
        0,  550,  528,    0,  544,  527,  540,    0,  537,  522,
      523,  517,  532,  529,    0,  527,  526,    0,  524,    0,
      506,  526,  493,  498,  481,  491,  492,  490,  489,  482,
      473,  465,    0,  479,    0,  460,    0,    0,  452,    0,
      437,    0,  448,    0,    0,    0,    0,  428,    0,  432,
      445,  436,  413,  433,  427,  425,  412,  410,  394,  411,

        0,    0,  406,  391,  404,  387,    0,  400,  399,    0,
        0,    0,  397,  396,    0,  361,  359,  351,  371,  370,
      368,  361,  349,  345,  288,  252,    0,  229,  208,    0,
        0,    0,    0,    0,  176,    0,    0,  165,   67,   26,
        0, 3281,  700,  955, 1210, 1430, 1552, 1807, 2062, 2317,
     2572, 2827
    } ;

static yyconst flex_int32_t yy_def[553] =
    {   0,
      543,  543,  542,  542,  542,  542,  542,  542,  544,  545,
      546,  542,  542,  547,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  542,  542,  542,  542,  542,  544,  542,
      548,  545,  546,  542,  542,  542,  542,  547,  542,  549,
      542,  550,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  551,  542,  542,  542,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      542,  542,  552,  547,  550,  550,  550,  550,  542,  542,
      542,  542,  551,  551,  551,  551,  551,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,    0,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542
    } ;

static yyconst flex_int32_t yy_nxt[3538] =
    {   0,
      542,  542,  542,  542,  542,  542,  542,  542,    5,    6,
        7,    7,    7,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,    5,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   24,   25,   26,
       27,   28,   29,  542,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       30,   69,   31,   32,   33,   69,   34,   35,   36,   37,

       38,   39,   40,   11,   41,   11,   11,   42,   43,   44,
       45,   46,   11,   47,   48,   49,   50,   51,   52,   53,
       11,   11,   54,   55,   56,   57,    5,    6,    7,    7,
        7,   64,   65,   85,   93,   94,   95,   86,  102,  123,
      130,  541,  131,  103,   70,  104,  132,  124,   70,    5,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   24,   25,   26,   27,   28,
       29,  540,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   30,   60,
       31,   32,   33,  151,   34,   35,   36,   37,   38,   39,
       40,   11,   41,   11,   11,   42,   43,   44,   45,   46,
       11,   47,   48,   49,   50,   51,   52,   53,   11,   11,
       54,   55,   56,   57,   75,   66,   71,   71,   71,   71,
       71,  105,  108,  133,   77,  112,  134,  106,  146,  109,
      107,  539,   76,  110,  147,  113,  111,   61,   67,   71,
       78,   79,   72,   80,  538,  114,  152,   81,   73,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   84,
       60,   84,   84,   84,   84,   84,   84,   84,   84,   84,

       84,   87,  537,   96,   96,   96,   96,   96,   84,   84,
       84,   84,   84,   84,  184,  185,  188,  189,  115,   84,
      116,  118,   88,  536,   89,   90,   96,   91,   84,   97,
      117,   84,  119,  127,  144,  120,  221,  128,  121,  145,
       84,   84,   84,   84,   84,   84,  535,  129,   61,  136,
      137,   84,   98,  140,  148,  222,  141,  203,  196,  149,
       84,  138,  197,   84,  139,  204,  142,   71,   71,   71,
       71,   71,  223,  143,  156,   71,  156,  156,  156,  190,
      213,  232,  216,  227,  217,  191,  214,   99,   69,  224,
       71,  233,  228,   72,  218,  219,   60,  156,  229,   73,

      157,  236,  230,  534,  237,   84,  158,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  241,  242,   96,
       96,   96,   96,   96,   84,   84,   84,   84,   84,   84,
      272,  249,  168,  273,  169,   84,  170,  264,  265,  533,
      171,   70,   96,  532,   84,   97,  172,   84,  250,  173,
      174,  175,  176,  177,   61,  531,   84,   84,   84,   84,
       84,   84,  530,  255,  529,  528,  527,   84,   98,   96,
       96,   96,   96,   96,  526,  525,   84,  256,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      524,  523,   96,  522,  521,   97,  520,   84,   84,   84,

       84,   84,   84,   99,  519,  518,  517,  516,   84,  515,
      514,  513,  164,   96,  164,  164,  164,   84,   98,  512,
       84,  511,  156,   71,  156,  156,  156,  510,  509,   84,
       84,   84,   84,   84,   84,  164,  364,  508,  165,  507,
       84,  365,  506,  505,  504,  156,  366,  367,  157,   84,
      503,  502,   84,   99,  158,  156,   71,  156,  156,  156,
      501,  166,  156,   71,  156,  156,  156,  156,   71,  156,
      156,  156,  164,   96,  164,  164,  164,  500,  156,  499,
      498,  157,  497,  496,  495,  156,  494,  158,  157,  493,
      156,  492,  491,  157,  158,  164,  167,  490,  165,  158,

      164,   96,  164,  164,  164,  164,   96,  164,  164,  164,
      164,   96,  164,  164,  164,  164,   96,  164,  164,  164,
      489,  166,  488,  164,  487,  486,  165,  485,  164,  484,
      483,  165,  482,  164,  481,  480,  165,  479,  164,  478,
      477,  165,  476,  475,  474,  473,  472,  471,  470,  166,
      469,  468,  467,  466,  166,  465,  167,  464,  463,  166,
      462,  461,  460,  167,  166,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  167,  440,  439,  438,  437,  167,
      436,  435,  434,  433,  167,  432,  431,  430,  429,  167,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,

        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   59,   59,   59,   59,   59,
       59,   59,   59,   59,  428,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       62,   62,   62,   62,   62,   62,   62,   62,   62,  427,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   63,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  416,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,  415,  414,  413,
      412,  411,  410,  409,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
      408,  407,  406,  405,   63,  404,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   68,   68,   68,   68,   68,   68,   68,   68,
       68,  403,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  402,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  401,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,

      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,   59,   59,   59,
       59,   59,   59,   59,   59,   59,  400,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  382,

      381,  380,  379,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  368,  363,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  302,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,

      278,  277,  276,  275,  274,  271,  270,  269,  268,  267,
      266,  263,  262,  261,  260,  259,  258,  257,  254,  253,
      252,  251,  248,  247,  246,  245,  244,  243,  240,  239,
      238,  235,  234,  231,  226,  225,  220,  215,  212,  211,
      210,  209,  208,  207,  206,  205,  202,  201,  200,  199,
      198,  195,  194,  193,  192,  187,  186,  183,  182,  181,
      180,  179,  178,   99,  162,  161,  160,  159,  150,  135,
      126,  125,  122,  101,  100,   92,   83,   74,   58,  542,
        3,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542
    } ;

static yyconst flex_int32_t yy_chk[3538] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    1,    1,
        1,    1,    1,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    0,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   14,    1,    1,    1,   68,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    2,
        2,   12,   12,   24,   28,   28,   28,   24,   34,   41,
       45,  540,   45,   34,   14,   34,   45,   41,   68,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,  539,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    9,
        2,    2,    2,   55,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   18,   13,   15,   15,   15,   15,
       15,   35,   36,   46,   20,   37,   46,   35,   51,   36,
       35,  538,   18,   36,   51,   37,   36,    9,   13,   15,
       20,   20,   15,   21,  535,   37,   55,   21,   15,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   23,
       59,   23,   23,   23,   23,   23,   23,   23,   23,   23,

       23,   26,  529,   30,   30,   30,   30,   30,   23,   23,
       23,   23,   23,   23,  108,  108,  111,  111,   38,   23,
       38,   39,   26,  528,   26,   26,   30,   26,   23,   30,
       38,   23,   39,   44,   50,   39,  137,   44,   39,   50,
       23,   23,   23,   23,   23,   23,  526,   44,   59,   48,
       48,   23,   30,   49,   52,  137,   49,  124,  117,   52,
       23,   48,  117,   23,   48,  124,   49,   71,   71,   71,
       71,   71,  138,   49,   72,   72,   72,   72,   72,  112,
      133,  144,  135,  141,  135,  112,  133,   30,  154,  138,
       71,  144,  141,   71,  135,  135,  153,   72,  142,   71,

       72,  147,  142,  525,  147,   82,   72,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,  168,  168,   88,
       88,   88,   88,   88,   82,   82,   82,   82,   82,   82,
      196,  175,  101,  196,  101,   82,  101,  189,  189,  524,
      101,  154,   88,  523,   82,   88,  101,   82,  175,  101,
      101,  101,  101,  101,  153,  522,   82,   82,   82,   82,
       82,   82,  521,  181,  520,  519,  518,   82,   88,   96,
       96,   96,   96,   96,  517,  516,   82,  181,   84,   82,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      514,  513,   96,  509,  508,   96,  506,   84,   84,   84,

       84,   84,   84,   88,  505,  504,  503,  500,   84,  499,
      498,  497,   97,   97,   97,   97,   97,   84,   96,  496,
       84,  495,  155,  155,  155,  155,  155,  494,  493,   84,
       84,   84,   84,   84,   84,   97,  303,  492,   97,  491,
       84,  303,  490,  488,  483,  155,  303,  303,  155,   84,
      481,  479,   84,   96,  155,  156,  156,  156,  156,  156,
      476,   97,  157,  157,  157,  157,  157,  158,  158,  158,
      158,  158,  163,  163,  163,  163,  163,  474,  156,  472,
      471,  156,  470,  469,  468,  157,  467,  156,  157,  466,
      158,  465,  464,  158,  157,  163,   97,  463,  163,  158,

      164,  164,  164,  164,  164,  165,  165,  165,  165,  165,
      166,  166,  166,  166,  166,  167,  167,  167,  167,  167,
      462,  163,  461,  164,  459,  457,  164,  456,  165,  454,
      453,  165,  452,  166,  451,  450,  166,  449,  167,  447,
      446,  167,  445,  443,  442,  440,  439,  438,  437,  164,
      436,  435,  434,  433,  165,  432,  163,  431,  430,  166,
      429,  428,  425,  166,  167,  424,  423,  422,  420,  418,
      417,  414,  410,  409,  408,  406,  405,  404,  403,  402,
      401,  396,  395,  392,  164,  391,  390,  387,  386,  165,
      385,  384,  383,  382,  166,  381,  380,  379,  378,  167,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,

      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  377,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  376,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,

      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  545,  545,  545,  545,  545,
      545,  545,  545,  545,  545,  546,  375,  373,  372,  371,
      369,  367,  366,  365,  364,  362,  361,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  360,  359,  358,
      357,  355,  354,  353,  546,  546,  546,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      352,  351,  350,  349,  546,  348,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  346,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  547,  547,  547,  547,  547,  547,

      547,  547,  547,  547,  547,  547,  547,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  345,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,

      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  548,  548,  548,  548,  548,  548,  548,  548,
      548,  548,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  344,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,

      549,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  549,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,

      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  550,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,

      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  551,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  343,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,

      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  552,  342,  340,  339,  338,  337,  336,  335,  334,
      333,  332,  326,  325,  324,  323,  322,  321,  320,  319,

      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      307,  306,  305,  304,  301,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  279,  277,  276,  275,  274,  273,
      272,  269,  268,  267,  266,  265,  264,  263,  262,  260,
      258,  256,  255,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  229,  228,  227,  226,
      225,  224,  223,  222,  221,  220,  219,  218,  217,  216,
      215,  214,  213,  212,  211,  210,  207,  206,  205,  203,

      202,  201,  199,  198,  197,  195,  194,  193,  192,  191,
      190,  188,  187,  186,  185,  184,  183,  182,  180,  178,
      177,  176,  174,  173,  172,  171,  170,  169,  150,  149,
      148,  146,  145,  143,  140,  139,  136,  134,  132,  131,
      130,  129,  128,  127,  126,  125,  122,  121,  120,  119,
      118,  116,  115,  114,  113,  110,  109,  107,  106,  105,
      104,  103,  102,   98,   94,   89,   81,   79,   53,   47,
       43,   42,   40,   33,   32,   27,   22,   17,    8,    3,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

static yyconst yy_state_type yy_NUL_trans[542] =
    {   0,
        4,    4,    0,    0,    0,    0,    0,    0,   59,   62,
        0,    0,    0,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
      153,   62,    0,    0,    0,    0,    0,   68,    0,  154,
        0,  155,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  163,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,   68,  155,  155,  155,  155,    0,    0,
        0,    0,  163,  163,  163,  163,  163,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.l"
#line 2 "scanner.l"
/*
 * cguess - C/C++/Java(tm) auto-completion tool for VIM
 * Copyright (C) 2005 Andrzej Zaborowski <balrog@zabor.org>
 * All Rights Reserved
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 * The lexical analyser for C++ near superset (but this means
 * C++, no preprocessing is done, e.g. no comments are allowed).
 * Lexical errors are ignored whenever possible, to avoid any
 * user interaction. Scanning should be always successful even
 * for a totally deformed code or if a rot13 encoded MPEG movie
 * about ethic dilemas of a concrete giraffe's monument is fed
 * as input.
 *
 * We aim to be both GNU and ISO compatible.
 *
 * Preprocessors own output is ignored for now but it may be
 * used for line counting.
 *
 * This file is meant to be compiled using flex; the lex
 * compatibility state isn't known.
 */
#	include <string.h>
#	include <stdlib.h>

#	include "parser.h"
#	include "scope.h"
#	include "sstack.h"
#	include "fifo.h"
#	include "language.h"
#	include "cguess.h"
#	include "type.h"

#	define YYSTYPE	token_val_t
#	include "y.tab.h"

#	ifdef NDEBUG
#		define RULE_START
#	else
#		define RULE_START	fprintf(stderr, "%s", yytext)
	char buffer[512];
#	endif /* NDEBUG */

#	define TOKEN(token)			\
		if ((ret = tokens[token]))	\
			return ret

	/*
	 * The stacks of attributes.
	 */
	extern struct sstack_s id_stack;
	extern struct sstack_s type_stack;
	extern fifo(char *) id_fifo;

	char *last_string;

	int line = 1;
	int eof = 0;
	int ret;
/* INTEGER_LITERAL & FLOATING_LITERAL accepting errors */
/* equivalent to pp_number */
/* CHARACTER_LITERAL accepting errors */
/* char_literal	\'([^\n\'\\]|(\\[^\n]))\' would be correct */
/* STRING_LITERAL accepting errors */
/*
 * string_literal \"([^\n\\\"]*(\\[^\n])?)*\" would be correct,
 * although the gnu preprocessor adds the terminating ' and " if
 * omitted.
 */
/* Scanner options */
#line 1523 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 167 "scanner.l"

	/* Lexical rules */

#line 1662 "<stdout>"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3281 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 170 "scanner.l"
RULE_START; /* ignored */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 171 "scanner.l"
RULE_START; /* ignored */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 172 "scanner.l"
RULE_START; /* ignored for now */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 173 "scanner.l"
RULE_START; line ++; /* ignored for now */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 175 "scanner.l"
RULE_START; TOKEN(T_NUM_LITERAL);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 176 "scanner.l"
RULE_START; TOKEN(T_CHAR_LITERAL);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 177 "scanner.l"
RULE_START; TOKEN(T_STRING_LITERAL);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 178 "scanner.l"
RULE_START; TOKEN(T_BOOLEAN_LITERAL);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 179 "scanner.l"
RULE_START; TOKEN(T_ELIPSIS);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 180 "scanner.l"
RULE_START; TOKEN(T_COMMA);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 181 "scanner.l"
RULE_START; TOKEN(T_LBRACE);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 182 "scanner.l"
RULE_START; TOKEN(T_RBRACE);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 183 "scanner.l"
RULE_START; TOKEN(T_SCOPE);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 184 "scanner.l"
RULE_START; TOKEN(T_SEMIC);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 185 "scanner.l"
RULE_START; TOKEN(T_DOTSTAR);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 186 "scanner.l"
RULE_START; TOKEN(T_QUESTION);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 187 "scanner.l"
RULE_START; TOKEN(T_DOT);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 188 "scanner.l"
RULE_START; TOKEN(T_PLUS_EQ);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 189 "scanner.l"
RULE_START; TOKEN(T_MINUS_EQ);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 190 "scanner.l"
RULE_START; TOKEN(T_STAR_EQ);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 191 "scanner.l"
RULE_START; TOKEN(T_SLASH_EQ);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 192 "scanner.l"
RULE_START; TOKEN(T_PERCENT_EQ);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 193 "scanner.l"
RULE_START; TOKEN(T_HAT_EQ);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 194 "scanner.l"
RULE_START; TOKEN(T_AND_EQ);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 195 "scanner.l"
RULE_START; TOKEN(T_OR_EQ);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 196 "scanner.l"
RULE_START; TOKEN(T_GTGT_EQ);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 197 "scanner.l"
RULE_START; TOKEN(T_LTLT_EQ);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 198 "scanner.l"
RULE_START; TOKEN(T_LTLT);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 199 "scanner.l"
RULE_START; TOKEN(T_GTGT);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 200 "scanner.l"
RULE_START; TOKEN(T_EQEQ);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 201 "scanner.l"
RULE_START; TOKEN(T_NE);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 202 "scanner.l"
RULE_START; TOKEN(T_LE);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 203 "scanner.l"
RULE_START; TOKEN(T_GE);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 204 "scanner.l"
RULE_START; TOKEN(T_ANDAND);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 205 "scanner.l"
RULE_START; TOKEN(T_OROR);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 206 "scanner.l"
RULE_START; TOKEN(T_INCR);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 207 "scanner.l"
RULE_START; TOKEN(T_DECR);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 208 "scanner.l"
RULE_START; TOKEN(T_ARROW_STAR);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 209 "scanner.l"
RULE_START; TOKEN(T_ARROW);
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 210 "scanner.l"
RULE_START; TOKEN(T_FUNCTION);
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 211 "scanner.l"
RULE_START; TOKEN(T_SUBSCRIPT);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 212 "scanner.l"
RULE_START; TOKEN(T_PLUS);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 213 "scanner.l"
RULE_START; TOKEN(T_MINUS);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 214 "scanner.l"
RULE_START; TOKEN(T_STAR);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 215 "scanner.l"
RULE_START; TOKEN(T_SLASH);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 216 "scanner.l"
RULE_START; TOKEN(T_PERCENT);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 217 "scanner.l"
RULE_START; TOKEN(T_HAT);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 218 "scanner.l"
RULE_START; TOKEN(T_AND);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 219 "scanner.l"
RULE_START; TOKEN(T_OR);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 220 "scanner.l"
RULE_START; TOKEN(T_TILDE);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 221 "scanner.l"
RULE_START; TOKEN(T_NOT);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 222 "scanner.l"
RULE_START; TOKEN(T_LPAREN);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 223 "scanner.l"
RULE_START; TOKEN(T_RPAREN);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 224 "scanner.l"
RULE_START; TOKEN(T_LBRACK);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 225 "scanner.l"
RULE_START; TOKEN(T_RBRACK);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 226 "scanner.l"
RULE_START; TOKEN(T_LANGLE);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 227 "scanner.l"
RULE_START; TOKEN(T_RANGLE);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 228 "scanner.l"
RULE_START; TOKEN(T_COLON);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 229 "scanner.l"
RULE_START; TOKEN(T_EQ);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 230 "scanner.l"
RULE_START; TOKEN(T_DYNAMIC_CAST);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 231 "scanner.l"
RULE_START; TOKEN(T_STATIC_CAST);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 232 "scanner.l"
RULE_START; TOKEN(T_REINTERPRET_CAST);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 233 "scanner.l"
RULE_START; TOKEN(T_CONST_CAST);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 234 "scanner.l"
RULE_START; TOKEN(T_TYPEID);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 235 "scanner.l"
RULE_START; TOKEN(T_THIS);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 236 "scanner.l"
RULE_START; TOKEN(T_TEMPLATE);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 237 "scanner.l"
RULE_START; TOKEN(T_TYPENAME);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 238 "scanner.l"
RULE_START; TOKEN(T_THROW);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 239 "scanner.l"
RULE_START; TOKEN(T_TRY);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 240 "scanner.l"
RULE_START; TOKEN(T_CATCH);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 241 "scanner.l"
RULE_START; TOKEN(T_TYPEDEF);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 242 "scanner.l"
RULE_START; TOKEN(T_FRIEND);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 243 "scanner.l"
RULE_START; TOKEN(T_CLASS);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 244 "scanner.l"
RULE_START; TOKEN(T_NAMESPACE);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 245 "scanner.l"
RULE_START; TOKEN(T_ENUM);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 246 "scanner.l"
RULE_START; TOKEN(T_STRUCT);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 247 "scanner.l"
RULE_START; TOKEN(T_UNION);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 248 "scanner.l"
RULE_START; TOKEN(T_VIRTUAL);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 249 "scanner.l"
RULE_START; TOKEN(T_PRIVATE);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 250 "scanner.l"
RULE_START; TOKEN(T_PROTECTED);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 251 "scanner.l"
RULE_START; TOKEN(T_PUBLIC);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 252 "scanner.l"
RULE_START; TOKEN(T_EXPORT);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 253 "scanner.l"
RULE_START; TOKEN(T_AUTO);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 254 "scanner.l"
RULE_START; TOKEN(T_REGISTER);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 255 "scanner.l"
RULE_START; TOKEN(T_EXTERN);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 256 "scanner.l"
RULE_START; TOKEN(T_MUTABLE);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 257 "scanner.l"
RULE_START; TOKEN(T_ASM);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 258 "scanner.l"
RULE_START; TOKEN(T_USING);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 259 "scanner.l"
RULE_START; TOKEN(T_INLINE);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 260 "scanner.l"
RULE_START; TOKEN(T_EXPLICIT);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 261 "scanner.l"
RULE_START; TOKEN(T_STATIC);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 262 "scanner.l"
RULE_START; TOKEN(T_CONST);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 263 "scanner.l"
RULE_START; TOKEN(T_VOLATILE);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 264 "scanner.l"
RULE_START; TOKEN(T_OVERLOAD);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 265 "scanner.l"
RULE_START; TOKEN(T_OPERATOR);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 266 "scanner.l"
RULE_START; TOKEN(T_SIZEOF);
	YY_BREAK
/* NEW_ARRAY as well as DELETE_ARRAY are syntactic rules */
case 97:
YY_RULE_SETUP
#line 269 "scanner.l"
RULE_START; TOKEN(T_NEW);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 270 "scanner.l"
RULE_START; TOKEN(T_DELETE);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 271 "scanner.l"
RULE_START; TOKEN(T_CHAR);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 272 "scanner.l"
RULE_START; TOKEN(T_WCHAR);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 273 "scanner.l"
RULE_START; TOKEN(T_BOOL);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 274 "scanner.l"
RULE_START; TOKEN(T_SHORT);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 275 "scanner.l"
RULE_START; TOKEN(T_INT);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 276 "scanner.l"
RULE_START; TOKEN(T_LONG);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 277 "scanner.l"
RULE_START; TOKEN(T_SIGNED);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 278 "scanner.l"
RULE_START; TOKEN(T_UNSIGNED);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 279 "scanner.l"
RULE_START; TOKEN(T_FLOAT);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 280 "scanner.l"
RULE_START; TOKEN(T_DOUBLE);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 281 "scanner.l"
RULE_START; TOKEN(T_VOID);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "scanner.l"
RULE_START; TOKEN(T_CASE);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 283 "scanner.l"
RULE_START; TOKEN(T_DEFAULT);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "scanner.l"
RULE_START; TOKEN(T_IF);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "scanner.l"
RULE_START; TOKEN(T_ELSE);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "scanner.l"
RULE_START; TOKEN(T_SWITCH);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "scanner.l"
RULE_START; TOKEN(T_WHILE);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "scanner.l"
RULE_START; TOKEN(T_DO);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "scanner.l"
RULE_START; TOKEN(T_FOR);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "scanner.l"
RULE_START; TOKEN(T_BREAK);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "scanner.l"
RULE_START; TOKEN(T_CONTINUE);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "scanner.l"
RULE_START; TOKEN(T_GOTO);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "scanner.l"
RULE_START; TOKEN(T_RETURN);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 295 "scanner.l"
RULE_START; TOKEN(T_RESTRICT);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 296 "scanner.l"
RULE_START; TOKEN(T_RESTRICT);
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 297 "scanner.l"
RULE_START; TOKEN(T_RESTRICT);
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 298 "scanner.l"
RULE_START; TOKEN(T_TYPEOF);
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 299 "scanner.l"
RULE_START; TOKEN(T_TYPEOF);
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 300 "scanner.l"
RULE_START; TOKEN(T_TYPEOF);
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 301 "scanner.l"
RULE_START; TOKEN(T_ASM);
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 302 "scanner.l"
RULE_START; TOKEN(T_ASM);
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 303 "scanner.l"
RULE_START; TOKEN(T_CONST);
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 304 "scanner.l"
RULE_START; TOKEN(T_CONST);
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 305 "scanner.l"
RULE_START; TOKEN(T_INLINE);
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 306 "scanner.l"
RULE_START; TOKEN(T_INLINE);
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 307 "scanner.l"
RULE_START; TOKEN(T_THREAD);
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 308 "scanner.l"
RULE_START; TOKEN(T_THREAD);
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 309 "scanner.l"
RULE_START; TOKEN(T_VOLATILE);
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 310 "scanner.l"
RULE_START; TOKEN(T_VOLATILE);
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 311 "scanner.l"
RULE_START; TOKEN(T_SIGNED);
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 312 "scanner.l"
RULE_START; TOKEN(T_SIGNED);
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 313 "scanner.l"
RULE_START; TOKEN(T_UNSIGNED);
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 314 "scanner.l"
RULE_START; TOKEN(T_UNSIGNED);
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 316 "scanner.l"
RULE_START; /* ignored for now */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 317 "scanner.l"
RULE_START; /* ignored for now */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 318 "scanner.l"
RULE_START; /* ignored for now */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 320 "scanner.l"
RULE_START; TOKEN(T_MINIMUM);
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 321 "scanner.l"
RULE_START; TOKEN(T_MAXIMUM);
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 323 "scanner.l"
RULE_START; TOKEN(T_IDENTIFIER);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 325 "scanner.l"
{
	if (eof)
		return EOF;

	eof = 1;

#ifndef NDEBUG
	context_show_tree();
	fprintf(stderr, "stacks are %i & %i elements high now\n",
		(id_stack.last - id_stack.first) / id_stack.size,
		(type_stack.last - type_stack.first) / type_stack.size);
#endif /* NDEBUG */
	fifo_push(id_fifo, SPECIAL_ID);
	return T_SPECIAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 341 "scanner.l"
/* Character unrecognized. Ignoring */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 343 "scanner.l"
ECHO;
	YY_BREAK
#line 2510 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		if ( *yy_cp )
			{
			register YY_CHAR yy_c = YY_SC_TO_UI(*yy_cp);
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			}
		else
			yy_current_state = yy_NUL_trans[yy_current_state];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	yy_current_state = yy_NUL_trans[yy_current_state];
	yy_is_jam = (yy_current_state == 0);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yy_str )
{
    
	return yy_scan_bytes(yy_str,strlen(yy_str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 343 "scanner.l"



#define BUFFER_SIZE		64
#define BUFFER_SIZE_MASK	63

int local_token_fifo[BUFFER_SIZE];
char *local_id_fifo[BUFFER_SIZE];
int lread = 0;
int lwrite = 0;
int lookahead = 0;
int statement_start = 0;
int last_token = 0;

inline void getonetoken() {
	int token = yylex();
	local_token_fifo[lwrite] = token;
	if (token == T_IDENTIFIER) {
		local_id_fifo[lwrite] = malloc(yyleng + 1);
		if (!local_id_fifo[lwrite]) {
			fprintf(stderr,
				"Aborting: malloc(%i) failed\n", yyleng + 1);
			exit(-1);
		}
		strcpy(local_id_fifo[lwrite], yytext);
	}
	lwrite ++;
	lwrite &= BUFFER_SIZE_MASK;
	lookahead ++;
}

int lexer() {
	struct identifier_s *tokeninfo;
	int token, new_id, latoken;
	char *id;

	if (!lookahead) {
		token = yylex();
		id = yytext;
		new_id = 0;
	} else {
		token = local_token_fifo[lread];
		id = local_id_fifo[lread];
		new_id = 1;

		lread ++;
		lread &= BUFFER_SIZE_MASK;
		lookahead --;
	}

	/* TODO: move this to after all the lookahead */
	if (token == T_STRING_LITERAL) {
		last_string = id;
	}

	if (token == T_IDENTIFIER) {
		/* Retrieve information about identifier */
		tokeninfo = scope_lookup(id);

		if (tokeninfo) {
			yylval = type_copy(tokeninfo->type);
			tokeninfo->type.nested = 0;

			if (new_id)
				free(id);

			/* Constructors */
			if (tokeninfo->name && tokeninfo->name[0] == '%') {
				id = tokeninfo->name + 1;
				token = T_CLASS_ID;
				/* TODO: destructors */
			} else {
				id = tokeninfo->name;

				/* Pass an appropriate keyword to the parser */
				switch (tokeninfo->id_class) {
				case typename_c:
					token = T_TYPEDEF_ID;
					break;
				case enum_c:
					token = T_ENUM_ID;
					break;
				case namespace_c:
					token = T_NAMESPACE_ID;
					break;
				case link_c: /* TODO: type checking */
					token = T_ALIAS_ID;
					break;
				case class_c:
					token = T_CLASS_ID;
					break;
				case template_c:
					token = T_TEMPLATE_ID;
					break;
				default:
					break;
				}
			}
		} else {
			if (!new_id) {
				id = malloc(yyleng + 1);
				if (!id) {
					fprintf(stderr,
						"Aborting: malloc(%i)"
						" failed\n",
						yyleng + 1);
					exit(-1);
				}
				strcpy(id, yytext);
			}
			yylval = type_simple(void_t);
		}

#ifndef NDEBUG
		if (token == T_IDENTIFIER) {
			if (tokeninfo) {
				type_visual(tokeninfo->type, buffer);
				fprintf(stderr, " /* %s */", buffer);
			} else
				fprintf(stderr, " /* new */");
		}
#endif /* NDEBUG */
		fifo_push(id_fifo, id);

		/*
		 * Here we are trivially trying to distinguish between a
		 * beginning of a declaration and a postfix expression.
		 *
		 * TODO: cache tokens until the next T_RPAREN and one
		 * token more.
		 */
		if ((
				token == T_TYPEDEF_ID ||
				token == T_CLASS_ID) &&
				code_scope && statement_start) {
			while (lookahead < 1)
				getonetoken();
			latoken = local_token_fifo[lread];

			if (latoken == T_LPAREN || latoken == T_FUNCTION)
				token = T_IDENTIFIER;
		}

		/*
		 * Here we try to tell which T_LANGLEs are beginnings
		 * of a template's argument lists and which are arithmetic
		 * operators.
		 */
		if (token == T_IDENTIFIER && code_scope) {
			while (lookahead < 1)
				getonetoken();

			if (
				local_token_fifo[lread] == T_LANGLE && (
				!tokeninfo ||
				!tokeninfo->parent->definition ||
				tokeninfo->parent->definition->id_class !=
				template_c))
				local_token_fifo[lread] = T_LE;
		}
	} else
		if (
				token == T_LANGLE &&
				last_token != T_IDENTIFIER &&
				last_token != T_CLASS_ID &&
				last_token != T_TYPEDEF_ID &&
				last_token != T_TEMPLATE)
			token = T_LE;

	statement_start = (
		token == T_SEMIC ||
		token == T_LBRACE ||
		token == T_COMMA ||
		token == T_COLON);
	last_token = token;
	return token;
}


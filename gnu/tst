# 1 "<stdin>"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "<stdin>"



# 1 "/usr/include/gtk-2.0/gtk/gtk.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtk.h"
# 1 "/usr/include/gtk-2.0/gdk/gdk.h" 1
# 30 "/usr/include/gtk-2.0/gdk/gdk.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 1



# 1 "/usr/include/gtk-2.0/gdk/gdktypes.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/include/glib-2.0/glib.h" 1
# 30 "/usr/include/glib-2.0/glib.h"
# 1 "/usr/include/glib-2.0/glib/galloca.h" 1
# 30 "/usr/include/glib-2.0/glib/galloca.h"
# 1 "/usr/include/glib-2.0/glib/gtypes.h" 1
# 30 "/usr/include/glib-2.0/glib/gtypes.h"
# 1 "/usr/lib/glib-2.0/include/glibconfig.h" 1
# 9 "/usr/lib/glib-2.0/include/glibconfig.h"
# 1 "/usr/include/glib-2.0/glib/gmacros.h" 1
# 36 "/usr/include/glib-2.0/glib/gmacros.h"
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h" 1
# 151 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h"
typedef int ptrdiff_t;
# 213 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h"
typedef unsigned int size_t;
# 325 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h"
typedef long int wchar_t;
# 37 "/usr/include/glib-2.0/glib/gmacros.h" 2
# 10 "/usr/lib/glib-2.0/include/glibconfig.h" 2

# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h" 1
# 11 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h"
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/syslimits.h" 1






# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h" 1
# 122 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h"
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 295 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 296 "/usr/include/features.h" 2 3 4
# 318 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 319 "/usr/include/features.h" 2 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 45 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 46 "/usr/include/limits.h" 2 3 4
# 144 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 130 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 36 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 37 "/usr/include/bits/local_lim.h" 2 3 4
# 131 "/usr/include/bits/posix1_lim.h" 2 3 4
# 145 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 149 "/usr/include/limits.h" 2 3 4
# 123 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h" 2
# 8 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/syslimits.h" 2
# 12 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/limits.h" 2
# 12 "/usr/lib/glib-2.0/include/glibconfig.h" 2
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/float.h" 1
# 13 "/usr/lib/glib-2.0/include/glibconfig.h" 2




# 36 "/usr/lib/glib-2.0/include/glibconfig.h"
typedef signed char gint8;
typedef unsigned char guint8;
typedef signed short gint16;
typedef unsigned short guint16;


typedef signed int gint32;
typedef unsigned int guint32;




 typedef signed long long gint64;
 typedef unsigned long long guint64;
# 59 "/usr/lib/glib-2.0/include/glibconfig.h"
typedef signed int gssize;
typedef unsigned int gsize;
# 113 "/usr/lib/glib-2.0/include/glibconfig.h"
typedef struct _GStaticMutex GStaticMutex;
struct _GStaticMutex
{
  struct _GMutex *runtime_mutex;
  union {
    char pad[24];
    double dummy_double;
    void *dummy_pointer;
    long dummy_long;
  } static_mutex;
};






typedef union _GSystemThread GSystemThread;
union _GSystemThread
{
  char data[4];
  double dummy_double;
  void *dummy_pointer;
  long dummy_long;
};
# 170 "/usr/lib/glib-2.0/include/glibconfig.h"

# 31 "/usr/include/glib-2.0/glib/gtypes.h" 2


# 41 "/usr/include/glib-2.0/glib/gtypes.h"
typedef char gchar;
typedef short gshort;
typedef long glong;
typedef int gint;
typedef gint gboolean;

typedef unsigned char guchar;
typedef unsigned short gushort;
typedef unsigned long gulong;
typedef unsigned int guint;

typedef float gfloat;
typedef double gdouble;
# 66 "/usr/include/glib-2.0/glib/gtypes.h"
typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint (*GCompareFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef gint (*GCompareDataFunc) (gconstpointer a,
                                                 gconstpointer b,
                                                 gpointer user_data);
typedef gboolean (*GEqualFunc) (gconstpointer a,
                                                 gconstpointer b);
typedef void (*GDestroyNotify) (gpointer data);
typedef void (*GFunc) (gpointer data,
                                                 gpointer user_data);
typedef guint (*GHashFunc) (gconstpointer key);
typedef void (*GHFunc) (gpointer key,
                                                 gpointer value,
                                                 gpointer user_data);
typedef void (*GFreeFunc) (gpointer data);
# 329 "/usr/include/glib-2.0/glib/gtypes.h"
typedef union _GDoubleIEEE754 GDoubleIEEE754;
typedef union _GFloatIEEE754 GFloatIEEE754;





union _GFloatIEEE754
{
  gfloat v_float;
  struct {
    guint mantissa : 23;
    guint biased_exponent : 8;
    guint sign : 1;
  } mpn;
};
union _GDoubleIEEE754
{
  gdouble v_double;
  struct {
    guint mantissa_low : 32;
    guint mantissa_high : 20;
    guint biased_exponent : 11;
    guint sign : 1;
  } mpn;
};
# 379 "/usr/include/glib-2.0/glib/gtypes.h"
typedef struct _GTimeVal GTimeVal;

struct _GTimeVal
{
  glong tv_sec;
  glong tv_usec;
};


# 31 "/usr/include/glib-2.0/glib/galloca.h" 2







# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4







extern void *alloca (size_t __size) ;






# 39 "/usr/include/glib-2.0/glib/galloca.h" 2
# 31 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/garray.h" 1
# 32 "/usr/include/glib-2.0/glib/garray.h"


typedef struct _GArray GArray;
typedef struct _GByteArray GByteArray;
typedef struct _GPtrArray GPtrArray;

struct _GArray
{
  gchar *data;
  guint len;
};

struct _GByteArray
{
  guint8 *data;
  guint len;
};

struct _GPtrArray
{
  gpointer *pdata;
  guint len;
};
# 66 "/usr/include/glib-2.0/glib/garray.h"
GArray* g_array_new (gboolean zero_terminated,
                                   gboolean clear_,
                                   guint element_size);
GArray* g_array_sized_new (gboolean zero_terminated,
                                   gboolean clear_,
                                   guint element_size,
                                   guint reserved_size);
gchar* g_array_free (GArray *array,
                                   gboolean free_segment);
GArray* g_array_append_vals (GArray *array,
                                   gconstpointer data,
                                   guint len);
GArray* g_array_prepend_vals (GArray *array,
                                   gconstpointer data,
                                   guint len);
GArray* g_array_insert_vals (GArray *array,
                                   guint index_,
                                   gconstpointer data,
                                   guint len);
GArray* g_array_set_size (GArray *array,
                                   guint length);
GArray* g_array_remove_index (GArray *array,
                                   guint index_);
GArray* g_array_remove_index_fast (GArray *array,
                                   guint index_);
void g_array_sort (GArray *array,
                                   GCompareFunc compare_func);
void g_array_sort_with_data (GArray *array,
                                   GCompareDataFunc compare_func,
                                   gpointer user_data);






GPtrArray* g_ptr_array_new (void);
GPtrArray* g_ptr_array_sized_new (guint reserved_size);
gpointer* g_ptr_array_free (GPtrArray *array,
                                           gboolean free_seg);
void g_ptr_array_set_size (GPtrArray *array,
                                           gint length);
gpointer g_ptr_array_remove_index (GPtrArray *array,
                                           guint index_);
gpointer g_ptr_array_remove_index_fast (GPtrArray *array,
                                           guint index_);
gboolean g_ptr_array_remove (GPtrArray *array,
                                           gpointer data);
gboolean g_ptr_array_remove_fast (GPtrArray *array,
                                           gpointer data);
void g_ptr_array_add (GPtrArray *array,
                                           gpointer data);
void g_ptr_array_sort (GPtrArray *array,
                                           GCompareFunc compare_func);
void g_ptr_array_sort_with_data (GPtrArray *array,
                                           GCompareDataFunc compare_func,
                                           gpointer user_data);






GByteArray* g_byte_array_new (void);
GByteArray* g_byte_array_sized_new (guint reserved_size);
guint8* g_byte_array_free (GByteArray *array,
                                            gboolean free_segment);
GByteArray* g_byte_array_append (GByteArray *array,
                                            const guint8 *data,
                                            guint len);
GByteArray* g_byte_array_prepend (GByteArray *array,
                                            const guint8 *data,
                                            guint len);
GByteArray* g_byte_array_set_size (GByteArray *array,
                                            guint length);
GByteArray* g_byte_array_remove_index (GByteArray *array,
                                            guint index_);
GByteArray* g_byte_array_remove_index_fast (GByteArray *array,
                                            guint index_);
void g_byte_array_sort (GByteArray *array,
                                            GCompareFunc compare_func);
void g_byte_array_sort_with_data (GByteArray *array,
                                            GCompareDataFunc compare_func,
                                            gpointer user_data);



# 32 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gasyncqueue.h" 1
# 30 "/usr/include/glib-2.0/glib/gasyncqueue.h"
# 1 "/usr/include/glib-2.0/glib/gthread.h" 1
# 30 "/usr/include/glib-2.0/glib/gthread.h"
# 1 "/usr/include/glib-2.0/glib/gerror.h" 1
# 24 "/usr/include/glib-2.0/glib/gerror.h"
# 1 "/usr/include/glib-2.0/glib/gquark.h" 1
# 32 "/usr/include/glib-2.0/glib/gquark.h"


typedef guint32 GQuark;



GQuark g_quark_try_string (const gchar *string);
GQuark g_quark_from_static_string (const gchar *string);
GQuark g_quark_from_string (const gchar *string);
const gchar* g_quark_to_string (GQuark quark) ;


# 25 "/usr/include/glib-2.0/glib/gerror.h" 2



typedef struct _GError GError;

struct _GError
{
  GQuark domain;
  gint code;
  gchar *message;
};

GError* g_error_new (GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) ;

GError* g_error_new_literal (GQuark domain,
                                gint code,
                                const gchar *message);

void g_error_free (GError *error);
GError* g_error_copy (const GError *error);

gboolean g_error_matches (const GError *error,
                                GQuark domain,
                                gint code);




void g_set_error (GError **err,
                                GQuark domain,
                                gint code,
                                const gchar *format,
                                ...) ;



void g_propagate_error (GError **dest,
                                GError *src);


void g_clear_error (GError **err);



# 31 "/usr/include/glib-2.0/glib/gthread.h" 2







extern GQuark g_thread_error_quark (void);


typedef enum
{
  G_THREAD_ERROR_AGAIN
} GThreadError;

typedef gpointer (*GThreadFunc) (gpointer data);

typedef enum
{
  G_THREAD_PRIORITY_LOW,
  G_THREAD_PRIORITY_NORMAL,
  G_THREAD_PRIORITY_HIGH,
  G_THREAD_PRIORITY_URGENT
} GThreadPriority;

typedef struct _GThread GThread;
struct _GThread
{

  GThreadFunc func;
  gpointer data;
  gboolean joinable;
  GThreadPriority priority;
};

typedef struct _GMutex GMutex;
typedef struct _GCond GCond;
typedef struct _GPrivate GPrivate;
typedef struct _GStaticPrivate GStaticPrivate;

typedef struct _GThreadFunctions GThreadFunctions;
struct _GThreadFunctions
{
  GMutex* (*mutex_new) (void);
  void (*mutex_lock) (GMutex *mutex);
  gboolean (*mutex_trylock) (GMutex *mutex);
  void (*mutex_unlock) (GMutex *mutex);
  void (*mutex_free) (GMutex *mutex);
  GCond* (*cond_new) (void);
  void (*cond_signal) (GCond *cond);
  void (*cond_broadcast) (GCond *cond);
  void (*cond_wait) (GCond *cond,
                                   GMutex *mutex);
  gboolean (*cond_timed_wait) (GCond *cond,
                                   GMutex *mutex,
                                   GTimeVal *end_time);
  void (*cond_free) (GCond *cond);
  GPrivate* (*private_new) (GDestroyNotify destructor);
  gpointer (*private_get) (GPrivate *private_key);
  void (*private_set) (GPrivate *private_key,
                                   gpointer data);
  void (*thread_create) (GThreadFunc func,
                                   gpointer data,
                                   gulong stack_size,
                                   gboolean joinable,
                                   gboolean bound,
                                   GThreadPriority priority,
                                   gpointer thread,
                                   GError **error);
  void (*thread_yield) (void);
  void (*thread_join) (gpointer thread);
  void (*thread_exit) (void);
  void (*thread_set_priority)(gpointer thread,
                                   GThreadPriority priority);
  void (*thread_self) (gpointer thread);
  gboolean (*thread_equal) (gpointer thread1,
                                   gpointer thread2);
};

extern GThreadFunctions g_thread_functions_for_glib_use;
extern gboolean g_thread_use_default_impl;
extern gboolean g_threads_got_initialized;





void g_thread_init (GThreadFunctions *vtable);
# 127 "/usr/include/glib-2.0/glib/gthread.h"
void g_thread_init_with_errorcheck_mutexes (GThreadFunctions* vtable);
# 137 "/usr/include/glib-2.0/glib/gthread.h"
GMutex* g_static_mutex_get_mutex_impl (GMutex **mutex);
# 203 "/usr/include/glib-2.0/glib/gthread.h"
GThread* g_thread_create_full (GThreadFunc func,
                                gpointer data,
                                gulong stack_size,
                                gboolean joinable,
                                gboolean bound,
                                GThreadPriority priority,
                                GError **error);
GThread* g_thread_self (void);
void g_thread_exit (gpointer retval);
gpointer g_thread_join (GThread *thread);

void g_thread_set_priority (GThread *thread,
                                GThreadPriority priority);
# 228 "/usr/include/glib-2.0/glib/gthread.h"
void g_static_mutex_init (GStaticMutex *mutex);
void g_static_mutex_free (GStaticMutex *mutex);

struct _GStaticPrivate
{

  guint index;
};

void g_static_private_init (GStaticPrivate *private_key);
gpointer g_static_private_get (GStaticPrivate *private_key);
void g_static_private_set (GStaticPrivate *private_key,
                                          gpointer data,
                                          GDestroyNotify notify);
void g_static_private_free (GStaticPrivate *private_key);

typedef struct _GStaticRecMutex GStaticRecMutex;
struct _GStaticRecMutex
{

  GStaticMutex mutex;
  guint depth;
  GSystemThread owner;
};


void g_static_rec_mutex_init (GStaticRecMutex *mutex);
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex,
                                         guint depth);
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);
void g_static_rec_mutex_free (GStaticRecMutex *mutex);

typedef struct _GStaticRWLock GStaticRWLock;
struct _GStaticRWLock
{

  GStaticMutex mutex;
  GCond *read_cond;
  GCond *write_cond;
  guint read_counter;
  gboolean have_writer;
  guint want_to_read;
  guint want_to_write;
};



void g_static_rw_lock_init (GStaticRWLock* lock);
void g_static_rw_lock_reader_lock (GStaticRWLock* lock);
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock* lock);
void g_static_rw_lock_reader_unlock (GStaticRWLock* lock);
void g_static_rw_lock_writer_lock (GStaticRWLock* lock);
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock* lock);
void g_static_rw_lock_writer_unlock (GStaticRWLock* lock);
void g_static_rw_lock_free (GStaticRWLock* lock);
# 296 "/usr/include/glib-2.0/glib/gthread.h"
extern void glib_dummy_decl (void);
# 338 "/usr/include/glib-2.0/glib/gthread.h"

# 31 "/usr/include/glib-2.0/glib/gasyncqueue.h" 2



typedef struct _GAsyncQueue GAsyncQueue;





GAsyncQueue* g_async_queue_new (void);





void g_async_queue_lock (GAsyncQueue *queue);
void g_async_queue_unlock (GAsyncQueue *queue);
# 56 "/usr/include/glib-2.0/glib/gasyncqueue.h"
void g_async_queue_ref (GAsyncQueue *queue);
void g_async_queue_ref_unlocked (GAsyncQueue *queue);
void g_async_queue_unref (GAsyncQueue *queue);
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);


void g_async_queue_push (GAsyncQueue *queue,
                                                gpointer data);
void g_async_queue_push_unlocked (GAsyncQueue *queue,
                                                gpointer data);



gpointer g_async_queue_pop (GAsyncQueue *queue);
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);


gpointer g_async_queue_try_pop (GAsyncQueue *queue);
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);



gpointer g_async_queue_timed_pop (GAsyncQueue *queue,
                                                GTimeVal *end_time);
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue,
                                                GTimeVal *end_time);







gint g_async_queue_length (GAsyncQueue *queue);
gint g_async_queue_length_unlocked (GAsyncQueue *queue);


# 33 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gbacktrace.h" 1
# 32 "/usr/include/glib-2.0/glib/gbacktrace.h"

# 43 "/usr/include/glib-2.0/glib/gbacktrace.h"
void g_on_error_query (const gchar *prg_name);
void g_on_error_stack_trace (const gchar *prg_name);
# 59 "/usr/include/glib-2.0/glib/gbacktrace.h"

# 34 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcache.h" 1
# 30 "/usr/include/glib-2.0/glib/gcache.h"
# 1 "/usr/include/glib-2.0/glib/glist.h" 1
# 30 "/usr/include/glib-2.0/glib/glist.h"
# 1 "/usr/include/glib-2.0/glib/gmem.h" 1
# 32 "/usr/include/glib-2.0/glib/gmem.h"


typedef struct _GAllocator GAllocator;
typedef struct _GMemChunk GMemChunk;
typedef struct _GMemVTable GMemVTable;
# 48 "/usr/include/glib-2.0/glib/gmem.h"
gpointer g_malloc (gulong n_bytes);
gpointer g_malloc0 (gulong n_bytes);
gpointer g_realloc (gpointer mem,
                           gulong n_bytes);
void g_free (gpointer mem);
gpointer g_try_malloc (gulong n_bytes);
gpointer g_try_realloc (gpointer mem,
                           gulong n_bytes);
# 72 "/usr/include/glib-2.0/glib/gmem.h"
struct _GMemVTable
{
  gpointer (*malloc) (gsize n_bytes);
  gpointer (*realloc) (gpointer mem,
                           gsize n_bytes);
  void (*free) (gpointer mem);

  gpointer (*calloc) (gsize n_blocks,
                           gsize n_block_bytes);
  gpointer (*try_malloc) (gsize n_bytes);
  gpointer (*try_realloc) (gpointer mem,
                           gsize n_bytes);
};
void g_mem_set_vtable (GMemVTable *vtable);
gboolean g_mem_is_system_malloc (void);



extern GMemVTable *glib_mem_profiler_table;
void g_mem_profile (void);
# 135 "/usr/include/glib-2.0/glib/gmem.h"
GMemChunk* g_mem_chunk_new (const gchar *name,
                                gint atom_size,
                                gulong area_size,
                                gint type);
void g_mem_chunk_destroy (GMemChunk *mem_chunk);
gpointer g_mem_chunk_alloc (GMemChunk *mem_chunk);
gpointer g_mem_chunk_alloc0 (GMemChunk *mem_chunk);
void g_mem_chunk_free (GMemChunk *mem_chunk,
                                gpointer mem);
void g_mem_chunk_clean (GMemChunk *mem_chunk);
void g_mem_chunk_reset (GMemChunk *mem_chunk);
void g_mem_chunk_print (GMemChunk *mem_chunk);
void g_mem_chunk_info (void);
# 157 "/usr/include/glib-2.0/glib/gmem.h"
void g_blow_chunks (void);




GAllocator* g_allocator_new (const gchar *name,
                               guint n_preallocs);
void g_allocator_free (GAllocator *allocator);








# 31 "/usr/include/glib-2.0/glib/glist.h" 2



typedef struct _GList GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};



void g_list_push_allocator (GAllocator *allocator);
void g_list_pop_allocator (void);
GList* g_list_alloc (void);
void g_list_free (GList *list);
void g_list_free_1 (GList *list);
GList* g_list_append (GList *list,
                                gpointer data);
GList* g_list_prepend (GList *list,
                                gpointer data);
GList* g_list_insert (GList *list,
                                gpointer data,
                                gint position);
GList* g_list_insert_sorted (GList *list,
                                gpointer data,
                                GCompareFunc func);
GList* g_list_insert_before (GList *list,
                                GList *sibling,
                                gpointer data);
GList* g_list_concat (GList *list1,
                                GList *list2);
GList* g_list_remove (GList *list,
                                gconstpointer data);
GList* g_list_remove_all (GList *list,
                                gconstpointer data);
GList* g_list_remove_link (GList *list,
                                GList *llink);
GList* g_list_delete_link (GList *list,
                                GList *link_);
GList* g_list_reverse (GList *list);
GList* g_list_copy (GList *list);
GList* g_list_nth (GList *list,
                                guint n);
GList* g_list_nth_prev (GList *list,
                                guint n);
GList* g_list_find (GList *list,
                                gconstpointer data);
GList* g_list_find_custom (GList *list,
                                gconstpointer data,
                                GCompareFunc func);
gint g_list_position (GList *list,
                                GList *llink);
gint g_list_index (GList *list,
                                gconstpointer data);
GList* g_list_last (GList *list);
GList* g_list_first (GList *list);
guint g_list_length (GList *list);
void g_list_foreach (GList *list,
                                GFunc func,
                                gpointer user_data);
GList* g_list_sort (GList *list,
                                GCompareFunc compare_func);
GList* g_list_sort_with_data (GList *list,
                                GCompareDataFunc compare_func,
                                gpointer user_data);
gpointer g_list_nth_data (GList *list,
                                guint n);





# 31 "/usr/include/glib-2.0/glib/gcache.h" 2



typedef struct _GCache GCache;

typedef gpointer (*GCacheNewFunc) (gpointer key);
typedef gpointer (*GCacheDupFunc) (gpointer value);
typedef void (*GCacheDestroyFunc) (gpointer value);



GCache* g_cache_new (GCacheNewFunc value_new_func,
                                GCacheDestroyFunc value_destroy_func,
                                GCacheDupFunc key_dup_func,
                                GCacheDestroyFunc key_destroy_func,
                                GHashFunc hash_key_func,
                                GHashFunc hash_value_func,
                                GEqualFunc key_equal_func);
void g_cache_destroy (GCache *cache);
gpointer g_cache_insert (GCache *cache,
                                gpointer key);
void g_cache_remove (GCache *cache,
                                gconstpointer value);
void g_cache_key_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);
void g_cache_value_foreach (GCache *cache,
                                GHFunc func,
                                gpointer user_data);


# 35 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gcompletion.h" 1
# 32 "/usr/include/glib-2.0/glib/gcompletion.h"


typedef struct _GCompletion GCompletion;

typedef gchar* (*GCompletionFunc) (gpointer);




typedef gint (*GCompletionStrncmpFunc) (const gchar *s1,
                                        const gchar *s2,
                                        gsize n);

struct _GCompletion
{
  GList* items;
  GCompletionFunc func;

  gchar* prefix;
  GList* cache;
  GCompletionStrncmpFunc strncmp_func;
};

GCompletion* g_completion_new (GCompletionFunc func);
void g_completion_add_items (GCompletion* cmp,
                                        GList* items);
void g_completion_remove_items (GCompletion* cmp,
                                        GList* items);
void g_completion_clear_items (GCompletion* cmp);
GList* g_completion_complete (GCompletion* cmp,
                                        const gchar* prefix,
                                        gchar** new_prefix);
void g_completion_set_compare (GCompletion *cmp,
                                       GCompletionStrncmpFunc strncmp_func);
void g_completion_free (GCompletion* cmp);


# 36 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gconvert.h" 1
# 30 "/usr/include/glib-2.0/glib/gconvert.h"
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stddef.h" 1
# 31 "/usr/include/glib-2.0/glib/gconvert.h" 2




typedef enum
{
  G_CONVERT_ERROR_NO_CONVERSION,
  G_CONVERT_ERROR_ILLEGAL_SEQUENCE,
  G_CONVERT_ERROR_FAILED,
  G_CONVERT_ERROR_PARTIAL_INPUT,
  G_CONVERT_ERROR_BAD_URI,
  G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
} GConvertError;


GQuark g_convert_error_quark (void);



typedef struct _GIConv *GIConv;

GIConv g_iconv_open (const gchar *to_codeset,
                       const gchar *from_codeset);
size_t g_iconv (GIConv converter,
                       gchar **inbuf,
                       gsize *inbytes_left,
                       gchar **outbuf,
                       gsize *outbytes_left);
gint g_iconv_close (GIConv converter);


gchar* g_convert (const gchar *str,
                                gssize len,
                                const gchar *to_codeset,
                                const gchar *from_codeset,
                                gsize *bytes_read,
                                gsize *bytes_written,
                                GError **error);
gchar* g_convert_with_iconv (const gchar *str,
                                gssize len,
                                GIConv converter,
                                gsize *bytes_read,
                                gsize *bytes_written,
                                GError **error);
gchar* g_convert_with_fallback (const gchar *str,
                                gssize len,
                                const gchar *to_codeset,
                                const gchar *from_codeset,
                                gchar *fallback,
                                gsize *bytes_read,
                                gsize *bytes_written,
                                GError **error);




gchar* g_locale_to_utf8 (const gchar *opsysstring,
                           gssize len,
                           gsize *bytes_read,
                           gsize *bytes_written,
                           GError **error);
gchar* g_locale_from_utf8 (const gchar *utf8string,
                           gssize len,
                           gsize *bytes_read,
                           gsize *bytes_written,
                           GError **error);




gchar* g_filename_to_utf8 (const gchar *opsysstring,
                             gssize len,
                             gsize *bytes_read,
                             gsize *bytes_written,
                             GError **error);
gchar* g_filename_from_utf8 (const gchar *utf8string,
                             gssize len,
                             gsize *bytes_read,
                             gsize *bytes_written,
                             GError **error);

gchar *g_filename_from_uri (const char *uri,
                            char **hostname,
                            GError **error);

gchar *g_filename_to_uri (const char *filename,
                            const char *hostname,
                            GError **error);



# 37 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdataset.h" 1
# 32 "/usr/include/glib-2.0/glib/gdataset.h"


typedef struct _GData GData;

typedef void (*GDataForeachFunc) (GQuark key_id,
                                                 gpointer data,
                                                 gpointer user_data);



void g_datalist_init (GData **datalist);
void g_datalist_clear (GData **datalist);
gpointer g_datalist_id_get_data (GData **datalist,
                                          GQuark key_id);
void g_datalist_id_set_data_full (GData **datalist,
                                          GQuark key_id,
                                          gpointer data,
                                          GDestroyNotify destroy_func);
gpointer g_datalist_id_remove_no_notify (GData **datalist,
                                          GQuark key_id);
void g_datalist_foreach (GData **datalist,
                                          GDataForeachFunc func,
                                          gpointer user_data);
# 73 "/usr/include/glib-2.0/glib/gdataset.h"
void g_dataset_destroy (gconstpointer dataset_location);
gpointer g_dataset_id_get_data (gconstpointer dataset_location,
                                         GQuark key_id);
void g_dataset_id_set_data_full (gconstpointer dataset_location,
                                         GQuark key_id,
                                         gpointer data,
                                         GDestroyNotify destroy_func);
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location,
                                         GQuark key_id);
void g_dataset_foreach (gconstpointer dataset_location,
                                         GDataForeachFunc func,
                                         gpointer user_data);
# 100 "/usr/include/glib-2.0/glib/gdataset.h"

# 38 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdate.h" 1
# 32 "/usr/include/glib-2.0/glib/gdate.h"

# 43 "/usr/include/glib-2.0/glib/gdate.h"
typedef gint32 GTime;
typedef guint16 GDateYear;
typedef guint8 GDateDay;
typedef struct _GDate GDate;

struct tm;


typedef enum
{
  G_DATE_DAY = 0,
  G_DATE_MONTH = 1,
  G_DATE_YEAR = 2
} GDateDMY;


typedef enum
{
  G_DATE_BAD_WEEKDAY = 0,
  G_DATE_MONDAY = 1,
  G_DATE_TUESDAY = 2,
  G_DATE_WEDNESDAY = 3,
  G_DATE_THURSDAY = 4,
  G_DATE_FRIDAY = 5,
  G_DATE_SATURDAY = 6,
  G_DATE_SUNDAY = 7
} GDateWeekday;
typedef enum
{
  G_DATE_BAD_MONTH = 0,
  G_DATE_JANUARY = 1,
  G_DATE_FEBRUARY = 2,
  G_DATE_MARCH = 3,
  G_DATE_APRIL = 4,
  G_DATE_MAY = 5,
  G_DATE_JUNE = 6,
  G_DATE_JULY = 7,
  G_DATE_AUGUST = 8,
  G_DATE_SEPTEMBER = 9,
  G_DATE_OCTOBER = 10,
  G_DATE_NOVEMBER = 11,
  G_DATE_DECEMBER = 12
} GDateMonth;
# 96 "/usr/include/glib-2.0/glib/gdate.h"
struct _GDate
{
  guint julian_days : 32;





  guint julian : 1;
  guint dmy : 1;


  guint day : 6;
  guint month : 4;
  guint year : 16;
};





GDate* g_date_new (void);
GDate* g_date_new_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year);
GDate* g_date_new_julian (guint32 julian_day);
void g_date_free (GDate *date);






gboolean g_date_valid (const GDate *date);
gboolean g_date_valid_day (GDateDay day) ;
gboolean g_date_valid_month (GDateMonth month) ;
gboolean g_date_valid_year (GDateYear year) ;
gboolean g_date_valid_weekday (GDateWeekday weekday) ;
gboolean g_date_valid_julian (guint32 julian_date) ;
gboolean g_date_valid_dmy (GDateDay day,
                                           GDateMonth month,
                                           GDateYear year) ;

GDateWeekday g_date_get_weekday (const GDate *date);
GDateMonth g_date_get_month (const GDate *date);
GDateYear g_date_get_year (const GDate *date);
GDateDay g_date_get_day (const GDate *date);
guint32 g_date_get_julian (const GDate *date);
guint g_date_get_day_of_year (const GDate *date);






guint g_date_get_monday_week_of_year (const GDate *date);
guint g_date_get_sunday_week_of_year (const GDate *date);





void g_date_clear (GDate *date,
                                           guint n_dates);





void g_date_set_parse (GDate *date,
                                           const gchar *str);
void g_date_set_time (GDate *date,
                                           GTime time_);
void g_date_set_month (GDate *date,
                                           GDateMonth month);
void g_date_set_day (GDate *date,
                                           GDateDay day);
void g_date_set_year (GDate *date,
                                           GDateYear year);
void g_date_set_dmy (GDate *date,
                                           GDateDay day,
                                           GDateMonth month,
                                           GDateYear y);
void g_date_set_julian (GDate *date,
                                           guint32 julian_date);
gboolean g_date_is_first_of_month (const GDate *date);
gboolean g_date_is_last_of_month (const GDate *date);


void g_date_add_days (GDate *date,
                                           guint n_days);
void g_date_subtract_days (GDate *date,
                                           guint n_days);


void g_date_add_months (GDate *date,
                                           guint n_months);
void g_date_subtract_months (GDate *date,
                                           guint n_months);


void g_date_add_years (GDate *date,
                                           guint n_years);
void g_date_subtract_years (GDate *date,
                                           guint n_years);
gboolean g_date_is_leap_year (GDateYear year) ;
guint8 g_date_get_days_in_month (GDateMonth month,
                                           GDateYear year) ;
guint8 g_date_get_monday_weeks_in_year (GDateYear year) ;
guint8 g_date_get_sunday_weeks_in_year (GDateYear year) ;



gint g_date_days_between (const GDate *date1,
                                           const GDate *date2);


gint g_date_compare (const GDate *lhs,
                                           const GDate *rhs);
void g_date_to_struct_tm (const GDate *date,
                                           struct tm *tm);

void g_date_clamp (GDate *date,
                                           const GDate *min_date,
                                           const GDate *max_date);


void g_date_order (GDate *date1, GDate *date2);




gsize g_date_strftime (gchar *s,
                                           gsize slen,
                                           const gchar *format,
                                           const GDate *date);
# 249 "/usr/include/glib-2.0/glib/gdate.h"

# 39 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gdir.h" 1
# 28 "/usr/include/glib-2.0/glib/gdir.h"


typedef struct _GDir GDir;

GDir * g_dir_open (const gchar *path,
                                         guint flags,
                                         GError **error);
const gchar *g_dir_read_name (GDir *dir);
void g_dir_rewind (GDir *dir);
void g_dir_close (GDir *dir);


# 40 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gfileutils.h" 1
# 26 "/usr/include/glib-2.0/glib/gfileutils.h"




typedef enum
{
  G_FILE_ERROR_EXIST,
  G_FILE_ERROR_ISDIR,
  G_FILE_ERROR_ACCES,
  G_FILE_ERROR_NAMETOOLONG,
  G_FILE_ERROR_NOENT,
  G_FILE_ERROR_NOTDIR,
  G_FILE_ERROR_NXIO,
  G_FILE_ERROR_NODEV,
  G_FILE_ERROR_ROFS,
  G_FILE_ERROR_TXTBSY,
  G_FILE_ERROR_FAULT,
  G_FILE_ERROR_LOOP,
  G_FILE_ERROR_NOSPC,
  G_FILE_ERROR_NOMEM,
  G_FILE_ERROR_MFILE,
  G_FILE_ERROR_NFILE,
  G_FILE_ERROR_BADF,
  G_FILE_ERROR_INVAL,
  G_FILE_ERROR_PIPE,
  G_FILE_ERROR_AGAIN,
  G_FILE_ERROR_INTR,
  G_FILE_ERROR_IO,
  G_FILE_ERROR_PERM,
  G_FILE_ERROR_FAILED
} GFileError;





typedef enum
{
  G_FILE_TEST_IS_REGULAR = 1 << 0,
  G_FILE_TEST_IS_SYMLINK = 1 << 1,
  G_FILE_TEST_IS_DIR = 1 << 2,
  G_FILE_TEST_IS_EXECUTABLE = 1 << 3,
  G_FILE_TEST_EXISTS = 1 << 4
} GFileTest;

GQuark g_file_error_quark (void);

GFileError g_file_error_from_errno (gint err_no);

gboolean g_file_test (const gchar *filename,
                              GFileTest test);
gboolean g_file_get_contents (const gchar *filename,
                              gchar **contents,
                              gsize *length,
                              GError **error);



int g_mkstemp (char *tmpl);


int g_file_open_tmp (const char *tmpl,
                              char **name_used,
                              GError **error);

gchar *g_build_path (const gchar *separator,
                         const gchar *first_element,
                         ...);
gchar *g_build_filename (const gchar *first_element,
                         ...);


# 42 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghash.h" 1
# 32 "/usr/include/glib-2.0/glib/ghash.h"


typedef struct _GHashTable GHashTable;

typedef gboolean (*GHRFunc) (gpointer key,
                               gpointer value,
                               gpointer user_data);



GHashTable* g_hash_table_new (GHashFunc hash_func,
                                            GEqualFunc key_equal_func);
GHashTable* g_hash_table_new_full (GHashFunc hash_func,
                                            GEqualFunc key_equal_func,
                                            GDestroyNotify key_destroy_func,
                                            GDestroyNotify value_destroy_func);
void g_hash_table_destroy (GHashTable *hash_table);
void g_hash_table_insert (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
void g_hash_table_replace (GHashTable *hash_table,
                                            gpointer key,
                                            gpointer value);
gboolean g_hash_table_remove (GHashTable *hash_table,
                                            gconstpointer key);
gboolean g_hash_table_steal (GHashTable *hash_table,
                                            gconstpointer key);
gpointer g_hash_table_lookup (GHashTable *hash_table,
                                            gconstpointer key);
gboolean g_hash_table_lookup_extended (GHashTable *hash_table,
                                            gconstpointer lookup_key,
                                            gpointer *orig_key,
                                            gpointer *value);
void g_hash_table_foreach (GHashTable *hash_table,
                                            GHFunc func,
                                            gpointer user_data);
guint g_hash_table_foreach_remove (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
guint g_hash_table_foreach_steal (GHashTable *hash_table,
                                            GHRFunc func,
                                            gpointer user_data);
guint g_hash_table_size (GHashTable *hash_table);
# 87 "/usr/include/glib-2.0/glib/ghash.h"
gboolean g_str_equal (gconstpointer v,
                      gconstpointer v2);
guint g_str_hash (gconstpointer v);

gboolean g_int_equal (gconstpointer v,
                      gconstpointer v2);
guint g_int_hash (gconstpointer v);







guint g_direct_hash (gconstpointer v) ;
gboolean g_direct_equal (gconstpointer v,
                         gconstpointer v2) ;


# 43 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/ghook.h" 1
# 32 "/usr/include/glib-2.0/glib/ghook.h"




typedef struct _GHook GHook;
typedef struct _GHookList GHookList;

typedef gint (*GHookCompareFunc) (GHook *new_hook,
                                                 GHook *sibling);
typedef gboolean (*GHookFindFunc) (GHook *hook,
                                                 gpointer data);
typedef void (*GHookMarshaller) (GHook *hook,
                                                 gpointer marshal_data);
typedef gboolean (*GHookCheckMarshaller) (GHook *hook,
                                                 gpointer marshal_data);
typedef void (*GHookFunc) (gpointer data);
typedef gboolean (*GHookCheckFunc) (gpointer data);
typedef void (*GHookFinalizeFunc) (GHookList *hook_list,
                                                 GHook *hook);
typedef enum
{
  G_HOOK_FLAG_ACTIVE = 1 << 0,
  G_HOOK_FLAG_IN_CALL = 1 << 1,
  G_HOOK_FLAG_MASK = 0x0f
} GHookFlagMask;




struct _GHookList
{
  gulong seq_id;
  guint hook_size : 16;
  guint is_setup : 1;
  GHook *hooks;
  GMemChunk *hook_memchunk;
  GHookFinalizeFunc finalize_hook;
  gpointer dummy[2];
};
struct _GHook
{
  gpointer data;
  GHook *next;
  GHook *prev;
  guint ref_count;
  gulong hook_id;
  guint flags;
  gpointer func;
  GDestroyNotify destroy;
};
# 102 "/usr/include/glib-2.0/glib/ghook.h"
void g_hook_list_init (GHookList *hook_list,
                                         guint hook_size);
void g_hook_list_clear (GHookList *hook_list);
GHook* g_hook_alloc (GHookList *hook_list);
void g_hook_free (GHookList *hook_list,
                                         GHook *hook);
void g_hook_ref (GHookList *hook_list,
                                         GHook *hook);
void g_hook_unref (GHookList *hook_list,
                                         GHook *hook);
gboolean g_hook_destroy (GHookList *hook_list,
                                         gulong hook_id);
void g_hook_destroy_link (GHookList *hook_list,
                                         GHook *hook);
void g_hook_prepend (GHookList *hook_list,
                                         GHook *hook);
void g_hook_insert_before (GHookList *hook_list,
                                         GHook *sibling,
                                         GHook *hook);
void g_hook_insert_sorted (GHookList *hook_list,
                                         GHook *hook,
                                         GHookCompareFunc func);
GHook* g_hook_get (GHookList *hook_list,
                                         gulong hook_id);
GHook* g_hook_find (GHookList *hook_list,
                                         gboolean need_valids,
                                         GHookFindFunc func,
                                         gpointer data);
GHook* g_hook_find_data (GHookList *hook_list,
                                         gboolean need_valids,
                                         gpointer data);
GHook* g_hook_find_func (GHookList *hook_list,
                                         gboolean need_valids,
                                         gpointer func);
GHook* g_hook_find_func_data (GHookList *hook_list,
                                         gboolean need_valids,
                                         gpointer func,
                                         gpointer data);

GHook* g_hook_first_valid (GHookList *hook_list,
                                         gboolean may_be_in_call);



GHook* g_hook_next_valid (GHookList *hook_list,
                                         GHook *hook,
                                         gboolean may_be_in_call);

gint g_hook_compare_ids (GHook *new_hook,
                                         GHook *sibling);





void g_hook_list_invoke (GHookList *hook_list,
                                         gboolean may_recurse);



void g_hook_list_invoke_check (GHookList *hook_list,
                                         gboolean may_recurse);


void g_hook_list_marshal (GHookList *hook_list,
                                         gboolean may_recurse,
                                         GHookMarshaller marshaller,
                                         gpointer marshal_data);
void g_hook_list_marshal_check (GHookList *hook_list,
                                         gboolean may_recurse,
                                         GHookCheckMarshaller marshaller,
                                         gpointer marshal_data);


# 44 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/giochannel.h" 1
# 31 "/usr/include/glib-2.0/glib/giochannel.h"
# 1 "/usr/include/glib-2.0/glib/gmain.h" 1
# 23 "/usr/include/glib-2.0/glib/gmain.h"
# 1 "/usr/include/glib-2.0/glib/gslist.h" 1
# 32 "/usr/include/glib-2.0/glib/gslist.h"


typedef struct _GSList GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};



void g_slist_push_allocator (GAllocator *allocator);
void g_slist_pop_allocator (void);
GSList* g_slist_alloc (void);
void g_slist_free (GSList *list);
void g_slist_free_1 (GSList *list);
GSList* g_slist_append (GSList *list,
                                 gpointer data);
GSList* g_slist_prepend (GSList *list,
                                 gpointer data);
GSList* g_slist_insert (GSList *list,
                                 gpointer data,
                                 gint position);
GSList* g_slist_insert_sorted (GSList *list,
                                 gpointer data,
                                 GCompareFunc func);
GSList* g_slist_insert_before (GSList *slist,
                                 GSList *sibling,
                                 gpointer data);
GSList* g_slist_concat (GSList *list1,
                                 GSList *list2);
GSList* g_slist_remove (GSList *list,
                                 gconstpointer data);
GSList* g_slist_remove_all (GSList *list,
                                 gconstpointer data);
GSList* g_slist_remove_link (GSList *list,
                                 GSList *link_);
GSList* g_slist_delete_link (GSList *list,
                                 GSList *link_);
GSList* g_slist_reverse (GSList *list);
GSList* g_slist_copy (GSList *list);
GSList* g_slist_nth (GSList *list,
                                 guint n);
GSList* g_slist_find (GSList *list,
                                 gconstpointer data);
GSList* g_slist_find_custom (GSList *list,
                                 gconstpointer data,
                                 GCompareFunc func);
gint g_slist_position (GSList *list,
                                 GSList *llink);
gint g_slist_index (GSList *list,
                                 gconstpointer data);
GSList* g_slist_last (GSList *list);
guint g_slist_length (GSList *list);
void g_slist_foreach (GSList *list,
                                 GFunc func,
                                 gpointer user_data);
GSList* g_slist_sort (GSList *list,
                                 GCompareFunc compare_func);
GSList* g_slist_sort_with_data (GSList *list,
                                 GCompareDataFunc compare_func,
                                 gpointer user_data);
gpointer g_slist_nth_data (GSList *list,
                                 guint n);



# 24 "/usr/include/glib-2.0/glib/gmain.h" 2




typedef struct _GMainContext GMainContext;
typedef struct _GMainLoop GMainLoop;
typedef struct _GSource GSource;
typedef struct _GSourceCallbackFuncs GSourceCallbackFuncs;
typedef struct _GSourceFuncs GSourceFuncs;

typedef gboolean (*GSourceFunc) (gpointer data);

struct _GSource
{

  gpointer callback_data;
  GSourceCallbackFuncs *callback_funcs;

  GSourceFuncs *source_funcs;
  guint ref_count;

  GMainContext *context;

  gint priority;
  guint flags;
  guint source_id;

  GSList *poll_fds;

  GSource *prev;
  GSource *next;

  gpointer reserved1;
  gpointer reserved2;
};

struct _GSourceCallbackFuncs
{
  void (*ref) (gpointer cb_data);
  void (*unref) (gpointer cb_data);
  void (*get) (gpointer cb_data,
                 GSource *source,
                 GSourceFunc *func,
                 gpointer *data);
};

typedef void (*GSourceDummyMarshal) (void);

struct _GSourceFuncs
{
  gboolean (*prepare) (GSource *source,
                        gint *timeout_);
  gboolean (*check) (GSource *source);
  gboolean (*dispatch) (GSource *source,
                        GSourceFunc callback,
                        gpointer user_data);
  void (*finalize) (GSource *source);


  GSourceFunc closure_callback;
  GSourceDummyMarshal closure_marshal;
};
# 114 "/usr/include/glib-2.0/glib/gmain.h"
typedef struct _GPollFD GPollFD;
typedef gint (*GPollFunc) (GPollFD *ufds,
                                 guint nfsd,
                                 gint timeout_);

struct _GPollFD
{
  gint fd;
  gushort events;
  gushort revents;
};
# 136 "/usr/include/glib-2.0/glib/gmain.h"
GMainContext *g_main_context_new (void);
void g_main_context_ref (GMainContext *context);
void g_main_context_unref (GMainContext *context);
GMainContext *g_main_context_default (void);

gboolean g_main_context_iteration (GMainContext *context,
                                        gboolean may_block);
gboolean g_main_context_pending (GMainContext *context);



GSource *g_main_context_find_source_by_id (GMainContext *context,
                                                             guint source_id);
GSource *g_main_context_find_source_by_user_data (GMainContext *context,
                                                             gpointer user_data);
GSource *g_main_context_find_source_by_funcs_user_data (GMainContext *context,
                                                             GSourceFuncs *funcs,
                                                             gpointer user_data);



void g_main_context_wakeup (GMainContext *context);
gboolean g_main_context_acquire (GMainContext *context);
void g_main_context_release (GMainContext *context);
gboolean g_main_context_wait (GMainContext *context,
                                 GCond *cond,
                                 GMutex *mutex);

gboolean g_main_context_prepare (GMainContext *context,
                                  gint *priority);
gint g_main_context_query (GMainContext *context,
                                  gint max_priority,
                                  gint *timeout_,
                                  GPollFD *fds,
                                  gint n_fds);
gint g_main_context_check (GMainContext *context,
                                  gint max_priority,
                                  GPollFD *fds,
                                  gint n_fds);
void g_main_context_dispatch (GMainContext *context);

void g_main_context_set_poll_func (GMainContext *context,
                                        GPollFunc func);
GPollFunc g_main_context_get_poll_func (GMainContext *context);



void g_main_context_add_poll (GMainContext *context,
                                   GPollFD *fd,
                                   gint priority);
void g_main_context_remove_poll (GMainContext *context,
                                   GPollFD *fd);



GMainLoop *g_main_loop_new (GMainContext *context,
                                   gboolean is_running);
void g_main_loop_run (GMainLoop *loop);
void g_main_loop_quit (GMainLoop *loop);
GMainLoop *g_main_loop_ref (GMainLoop *loop);
void g_main_loop_unref (GMainLoop *loop);
gboolean g_main_loop_is_running (GMainLoop *loop);
GMainContext *g_main_loop_get_context (GMainLoop *loop);



GSource *g_source_new (GSourceFuncs *source_funcs,
                                   guint struct_size);
GSource *g_source_ref (GSource *source);
void g_source_unref (GSource *source);

guint g_source_attach (GSource *source,
                                   GMainContext *context);
void g_source_destroy (GSource *source);

void g_source_set_priority (GSource *source,
                                   gint priority);
gint g_source_get_priority (GSource *source);
void g_source_set_can_recurse (GSource *source,
                                   gboolean can_recurse);
gboolean g_source_get_can_recurse (GSource *source);
guint g_source_get_id (GSource *source);

GMainContext *g_source_get_context (GSource *source);

void g_source_set_callback (GSource *source,
                                     GSourceFunc func,
                                     gpointer data,
                                     GDestroyNotify notify);



void g_source_set_callback_indirect (GSource *source,
                                     gpointer callback_data,
                                     GSourceCallbackFuncs *callback_funcs);

void g_source_add_poll (GSource *source,
                                    GPollFD *fd);
void g_source_remove_poll (GSource *source,
                                    GPollFD *fd);

void g_source_get_current_time (GSource *source,
                                    GTimeVal *timeval);







GSource *g_idle_source_new (void);
GSource *g_timeout_source_new (guint interval);



void g_get_current_time (GTimeVal *result);
# 276 "/usr/include/glib-2.0/glib/gmain.h"
gboolean g_source_remove (guint tag);
gboolean g_source_remove_by_user_data (gpointer user_data);
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs,
                                              gpointer user_data);


guint g_timeout_add_full (gint priority,
                                         guint interval,
                                         GSourceFunc function,
                                         gpointer data,
                                         GDestroyNotify notify);
guint g_timeout_add (guint interval,
                                         GSourceFunc function,
                                         gpointer data);
guint g_idle_add (GSourceFunc function,
                                         gpointer data);
guint g_idle_add_full (gint priority,
                                         GSourceFunc function,
                                         gpointer data,
                                         GDestroyNotify notify);
gboolean g_idle_remove_by_data (gpointer data);


extern GSourceFuncs g_timeout_funcs;
extern GSourceFuncs g_idle_funcs;


# 32 "/usr/include/glib-2.0/glib/giochannel.h" 2
# 1 "/usr/include/glib-2.0/glib/gstring.h" 1
# 31 "/usr/include/glib-2.0/glib/gstring.h"
# 1 "/usr/include/glib-2.0/glib/gunicode.h" 1
# 28 "/usr/include/glib-2.0/glib/gunicode.h"


typedef guint32 gunichar;
typedef guint16 gunichar2;




typedef enum
{
  G_UNICODE_CONTROL,
  G_UNICODE_FORMAT,
  G_UNICODE_UNASSIGNED,
  G_UNICODE_PRIVATE_USE,
  G_UNICODE_SURROGATE,
  G_UNICODE_LOWERCASE_LETTER,
  G_UNICODE_MODIFIER_LETTER,
  G_UNICODE_OTHER_LETTER,
  G_UNICODE_TITLECASE_LETTER,
  G_UNICODE_UPPERCASE_LETTER,
  G_UNICODE_COMBINING_MARK,
  G_UNICODE_ENCLOSING_MARK,
  G_UNICODE_NON_SPACING_MARK,
  G_UNICODE_DECIMAL_NUMBER,
  G_UNICODE_LETTER_NUMBER,
  G_UNICODE_OTHER_NUMBER,
  G_UNICODE_CONNECT_PUNCTUATION,
  G_UNICODE_DASH_PUNCTUATION,
  G_UNICODE_CLOSE_PUNCTUATION,
  G_UNICODE_FINAL_PUNCTUATION,
  G_UNICODE_INITIAL_PUNCTUATION,
  G_UNICODE_OTHER_PUNCTUATION,
  G_UNICODE_OPEN_PUNCTUATION,
  G_UNICODE_CURRENCY_SYMBOL,
  G_UNICODE_MODIFIER_SYMBOL,
  G_UNICODE_MATH_SYMBOL,
  G_UNICODE_OTHER_SYMBOL,
  G_UNICODE_LINE_SEPARATOR,
  G_UNICODE_PARAGRAPH_SEPARATOR,
  G_UNICODE_SPACE_SEPARATOR
} GUnicodeType;




typedef enum
{
  G_UNICODE_BREAK_MANDATORY,
  G_UNICODE_BREAK_CARRIAGE_RETURN,
  G_UNICODE_BREAK_LINE_FEED,
  G_UNICODE_BREAK_COMBINING_MARK,
  G_UNICODE_BREAK_SURROGATE,
  G_UNICODE_BREAK_ZERO_WIDTH_SPACE,
  G_UNICODE_BREAK_INSEPARABLE,
  G_UNICODE_BREAK_NON_BREAKING_GLUE,
  G_UNICODE_BREAK_CONTINGENT,
  G_UNICODE_BREAK_SPACE,
  G_UNICODE_BREAK_AFTER,
  G_UNICODE_BREAK_BEFORE,
  G_UNICODE_BREAK_BEFORE_AND_AFTER,
  G_UNICODE_BREAK_HYPHEN,
  G_UNICODE_BREAK_NON_STARTER,
  G_UNICODE_BREAK_OPEN_PUNCTUATION,
  G_UNICODE_BREAK_CLOSE_PUNCTUATION,
  G_UNICODE_BREAK_QUOTATION,
  G_UNICODE_BREAK_EXCLAMATION,
  G_UNICODE_BREAK_IDEOGRAPHIC,
  G_UNICODE_BREAK_NUMERIC,
  G_UNICODE_BREAK_INFIX_SEPARATOR,
  G_UNICODE_BREAK_SYMBOL,
  G_UNICODE_BREAK_ALPHABETIC,
  G_UNICODE_BREAK_PREFIX,
  G_UNICODE_BREAK_POSTFIX,
  G_UNICODE_BREAK_COMPLEX_CONTEXT,
  G_UNICODE_BREAK_AMBIGUOUS,
  G_UNICODE_BREAK_UNKNOWN
} GUnicodeBreakType;







gboolean g_get_charset (const char **charset);



gboolean g_unichar_isalnum (gunichar c) ;
gboolean g_unichar_isalpha (gunichar c) ;
gboolean g_unichar_iscntrl (gunichar c) ;
gboolean g_unichar_isdigit (gunichar c) ;
gboolean g_unichar_isgraph (gunichar c) ;
gboolean g_unichar_islower (gunichar c) ;
gboolean g_unichar_isprint (gunichar c) ;
gboolean g_unichar_ispunct (gunichar c) ;
gboolean g_unichar_isspace (gunichar c) ;
gboolean g_unichar_isupper (gunichar c) ;
gboolean g_unichar_isxdigit (gunichar c) ;
gboolean g_unichar_istitle (gunichar c) ;
gboolean g_unichar_isdefined (gunichar c) ;
gboolean g_unichar_iswide (gunichar c) ;



gunichar g_unichar_toupper (gunichar c) ;
gunichar g_unichar_tolower (gunichar c) ;
gunichar g_unichar_totitle (gunichar c) ;



gint g_unichar_digit_value (gunichar c) ;

gint g_unichar_xdigit_value (gunichar c) ;


GUnicodeType g_unichar_type (gunichar c) ;


GUnicodeBreakType g_unichar_break_type (gunichar c) ;





void g_unicode_canonical_ordering (gunichar *string,
                                   gsize len);




gunichar *g_unicode_canonical_decomposition (gunichar ch,
                                             gsize *result_len);



extern const gchar * const g_utf8_skip;



gunichar g_utf8_get_char (const gchar *p);
gunichar g_utf8_get_char_validated (const gchar *p,
                                    gssize max_len);

gchar* g_utf8_offset_to_pointer (const gchar *str,
                                   glong offset);
glong g_utf8_pointer_to_offset (const gchar *str,
                                   const gchar *pos);
gchar* g_utf8_prev_char (const gchar *p);
gchar* g_utf8_find_next_char (const gchar *p,
                                   const gchar *end);
gchar* g_utf8_find_prev_char (const gchar *str,
                                   const gchar *p);

glong g_utf8_strlen (const gchar *p,
                     gssize max);


gchar* g_utf8_strncpy (gchar *dest,
                       const gchar *src,
                       gsize n);



gchar* g_utf8_strchr (const gchar *p,
                       gssize len,
                       gunichar c);
gchar* g_utf8_strrchr (const gchar *p,
                       gssize len,
                       gunichar c);
gchar* g_utf8_strreverse (const gchar *str,
                          gssize len);

gunichar2 *g_utf8_to_utf16 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);
gunichar * g_utf8_to_ucs4 (const gchar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);
gunichar * g_utf8_to_ucs4_fast (const gchar *str,
                                glong len,
                                glong *items_written);
gunichar * g_utf16_to_ucs4 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);
gchar* g_utf16_to_utf8 (const gunichar2 *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);
gunichar2 *g_ucs4_to_utf16 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);
gchar* g_ucs4_to_utf8 (const gunichar *str,
                                glong len,
                                glong *items_read,
                                glong *items_written,
                                GError **error);





gint g_unichar_to_utf8 (gunichar c,
                             gchar *outbuf);





gboolean g_utf8_validate (const gchar *str,
                          gssize max_len,
                          const gchar **end);


gboolean g_unichar_validate (gunichar ch);

gchar *g_utf8_strup (const gchar *str,
                       gssize len);
gchar *g_utf8_strdown (const gchar *str,
                       gssize len);
gchar *g_utf8_casefold (const gchar *str,
                        gssize len);

typedef enum {
  G_NORMALIZE_DEFAULT,
  G_NORMALIZE_NFD = G_NORMALIZE_DEFAULT,
  G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_NFC = G_NORMALIZE_DEFAULT_COMPOSE,
  G_NORMALIZE_ALL,
  G_NORMALIZE_NFKD = G_NORMALIZE_ALL,
  G_NORMALIZE_ALL_COMPOSE,
  G_NORMALIZE_NFKC = G_NORMALIZE_ALL_COMPOSE
} GNormalizeMode;

gchar *g_utf8_normalize (const gchar *str,
                         gssize len,
                         GNormalizeMode mode);

gint g_utf8_collate (const gchar *str1,
                           const gchar *str2);
gchar *g_utf8_collate_key (const gchar *str,
                           gssize len);


# 32 "/usr/include/glib-2.0/glib/gstring.h" 2



typedef struct _GString GString;
typedef struct _GStringChunk GStringChunk;

struct _GString
{
  gchar *str;
  gsize len;
  gsize allocated_len;
};



GStringChunk* g_string_chunk_new (gsize size);
void g_string_chunk_free (GStringChunk *chunk);
gchar* g_string_chunk_insert (GStringChunk *chunk,
                                            const gchar *string);
gchar* g_string_chunk_insert_const (GStringChunk *chunk,
                                            const gchar *string);




GString* g_string_new (const gchar *init);
GString* g_string_new_len (const gchar *init,
                                         gssize len);
GString* g_string_sized_new (gsize dfl_size);
gchar* g_string_free (GString *string,
                                         gboolean free_segment);
gboolean g_string_equal (const GString *v,
                                         const GString *v2);
guint g_string_hash (const GString *str);
GString* g_string_assign (GString *string,
                                         const gchar *rval);
GString* g_string_truncate (GString *string,
                                         gsize len);
GString* g_string_set_size (GString *string,
                                         gsize len);
GString* g_string_insert_len (GString *string,
                                         gssize pos,
                                         const gchar *val,
                                         gssize len);
GString* g_string_append (GString *string,
                                         const gchar *val);
GString* g_string_append_len (GString *string,
                                         const gchar *val,
                                         gssize len);
GString* g_string_append_c (GString *string,
                                         gchar c);
GString* g_string_append_unichar (GString *string,
                                         gunichar wc);
GString* g_string_prepend (GString *string,
                                         const gchar *val);
GString* g_string_prepend_c (GString *string,
                                         gchar c);
GString* g_string_prepend_unichar (GString *string,
                                         gunichar wc);
GString* g_string_prepend_len (GString *string,
                                         const gchar *val,
                                         gssize len);
GString* g_string_insert (GString *string,
                                         gssize pos,
                                         const gchar *val);
GString* g_string_insert_c (GString *string,
                                         gssize pos,
                                         gchar c);
GString* g_string_insert_unichar (GString *string,
                                         gssize pos,
                                         gunichar wc);
GString* g_string_erase (GString *string,
                                         gssize pos,
                                         gssize len);
GString* g_string_ascii_down (GString *string);
GString* g_string_ascii_up (GString *string);
void g_string_printf (GString *string,
                                         const gchar *format,
                                         ...) ;
void g_string_append_printf (GString *string,
                                         const gchar *format,
                                         ...) ;
# 122 "/usr/include/glib-2.0/glib/gstring.h"
GString* g_string_down (GString *string);
GString* g_string_up (GString *string);








# 33 "/usr/include/glib-2.0/glib/giochannel.h" 2






typedef struct _GIOChannel GIOChannel;
typedef struct _GIOFuncs GIOFuncs;

typedef enum
{
  G_IO_ERROR_NONE,
  G_IO_ERROR_AGAIN,
  G_IO_ERROR_INVAL,
  G_IO_ERROR_UNKNOWN
} GIOError;



typedef enum
{

  G_IO_CHANNEL_ERROR_FBIG,
  G_IO_CHANNEL_ERROR_INVAL,
  G_IO_CHANNEL_ERROR_IO,
  G_IO_CHANNEL_ERROR_ISDIR,
  G_IO_CHANNEL_ERROR_NOSPC,
  G_IO_CHANNEL_ERROR_NXIO,
  G_IO_CHANNEL_ERROR_OVERFLOW,
  G_IO_CHANNEL_ERROR_PIPE,

  G_IO_CHANNEL_ERROR_FAILED
} GIOChannelError;

typedef enum
{
  G_IO_STATUS_ERROR,
  G_IO_STATUS_NORMAL,
  G_IO_STATUS_EOF,
  G_IO_STATUS_AGAIN
} GIOStatus;

typedef enum
{
  G_SEEK_CUR,
  G_SEEK_SET,
  G_SEEK_END
} GSeekType;

typedef enum
{
  G_IO_IN =1,
  G_IO_OUT =4,
  G_IO_PRI =2,
  G_IO_ERR =8,
  G_IO_HUP =16,
  G_IO_NVAL =32
} GIOCondition;

typedef enum
{
  G_IO_FLAG_APPEND = 1 << 0,
  G_IO_FLAG_NONBLOCK = 1 << 1,
  G_IO_FLAG_IS_READABLE = 1 << 2,
  G_IO_FLAG_IS_WRITEABLE = 1 << 3,
  G_IO_FLAG_IS_SEEKABLE = 1 << 4,
  G_IO_FLAG_MASK = (1 << 5) - 1,
  G_IO_FLAG_GET_MASK = G_IO_FLAG_MASK,
  G_IO_FLAG_SET_MASK = G_IO_FLAG_APPEND | G_IO_FLAG_NONBLOCK
} GIOFlags;

struct _GIOChannel
{

  guint ref_count;
  GIOFuncs *funcs;

  gchar *encoding;
  GIConv read_cd;
  GIConv write_cd;
  gchar *line_term;
  guint line_term_len;

  gsize buf_size;
  GString *read_buf;
  GString *encoded_read_buf;
  GString *write_buf;
  gchar partial_write_buf[6];



  guint use_buffer : 1;
  guint do_encode : 1;
  guint close_on_unref : 1;
  guint is_readable : 1;
  guint is_writeable : 1;
  guint is_seekable : 1;

  gpointer reserved1;
  gpointer reserved2;
};

typedef gboolean (*GIOFunc) (GIOChannel *source,
                             GIOCondition condition,
                             gpointer data);
struct _GIOFuncs
{
  GIOStatus (*io_read) (GIOChannel *channel,
                                  gchar *buf,
                                  gsize count,
                                  gsize *bytes_read,
                                  GError **err);
  GIOStatus (*io_write) (GIOChannel *channel,
                                  const gchar *buf,
                                  gsize count,
                                  gsize *bytes_written,
                                  GError **err);
  GIOStatus (*io_seek) (GIOChannel *channel,
                                  gint64 offset,
                                  GSeekType type,
                                  GError **err);
  GIOStatus (*io_close) (GIOChannel *channel,
                                  GError **err);
  GSource* (*io_create_watch) (GIOChannel *channel,
                                  GIOCondition condition);
  void (*io_free) (GIOChannel *channel);
  GIOStatus (*io_set_flags) (GIOChannel *channel,
                                  GIOFlags flags,
                                  GError **err);
  GIOFlags (*io_get_flags) (GIOChannel *channel);
};

void g_io_channel_init (GIOChannel *channel);
void g_io_channel_ref (GIOChannel *channel);
void g_io_channel_unref (GIOChannel *channel);


GIOError g_io_channel_read (GIOChannel *channel,
                                 gchar *buf,
                                 gsize count,
                                 gsize *bytes_read);
GIOError g_io_channel_write (GIOChannel *channel,
                                 const gchar *buf,
                                 gsize count,
                                 gsize *bytes_written);
GIOError g_io_channel_seek (GIOChannel *channel,
                                 gint64 offset,
                                 GSeekType type);
void g_io_channel_close (GIOChannel *channel);


GIOStatus g_io_channel_shutdown (GIOChannel *channel,
                                 gboolean flush,
                                 GError **err);
guint g_io_add_watch_full (GIOChannel *channel,
                                 gint priority,
                                 GIOCondition condition,
                                 GIOFunc func,
                                 gpointer user_data,
                                 GDestroyNotify notify);
GSource * g_io_create_watch (GIOChannel *channel,
                                 GIOCondition condition);
guint g_io_add_watch (GIOChannel *channel,
                                 GIOCondition condition,
                                 GIOFunc func,
                                 gpointer user_data);




void g_io_channel_set_buffer_size (GIOChannel *channel,
                                                         gsize size);
gsize g_io_channel_get_buffer_size (GIOChannel *channel);
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);
GIOStatus g_io_channel_set_flags (GIOChannel *channel,
                                                         GIOFlags flags,
                                                         GError **error);
GIOFlags g_io_channel_get_flags (GIOChannel *channel);
void g_io_channel_set_line_term (GIOChannel *channel,
                                                         const gchar *line_term,
                                                         gint length);
const gchar* g_io_channel_get_line_term (GIOChannel *channel,
                                                         gint *length);
void g_io_channel_set_buffered (GIOChannel *channel,
                                                         gboolean buffered);
gboolean g_io_channel_get_buffered (GIOChannel *channel);
GIOStatus g_io_channel_set_encoding (GIOChannel *channel,
                                                         const gchar *encoding,
                                                         GError **error);
const gchar* g_io_channel_get_encoding (GIOChannel *channel);
void g_io_channel_set_close_on_unref (GIOChannel *channel,
                                                         gboolean do_close);
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);


GIOStatus g_io_channel_flush (GIOChannel *channel,
                                           GError **error);
GIOStatus g_io_channel_read_line (GIOChannel *channel,
                                           gchar **str_return,
                                           gsize *length,
                                           gsize *terminator_pos,
                                           GError **error);
GIOStatus g_io_channel_read_line_string (GIOChannel *channel,
                                           GString *buffer,
                                           gsize *terminator_pos,
                                           GError **error);
GIOStatus g_io_channel_read_to_end (GIOChannel *channel,
                                           gchar **str_return,
                                           gsize *length,
                                           GError **error);
GIOStatus g_io_channel_read_chars (GIOChannel *channel,
                                           gchar *buf,
                                           gsize count,
                                           gsize *bytes_read,
                                           GError **error);
GIOStatus g_io_channel_read_unichar (GIOChannel *channel,
                                           gunichar *thechar,
                                           GError **error);
GIOStatus g_io_channel_write_chars (GIOChannel *channel,
                                           const gchar *buf,
                                           gssize count,
                                           gsize *bytes_written,
                                           GError **error);
GIOStatus g_io_channel_write_unichar (GIOChannel *channel,
                                           gunichar thechar,
                                           GError **error);
GIOStatus g_io_channel_seek_position (GIOChannel *channel,
                                           gint64 offset,
                                           GSeekType type,
                                           GError **error);
GIOChannel* g_io_channel_new_file (const gchar *filename,
                                           const gchar *mode,
                                           GError **error);



GQuark g_io_channel_error_quark (void);
GIOChannelError g_io_channel_error_from_errno (gint en);
# 290 "/usr/include/glib-2.0/glib/giochannel.h"
GIOChannel* g_io_channel_unix_new (int fd);
gint g_io_channel_unix_get_fd (GIOChannel *channel);



extern GSourceFuncs g_io_watch_funcs;
# 348 "/usr/include/glib-2.0/glib/giochannel.h"

# 45 "/usr/include/glib-2.0/glib.h" 2



# 1 "/usr/include/glib-2.0/glib/gmarkup.h" 1
# 26 "/usr/include/glib-2.0/glib/gmarkup.h"


typedef enum
{
  G_MARKUP_ERROR_BAD_UTF8,
  G_MARKUP_ERROR_EMPTY,
  G_MARKUP_ERROR_PARSE,



  G_MARKUP_ERROR_UNKNOWN_ELEMENT,
  G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE,
  G_MARKUP_ERROR_INVALID_CONTENT
} GMarkupError;



GQuark g_markup_error_quark (void);

typedef enum
{

  G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = 1 << 0

} GMarkupParseFlags;

typedef struct _GMarkupParseContext GMarkupParseContext;
typedef struct _GMarkupParser GMarkupParser;

struct _GMarkupParser
{

  void (*start_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          const gchar **attribute_names,
                          const gchar **attribute_values,
                          gpointer user_data,
                          GError **error);


  void (*end_element) (GMarkupParseContext *context,
                          const gchar *element_name,
                          gpointer user_data,
                          GError **error);



  void (*text) (GMarkupParseContext *context,
                          const gchar *text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);






  void (*passthrough) (GMarkupParseContext *context,
                          const gchar *passthrough_text,
                          gsize text_len,
                          gpointer user_data,
                          GError **error);




  void (*error) (GMarkupParseContext *context,
                          GError *error,
                          gpointer user_data);
};

GMarkupParseContext *g_markup_parse_context_new (const GMarkupParser *parser,
                                                   GMarkupParseFlags flags,
                                                   gpointer user_data,
                                                   GDestroyNotify user_data_dnotify);
void g_markup_parse_context_free (GMarkupParseContext *context);
gboolean g_markup_parse_context_parse (GMarkupParseContext *context,
                                                   const gchar *text,
                                                   gssize text_len,
                                                   GError **error);

gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context,
                                                       GError **error);
const gchar *g_markup_parse_context_get_element (GMarkupParseContext *context);


void g_markup_parse_context_get_position (GMarkupParseContext *context,
                                                          gint *line_number,
                                                          gint *char_number);


gchar* g_markup_escape_text (const gchar *text,
                             gssize length);


# 49 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gmessages.h" 1
# 30 "/usr/include/glib-2.0/glib/gmessages.h"
# 1 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stdarg.h" 1
# 43 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stdarg.h"
typedef __builtin_va_list __gnuc_va_list;
# 105 "/usr/lib/gcc-lib/i486-linux/3.3.2/include/stdarg.h"
typedef __gnuc_va_list va_list;
# 31 "/usr/include/glib-2.0/glib/gmessages.h" 2
# 40 "/usr/include/glib-2.0/glib/gmessages.h"




gsize g_printf_string_upper_bound (const gchar* format,
                                     va_list args);
# 54 "/usr/include/glib-2.0/glib/gmessages.h"
typedef enum
{

  G_LOG_FLAG_RECURSION = 1 << 0,
  G_LOG_FLAG_FATAL = 1 << 1,


  G_LOG_LEVEL_ERROR = 1 << 2,
  G_LOG_LEVEL_CRITICAL = 1 << 3,
  G_LOG_LEVEL_WARNING = 1 << 4,
  G_LOG_LEVEL_MESSAGE = 1 << 5,
  G_LOG_LEVEL_INFO = 1 << 6,
  G_LOG_LEVEL_DEBUG = 1 << 7,

  G_LOG_LEVEL_MASK = ~(G_LOG_FLAG_RECURSION | G_LOG_FLAG_FATAL)
} GLogLevelFlags;




typedef void (*GLogFunc) (const gchar *log_domain,
                                                 GLogLevelFlags log_level,
                                                 const gchar *message,
                                                 gpointer user_data);



guint g_log_set_handler (const gchar *log_domain,
                                         GLogLevelFlags log_levels,
                                         GLogFunc log_func,
                                         gpointer user_data);
void g_log_remove_handler (const gchar *log_domain,
                                         guint handler_id);
void g_log_default_handler (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *message,
                                         gpointer unused_data);
void g_log (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         ...) ;
void g_logv (const gchar *log_domain,
                                         GLogLevelFlags log_level,
                                         const gchar *format,
                                         va_list args);
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain,
                                         GLogLevelFlags fatal_mask);
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);


void _g_log_fallback_handler (const gchar *log_domain,
                                 GLogLevelFlags log_level,
                                 const gchar *message,
                                 gpointer unused_data);
# 178 "/usr/include/glib-2.0/glib/gmessages.h"
typedef void (*GPrintFunc) (const gchar *string);
void g_print (const gchar *format,
                                         ...) ;
GPrintFunc g_set_print_handler (GPrintFunc func);
void g_printerr (const gchar *format,
                                         ...) ;
GPrintFunc g_set_printerr_handler (GPrintFunc func);
# 345 "/usr/include/glib-2.0/glib/gmessages.h"

# 51 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gnode.h" 1
# 32 "/usr/include/glib-2.0/glib/gnode.h"


typedef struct _GNode GNode;


typedef enum
{
  G_TRAVERSE_LEAFS = 1 << 0,
  G_TRAVERSE_NON_LEAFS = 1 << 1,
  G_TRAVERSE_ALL = G_TRAVERSE_LEAFS | G_TRAVERSE_NON_LEAFS,
  G_TRAVERSE_MASK = 0x03
} GTraverseFlags;


typedef enum
{
  G_IN_ORDER,
  G_PRE_ORDER,
  G_POST_ORDER,
  G_LEVEL_ORDER
} GTraverseType;

typedef gboolean (*GNodeTraverseFunc) (GNode *node,
                                                 gpointer data);
typedef void (*GNodeForeachFunc) (GNode *node,
                                                 gpointer data);



struct _GNode
{
  gpointer data;
  GNode *next;
  GNode *prev;
  GNode *parent;
  GNode *children;
};






void g_node_push_allocator (GAllocator *allocator);
void g_node_pop_allocator (void);
GNode* g_node_new (gpointer data);
void g_node_destroy (GNode *root);
void g_node_unlink (GNode *node);
GNode* g_node_copy (GNode *node);
GNode* g_node_insert (GNode *parent,
                                 gint position,
                                 GNode *node);
GNode* g_node_insert_before (GNode *parent,
                                 GNode *sibling,
                                 GNode *node);
GNode* g_node_insert_after (GNode *parent,
                                 GNode *sibling,
                                 GNode *node);
GNode* g_node_prepend (GNode *parent,
                                 GNode *node);
guint g_node_n_nodes (GNode *root,
                                 GTraverseFlags flags);
GNode* g_node_get_root (GNode *node);
gboolean g_node_is_ancestor (GNode *node,
                                 GNode *descendant);
guint g_node_depth (GNode *node);
GNode* g_node_find (GNode *root,
                                 GTraverseType order,
                                 GTraverseFlags flags,
                                 gpointer data);
# 120 "/usr/include/glib-2.0/glib/gnode.h"
void g_node_traverse (GNode *root,
                                 GTraverseType order,
                                 GTraverseFlags flags,
                                 gint max_depth,
                                 GNodeTraverseFunc func,
                                 gpointer data);






guint g_node_max_height (GNode *root);

void g_node_children_foreach (GNode *node,
                                  GTraverseFlags flags,
                                  GNodeForeachFunc func,
                                  gpointer data);
void g_node_reverse_children (GNode *node);
guint g_node_n_children (GNode *node);
GNode* g_node_nth_child (GNode *node,
                                  guint n);
GNode* g_node_last_child (GNode *node);
GNode* g_node_find_child (GNode *node,
                                  GTraverseFlags flags,
                                  gpointer data);
gint g_node_child_position (GNode *node,
                                  GNode *child);
gint g_node_child_index (GNode *node,
                                  gpointer data);

GNode* g_node_first_sibling (GNode *node);
GNode* g_node_last_sibling (GNode *node);
# 161 "/usr/include/glib-2.0/glib/gnode.h"

# 52 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gpattern.h" 1
# 24 "/usr/include/glib-2.0/glib/gpattern.h"



typedef struct _GPatternSpec GPatternSpec;

GPatternSpec* g_pattern_spec_new (const gchar *pattern);
void g_pattern_spec_free (GPatternSpec *pspec);
gboolean g_pattern_spec_equal (GPatternSpec *pspec1,
                                        GPatternSpec *pspec2);
gboolean g_pattern_match (GPatternSpec *pspec,
                                        guint string_length,
                                        const gchar *string,
                                        const gchar *string_reversed);
gboolean g_pattern_match_string (GPatternSpec *pspec,
                                        const gchar *string);
gboolean g_pattern_match_simple (const gchar *pattern,
                                        const gchar *string);


# 53 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gprimes.h" 1
# 32 "/usr/include/glib-2.0/glib/gprimes.h"

# 43 "/usr/include/glib-2.0/glib/gprimes.h"
guint g_spaced_primes_closest (guint num) ;


# 54 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gqsort.h" 1
# 33 "/usr/include/glib-2.0/glib/gqsort.h"


void g_qsort_with_data (gconstpointer pbase,
                        gint total_elems,
                        size_t size,
                        GCompareDataFunc compare_func,
                        gpointer user_data);


# 55 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gqueue.h" 1
# 32 "/usr/include/glib-2.0/glib/gqueue.h"


typedef struct _GQueue GQueue;

struct _GQueue
{
  GList *head;
  GList *tail;
  guint length;
};



GQueue* g_queue_new (void);
void g_queue_free (GQueue *queue);
void g_queue_push_head (GQueue *queue,
                                 gpointer data);
void g_queue_push_tail (GQueue *queue,
                                 gpointer data);
gpointer g_queue_pop_head (GQueue *queue);
gpointer g_queue_pop_tail (GQueue *queue);
gboolean g_queue_is_empty (GQueue *queue);
gpointer g_queue_peek_head (GQueue *queue);
gpointer g_queue_peek_tail (GQueue *queue);
void g_queue_push_head_link (GQueue *queue,
                                 GList *link_);
void g_queue_push_tail_link (GQueue *queue,
                                 GList *link_);
GList* g_queue_pop_head_link (GQueue *queue);
GList* g_queue_pop_tail_link (GQueue *queue);


# 57 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grand.h" 1
# 32 "/usr/include/glib-2.0/glib/grand.h"


typedef struct _GRand GRand;
# 45 "/usr/include/glib-2.0/glib/grand.h"
GRand* g_rand_new_with_seed (guint32 seed);
GRand* g_rand_new (void);
void g_rand_free (GRand *rand_);
void g_rand_set_seed (GRand *rand_,
                               guint32 seed);



guint32 g_rand_int (GRand *rand_);
gint32 g_rand_int_range (GRand *rand_,
                               gint32 begin,
                               gint32 end);
gdouble g_rand_double (GRand *rand_);
gdouble g_rand_double_range (GRand *rand_,
                               gdouble begin,
                               gdouble end);
void g_random_set_seed (guint32 seed);



guint32 g_random_int (void);
gint32 g_random_int_range (gint32 begin,
                               gint32 end);
gdouble g_random_double (void);
gdouble g_random_double_range (gdouble begin,
                               gdouble end);



# 58 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/grel.h" 1
# 32 "/usr/include/glib-2.0/glib/grel.h"


typedef struct _GRelation GRelation;
typedef struct _GTuples GTuples;

struct _GTuples
{
  guint len;
};
# 65 "/usr/include/glib-2.0/glib/grel.h"
GRelation* g_relation_new (gint fields);
void g_relation_destroy (GRelation *relation);
void g_relation_index (GRelation *relation,
                               gint field,
                               GHashFunc hash_func,
                               GEqualFunc key_equal_func);
void g_relation_insert (GRelation *relation,
                               ...);
gint g_relation_delete (GRelation *relation,
                               gconstpointer key,
                               gint field);
GTuples* g_relation_select (GRelation *relation,
                               gconstpointer key,
                               gint field);
gint g_relation_count (GRelation *relation,
                               gconstpointer key,
                               gint field);
gboolean g_relation_exists (GRelation *relation,
                               ...);
void g_relation_print (GRelation *relation);

void g_tuples_destroy (GTuples *tuples);
gpointer g_tuples_index (GTuples *tuples,
                               gint index_,
                               gint field);


# 59 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gscanner.h" 1
# 32 "/usr/include/glib-2.0/glib/gscanner.h"


typedef struct _GScanner GScanner;
typedef struct _GScannerConfig GScannerConfig;
typedef union _GTokenValue GTokenValue;

typedef void (*GScannerMsgFunc) (GScanner *scanner,
                                                 gchar *message,
                                                 gboolean error);
# 59 "/usr/include/glib-2.0/glib/gscanner.h"
typedef enum
{
  G_ERR_UNKNOWN,
  G_ERR_UNEXP_EOF,
  G_ERR_UNEXP_EOF_IN_STRING,
  G_ERR_UNEXP_EOF_IN_COMMENT,
  G_ERR_NON_DIGIT_IN_CONST,
  G_ERR_DIGIT_RADIX,
  G_ERR_FLOAT_RADIX,
  G_ERR_FLOAT_MALFORMED
} GErrorType;


typedef enum
{
  G_TOKEN_EOF = 0,

  G_TOKEN_LEFT_PAREN = '(',
  G_TOKEN_RIGHT_PAREN = ')',
  G_TOKEN_LEFT_CURLY = '{',
  G_TOKEN_RIGHT_CURLY = '}',
  G_TOKEN_LEFT_BRACE = '[',
  G_TOKEN_RIGHT_BRACE = ']',
  G_TOKEN_EQUAL_SIGN = '=',
  G_TOKEN_COMMA = ',',

  G_TOKEN_NONE = 256,

  G_TOKEN_ERROR,

  G_TOKEN_CHAR,
  G_TOKEN_BINARY,
  G_TOKEN_OCTAL,
  G_TOKEN_INT,
  G_TOKEN_HEX,
  G_TOKEN_FLOAT,
  G_TOKEN_STRING,

  G_TOKEN_SYMBOL,
  G_TOKEN_IDENTIFIER,
  G_TOKEN_IDENTIFIER_NULL,

  G_TOKEN_COMMENT_SINGLE,
  G_TOKEN_COMMENT_MULTI,
  G_TOKEN_LAST
} GTokenType;

union _GTokenValue
{
  gpointer v_symbol;
  gchar *v_identifier;
  gulong v_binary;
  gulong v_octal;
  gulong v_int;
  guint64 v_int64;
  gdouble v_float;
  gulong v_hex;
  gchar *v_string;
  gchar *v_comment;
  guchar v_char;
  guint v_error;
};

struct _GScannerConfig
{


  gchar *cset_skip_characters;
  gchar *cset_identifier_first;
  gchar *cset_identifier_nth;
  gchar *cpair_comment_single;



  guint case_sensitive : 1;




  guint skip_comment_multi : 1;
  guint skip_comment_single : 1;
  guint scan_comment_multi : 1;
  guint scan_identifier : 1;
  guint scan_identifier_1char : 1;
  guint scan_identifier_NULL : 1;
  guint scan_symbols : 1;
  guint scan_binary : 1;
  guint scan_octal : 1;
  guint scan_float : 1;
  guint scan_hex : 1;
  guint scan_hex_dollar : 1;
  guint scan_string_sq : 1;
  guint scan_string_dq : 1;
  guint numbers_2_int : 1;
  guint int_2_float : 1;
  guint identifier_2_string : 1;
  guint char_2_token : 1;
  guint symbol_2_token : 1;
  guint scope_0_fallback : 1;
  guint store_int64 : 1;
  guint padding_dummy;
};

struct _GScanner
{

  gpointer user_data;
  guint max_parse_errors;


  guint parse_errors;


  const gchar *input_name;


  GData *qdata;


  GScannerConfig *config;


  GTokenType token;
  GTokenValue value;
  guint line;
  guint position;


  GTokenType next_token;
  GTokenValue next_value;
  guint next_line;
  guint next_position;


  GHashTable *symbol_table;
  gint input_fd;
  const gchar *text;
  const gchar *text_end;
  gchar *buffer;
  guint scope_id;


  GScannerMsgFunc msg_handler;
};

GScanner* g_scanner_new (const GScannerConfig *config_templ);
void g_scanner_destroy (GScanner *scanner);
void g_scanner_input_file (GScanner *scanner,
                                                 gint input_fd);
void g_scanner_sync_file_offset (GScanner *scanner);
void g_scanner_input_text (GScanner *scanner,
                                                 const gchar *text,
                                                 guint text_len);
GTokenType g_scanner_get_next_token (GScanner *scanner);
GTokenType g_scanner_peek_next_token (GScanner *scanner);
GTokenType g_scanner_cur_token (GScanner *scanner);
GTokenValue g_scanner_cur_value (GScanner *scanner);
guint g_scanner_cur_line (GScanner *scanner);
guint g_scanner_cur_position (GScanner *scanner);
gboolean g_scanner_eof (GScanner *scanner);
guint g_scanner_set_scope (GScanner *scanner,
                                                 guint scope_id);
void g_scanner_scope_add_symbol (GScanner *scanner,
                                                 guint scope_id,
                                                 const gchar *symbol,
                                                 gpointer value);
void g_scanner_scope_remove_symbol (GScanner *scanner,
                                                 guint scope_id,
                                                 const gchar *symbol);
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner,
                                                 guint scope_id,
                                                 const gchar *symbol);
void g_scanner_scope_foreach_symbol (GScanner *scanner,
                                                 guint scope_id,
                                                 GHFunc func,
                                                 gpointer user_data);
gpointer g_scanner_lookup_symbol (GScanner *scanner,
                                                 const gchar *symbol);
void g_scanner_unexp_token (GScanner *scanner,
                                                 GTokenType expected_token,
                                                 const gchar *identifier_spec,
                                                 const gchar *symbol_spec,
                                                 const gchar *symbol_name,
                                                 const gchar *message,
                                                 gint is_error);
void g_scanner_error (GScanner *scanner,
                                                 const gchar *format,
                                                 ...) ;
void g_scanner_warn (GScanner *scanner,
                                                 const gchar *format,
                                                 ...) ;
# 271 "/usr/include/glib-2.0/glib/gscanner.h"

# 60 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gshell.h" 1
# 26 "/usr/include/glib-2.0/glib/gshell.h"




typedef enum
{

  G_SHELL_ERROR_BAD_QUOTING,

  G_SHELL_ERROR_EMPTY_STRING,
  G_SHELL_ERROR_FAILED
} GShellError;

GQuark g_shell_error_quark (void);

gchar* g_shell_quote (const gchar *unquoted_string);
gchar* g_shell_unquote (const gchar *quoted_string,
                             GError **error);
gboolean g_shell_parse_argv (const gchar *command_line,
                             gint *argcp,
                             gchar ***argvp,
                             GError **error);


# 61 "/usr/include/glib-2.0/glib.h" 2

# 1 "/usr/include/glib-2.0/glib/gspawn.h" 1
# 26 "/usr/include/glib-2.0/glib/gspawn.h"





typedef enum
{
  G_SPAWN_ERROR_FORK,
  G_SPAWN_ERROR_READ,
  G_SPAWN_ERROR_CHDIR,
  G_SPAWN_ERROR_ACCES,
  G_SPAWN_ERROR_PERM,
  G_SPAWN_ERROR_2BIG,
  G_SPAWN_ERROR_NOEXEC,
  G_SPAWN_ERROR_NAMETOOLONG,
  G_SPAWN_ERROR_NOENT,
  G_SPAWN_ERROR_NOMEM,
  G_SPAWN_ERROR_NOTDIR,
  G_SPAWN_ERROR_LOOP,
  G_SPAWN_ERROR_TXTBUSY,
  G_SPAWN_ERROR_IO,
  G_SPAWN_ERROR_NFILE,
  G_SPAWN_ERROR_MFILE,
  G_SPAWN_ERROR_INVAL,
  G_SPAWN_ERROR_ISDIR,
  G_SPAWN_ERROR_LIBBAD,
  G_SPAWN_ERROR_FAILED


} GSpawnError;

typedef void (* GSpawnChildSetupFunc) (gpointer user_data);

typedef enum
{
  G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1 << 0,
  G_SPAWN_DO_NOT_REAP_CHILD = 1 << 1,

  G_SPAWN_SEARCH_PATH = 1 << 2,

  G_SPAWN_STDOUT_TO_DEV_NULL = 1 << 3,
  G_SPAWN_STDERR_TO_DEV_NULL = 1 << 4,
  G_SPAWN_CHILD_INHERITS_STDIN = 1 << 5,
  G_SPAWN_FILE_AND_ARGV_ZERO = 1 << 6
} GSpawnFlags;

GQuark g_spawn_error_quark (void);

gboolean g_spawn_async (const gchar *working_directory,
                        gchar **argv,
                        gchar **envp,
                        GSpawnFlags flags,
                        GSpawnChildSetupFunc child_setup,
                        gpointer user_data,
                        gint *child_pid,
                        GError **error);





gboolean g_spawn_async_with_pipes (const gchar *working_directory,
                                   gchar **argv,
                                   gchar **envp,
                                   GSpawnFlags flags,
                                   GSpawnChildSetupFunc child_setup,
                                   gpointer user_data,
                                   gint *child_pid,
                                   gint *standard_input,
                                   gint *standard_output,
                                   gint *standard_error,
                                   GError **error);






gboolean g_spawn_sync (const gchar *working_directory,
                               gchar **argv,
                               gchar **envp,
                               GSpawnFlags flags,
                               GSpawnChildSetupFunc child_setup,
                               gpointer user_data,
                               gchar **standard_output,
                               gchar **standard_error,
                               gint *exit_status,
                               GError **error);

gboolean g_spawn_command_line_sync (const gchar *command_line,
                                     gchar **standard_output,
                                     gchar **standard_error,
                                     gint *exit_status,
                                     GError **error);
gboolean g_spawn_command_line_async (const gchar *command_line,
                                     GError **error);



# 63 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gstrfuncs.h" 1
# 33 "/usr/include/glib-2.0/glib/gstrfuncs.h"



typedef enum {
  G_ASCII_ALNUM = 1 << 0,
  G_ASCII_ALPHA = 1 << 1,
  G_ASCII_CNTRL = 1 << 2,
  G_ASCII_DIGIT = 1 << 3,
  G_ASCII_GRAPH = 1 << 4,
  G_ASCII_LOWER = 1 << 5,
  G_ASCII_PRINT = 1 << 6,
  G_ASCII_PUNCT = 1 << 7,
  G_ASCII_SPACE = 1 << 8,
  G_ASCII_UPPER = 1 << 9,
  G_ASCII_XDIGIT = 1 << 10
} GAsciiType;

extern const guint16 * const g_ascii_table;
# 85 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar g_ascii_tolower (gchar c) ;
gchar g_ascii_toupper (gchar c) ;

gint g_ascii_digit_value (gchar c) ;
gint g_ascii_xdigit_value (gchar c) ;





gchar* g_strdelimit (gchar *string,
                                        const gchar *delimiters,
                                        gchar new_delimiter);
gchar* g_strcanon (gchar *string,
                                        const gchar *valid_chars,
                                        gchar substitutor);
const gchar* g_strerror (gint errnum) ;
const gchar* g_strsignal (gint signum) ;
gchar* g_strreverse (gchar *string);
gsize g_strlcpy (gchar *dest,
                                        const gchar *src,
                                        gsize dest_size);
gsize g_strlcat (gchar *dest,
                                        const gchar *src,
                                        gsize dest_size);
gchar * g_strstr_len (const gchar *haystack,
                                        gssize haystack_len,
                                        const gchar *needle);
gchar * g_strrstr (const gchar *haystack,
                                        const gchar *needle);
gchar * g_strrstr_len (const gchar *haystack,
                                        gssize haystack_len,
                                        const gchar *needle);

gboolean g_str_has_suffix (const gchar *str,
                                        const gchar *suffix);
gboolean g_str_has_prefix (const gchar *str,
                                        const gchar *prefix);



gdouble g_strtod (const gchar *nptr,
                                        gchar **endptr);
gdouble g_ascii_strtod (const gchar *nptr,
                                        gchar **endptr);
guint64 g_ascii_strtoull (const gchar *nptr,
                                        gchar **endptr,
                                        guint base);




gchar * g_ascii_dtostr (gchar *buffer,
                                        gint buf_len,
                                        gdouble d);
gchar * g_ascii_formatd (gchar *buffer,
                                        gint buf_len,
                                        const gchar *format,
                                        gdouble d);


gchar* g_strchug (gchar *string);

gchar* g_strchomp (gchar *string);



gint g_ascii_strcasecmp (const gchar *s1,
                                           const gchar *s2);
gint g_ascii_strncasecmp (const gchar *s1,
                                           const gchar *s2,
                                           gsize n);
gchar* g_ascii_strdown (const gchar *str,
                                           gssize len);
gchar* g_ascii_strup (const gchar *str,
                                           gssize len);
# 169 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gint g_strcasecmp (const gchar *s1,
                                        const gchar *s2);
gint g_strncasecmp (const gchar *s1,
                                        const gchar *s2,
                                        guint n);
gchar* g_strdown (gchar *string);
gchar* g_strup (gchar *string);






gchar* g_strdup (const gchar *str);
gchar* g_strdup_printf (const gchar *format,
                                        ...) ;
gchar* g_strdup_vprintf (const gchar *format,
                                        va_list args);
gchar* g_strndup (const gchar *str,
                                        gsize n);
gchar* g_strnfill (gsize length,
                                        gchar fill_char);
gchar* g_strconcat (const gchar *string1,
                                        ...);
gchar* g_strjoin (const gchar *separator,
                                        ...);




gchar* g_strcompress (const gchar *source);
# 209 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar* g_strescape (const gchar *source,
                                        const gchar *exceptions);

gpointer g_memdup (gconstpointer mem,
                                        guint byte_size);
# 223 "/usr/include/glib-2.0/glib/gstrfuncs.h"
gchar** g_strsplit (const gchar *string,
                                        const gchar *delimiter,
                                        gint max_tokens);
gchar* g_strjoinv (const gchar *separator,
                                        gchar **str_array);
void g_strfreev (gchar **str_array);
gchar** g_strdupv (gchar **str_array);

gchar* g_stpcpy (gchar *dest,
                                        const char *src);


# 64 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/gthreadpool.h" 1
# 32 "/usr/include/glib-2.0/glib/gthreadpool.h"


typedef struct _GThreadPool GThreadPool;






struct _GThreadPool
{
  GFunc func;
  gpointer user_data;
  gboolean exclusive;
};






GThreadPool* g_thread_pool_new (GFunc func,
                                               gpointer user_data,
                                               gint max_threads,
                                               gboolean exclusive,
                                               GError **error);





void g_thread_pool_push (GThreadPool *pool,
                                               gpointer data,
                                               GError **error);




void g_thread_pool_set_max_threads (GThreadPool *pool,
                                               gint max_threads,
                                               GError **error);
gint g_thread_pool_get_max_threads (GThreadPool *pool);



guint g_thread_pool_get_num_threads (GThreadPool *pool);


guint g_thread_pool_unprocessed (GThreadPool *pool);





void g_thread_pool_free (GThreadPool *pool,
                                               gboolean immediate,
                                               gboolean wait);



void g_thread_pool_set_max_unused_threads (gint max_threads);
gint g_thread_pool_get_max_unused_threads (void);
guint g_thread_pool_get_num_unused_threads (void);


void g_thread_pool_stop_unused_threads (void);


# 67 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtimer.h" 1
# 32 "/usr/include/glib-2.0/glib/gtimer.h"






typedef struct _GTimer GTimer;



GTimer* g_timer_new (void);
void g_timer_destroy (GTimer *timer);
void g_timer_start (GTimer *timer);
void g_timer_stop (GTimer *timer);
void g_timer_reset (GTimer *timer);
gdouble g_timer_elapsed (GTimer *timer,
                         gulong *microseconds);

void g_usleep (gulong microseconds);

void g_time_val_add (GTimeVal *time_,
                         glong microseconds);


# 68 "/usr/include/glib-2.0/glib.h" 2
# 1 "/usr/include/glib-2.0/glib/gtree.h" 1
# 32 "/usr/include/glib-2.0/glib/gtree.h"


typedef struct _GTree GTree;

typedef gboolean (*GTraverseFunc) (gpointer key,
                                   gpointer value,
                                   gpointer data);



GTree* g_tree_new (GCompareFunc key_compare_func);
GTree* g_tree_new_with_data (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data);
GTree* g_tree_new_full (GCompareDataFunc key_compare_func,
                                 gpointer key_compare_data,
                                 GDestroyNotify key_destroy_func,
                                 GDestroyNotify value_destroy_func);
void g_tree_destroy (GTree *tree);
void g_tree_insert (GTree *tree,
                                 gpointer key,
                                 gpointer value);
void g_tree_replace (GTree *tree,
                                 gpointer key,
                                 gpointer value);
void g_tree_remove (GTree *tree,
                                 gconstpointer key);
void g_tree_steal (GTree *tree,
                                 gconstpointer key);
gpointer g_tree_lookup (GTree *tree,
                                 gconstpointer key);
gboolean g_tree_lookup_extended (GTree *tree,
                                 gconstpointer lookup_key,
                                 gpointer *orig_key,
                                 gpointer *value);
void g_tree_foreach (GTree *tree,
                                 GTraverseFunc func,
                                 gpointer user_data);


void g_tree_traverse (GTree *tree,
                                 GTraverseFunc traverse_func,
                                 GTraverseType traverse_type,
                                 gpointer user_data);


gpointer g_tree_search (GTree *tree,
                                 GCompareFunc search_func,
                                 gconstpointer user_data);
gint g_tree_height (GTree *tree);
gint g_tree_nnodes (GTree *tree);




# 69 "/usr/include/glib-2.0/glib.h" 2


# 1 "/usr/include/glib-2.0/glib/gutils.h" 1
# 33 "/usr/include/glib-2.0/glib/gutils.h"

# 116 "/usr/include/glib-2.0/glib/gutils.h"
const gchar* g_get_user_name (void);
const gchar* g_get_real_name (void);
const gchar* g_get_home_dir (void);
const gchar* g_get_tmp_dir (void);
gchar* g_get_prgname (void);
void g_set_prgname (const gchar *prgname);
const gchar* g_get_application_name (void);
void g_set_application_name (const gchar *application_name);


typedef struct _GDebugKey GDebugKey;
struct _GDebugKey
{
  gchar *key;
  guint value;
};



guint g_parse_debug_string (const gchar *string,
                                            const GDebugKey *keys,
                                            guint nkeys);

gint g_snprintf (gchar *string,
                                            gulong n,
                                            gchar const *format,
                                            ...) ;
gint g_vsnprintf (gchar *string,
                                            gulong n,
                                            gchar const *format,
                                            va_list args);


gboolean g_path_is_absolute (const gchar *file_name);


const gchar* g_path_skip_root (const gchar *file_name);







const gchar* g_basename (const gchar *file_name);





gchar* g_get_current_dir (void);
gchar* g_path_get_basename (const gchar *file_name);
gchar* g_path_get_dirname (const gchar *file_name);



void g_nullify_pointer (gpointer *nullify_location);






const gchar* g_getenv (const gchar *variable);






typedef void (*GVoidFunc) (void);
# 197 "/usr/include/glib-2.0/glib/gutils.h"
void g_atexit (GVoidFunc func);


gchar* g_find_program_in_path (const gchar *program);



static inline gint g_bit_nth_lsf (gulong mask,
                                       gint nth_bit);
static inline gint g_bit_nth_msf (gulong mask,
                                       gint nth_bit);
static inline guint g_bit_storage (gulong number);




typedef struct _GTrashStack GTrashStack;
struct _GTrashStack
{
  GTrashStack *next;
};

static inline void g_trash_stack_push (GTrashStack **stack_p,
                                                 gpointer data_p);
static inline gpointer g_trash_stack_pop (GTrashStack **stack_p);
static inline gpointer g_trash_stack_peek (GTrashStack **stack_p);
static inline guint g_trash_stack_height (GTrashStack **stack_p);




static inline gint
g_bit_nth_lsf (gulong mask,
               gint nth_bit)
{
  do
    {
      nth_bit++;
      if (mask & (1 << (gulong) nth_bit))
        return nth_bit;
    }
  while (nth_bit < 31);
  return -1;
}
static inline gint
g_bit_nth_msf (gulong mask,
               gint nth_bit)
{
  if (nth_bit < 0)
    nth_bit = 4 * 8;
  do
    {
      nth_bit--;
      if (mask & (1 << (gulong) nth_bit))
        return nth_bit;
    }
  while (nth_bit > 0);
  return -1;
}
static inline guint
g_bit_storage (gulong number)
{
  register guint n_bits = 0;

  do
    {
      n_bits++;
      number >>= 1;
    }
  while (number);
  return n_bits;
}
static inline void
g_trash_stack_push (GTrashStack **stack_p,
                    gpointer data_p)
{
  GTrashStack *data = (GTrashStack *) data_p;

  data->next = *stack_p;
  *stack_p = data;
}
static inline gpointer
g_trash_stack_pop (GTrashStack **stack_p)
{
  GTrashStack *data;

  data = *stack_p;
  if (data)
    {
      *stack_p = data->next;



      data->next = ((void *)0);
    }

  return data;
}
static inline gpointer
g_trash_stack_peek (GTrashStack **stack_p)
{
  GTrashStack *data;

  data = *stack_p;

  return data;
}
static inline guint
g_trash_stack_height (GTrashStack **stack_p)
{
  GTrashStack *data;
  guint i = 0;

  for (data = *stack_p; data; data = data->next)
    i++;

  return i;
}






extern const guint glib_major_version;
extern const guint glib_minor_version;
extern const guint glib_micro_version;
extern const guint glib_interface_age;
extern const guint glib_binary_age;








# 72 "/usr/include/glib-2.0/glib.h" 2
# 33 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2
# 1 "/usr/include/pango-1.0/pango/pango.h" 1
# 25 "/usr/include/pango-1.0/pango/pango.h"
# 1 "/usr/include/pango-1.0/pango/pango-attributes.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-attributes.h"
# 1 "/usr/include/pango-1.0/pango/pango-font.h" 1
# 25 "/usr/include/pango-1.0/pango/pango-font.h"
# 1 "/usr/include/pango-1.0/pango/pango-coverage.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-coverage.h"


typedef struct _PangoCoverage PangoCoverage;

typedef enum {
  PANGO_COVERAGE_NONE,
  PANGO_COVERAGE_FALLBACK,
  PANGO_COVERAGE_APPROXIMATE,
  PANGO_COVERAGE_EXACT
} PangoCoverageLevel;

PangoCoverage * pango_coverage_new (void);
PangoCoverage * pango_coverage_ref (PangoCoverage *coverage);
void pango_coverage_unref (PangoCoverage *coverage);
PangoCoverage * pango_coverage_copy (PangoCoverage *coverage);
PangoCoverageLevel pango_coverage_get (PangoCoverage *coverage,
                                           int index_);
void pango_coverage_set (PangoCoverage *coverage,
                                           int index_,
                                           PangoCoverageLevel level);
void pango_coverage_max (PangoCoverage *coverage,
                                           PangoCoverage *other);

void pango_coverage_to_bytes (PangoCoverage *coverage,
                                          guchar **bytes,
                                          int *n_bytes);
PangoCoverage *pango_coverage_from_bytes (guchar *bytes,
                                          int n_bytes);


# 26 "/usr/include/pango-1.0/pango/pango-font.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-types.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-types.h"
# 1 "/usr/include/glib-2.0/glib-object.h" 1
# 25 "/usr/include/glib-2.0/glib-object.h"
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 26 "/usr/include/glib-2.0/gobject/gboxed.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 28 "/usr/include/glib-2.0/gobject/gtype.h"

# 92 "/usr/include/glib-2.0/gobject/gtype.h"
typedef gulong GType;



typedef struct _GValue GValue;
typedef union _GTypeCValue GTypeCValue;
typedef struct _GTypePlugin GTypePlugin;
typedef struct _GTypeClass GTypeClass;
typedef struct _GTypeInterface GTypeInterface;
typedef struct _GTypeInstance GTypeInstance;
typedef struct _GTypeInfo GTypeInfo;
typedef struct _GTypeFundamentalInfo GTypeFundamentalInfo;
typedef struct _GInterfaceInfo GInterfaceInfo;
typedef struct _GTypeValueTable GTypeValueTable;
typedef struct _GTypeQuery GTypeQuery;




struct _GTypeClass
{

  GType g_type;
};
struct _GTypeInstance
{

  GTypeClass *g_class;
};
struct _GTypeInterface
{

  GType g_type;
  GType g_instance_type;
};
struct _GTypeQuery
{
  GType type;
  const gchar *type_name;
  guint class_size;
  guint instance_size;
};
# 155 "/usr/include/glib-2.0/gobject/gtype.h"
typedef enum
{
  G_TYPE_DEBUG_NONE = 0,
  G_TYPE_DEBUG_OBJECTS = 1 << 0,
  G_TYPE_DEBUG_SIGNALS = 1 << 1,
  G_TYPE_DEBUG_MASK = 0x03
} GTypeDebugFlags;



void g_type_init (void);
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);
const gchar* g_type_name (GType type);
GQuark g_type_qname (GType type);
GType g_type_from_name (const gchar *name);
GType g_type_parent (GType type);
guint g_type_depth (GType type);
GType g_type_next_base (GType leaf_type,
                                                      GType root_type);
gboolean g_type_is_a (GType type,
                                                      GType is_a_type);
gpointer g_type_class_ref (GType type);
gpointer g_type_class_peek (GType type);
void g_type_class_unref (gpointer g_class);
gpointer g_type_class_peek_parent (gpointer g_class);
gpointer g_type_interface_peek (gpointer instance_class,
                                                      GType iface_type);
gpointer g_type_interface_peek_parent (gpointer g_iface);


GType* g_type_children (GType type,
                                                      guint *n_children);
GType* g_type_interfaces (GType type,
                                                      guint *n_interfaces);


void g_type_set_qdata (GType type,
                                                      GQuark quark,
                                                      gpointer data);
gpointer g_type_get_qdata (GType type,
                                                      GQuark quark);
void g_type_query (GType type,
                                                      GTypeQuery *query);



typedef void (*GBaseInitFunc) (gpointer g_class);
typedef void (*GBaseFinalizeFunc) (gpointer g_class);
typedef void (*GClassInitFunc) (gpointer g_class,
                                              gpointer class_data);
typedef void (*GClassFinalizeFunc) (gpointer g_class,
                                              gpointer class_data);
typedef void (*GInstanceInitFunc) (GTypeInstance *instance,
                                              gpointer g_class);
typedef void (*GInterfaceInitFunc) (gpointer g_iface,
                                              gpointer iface_data);
typedef void (*GInterfaceFinalizeFunc) (gpointer g_iface,
                                              gpointer iface_data);
typedef gboolean (*GTypeClassCacheFunc) (gpointer cache_data,
                                              GTypeClass *g_class);
typedef enum
{
  G_TYPE_FLAG_CLASSED = (1 << 0),
  G_TYPE_FLAG_INSTANTIATABLE = (1 << 1),
  G_TYPE_FLAG_DERIVABLE = (1 << 2),
  G_TYPE_FLAG_DEEP_DERIVABLE = (1 << 3)
} GTypeFundamentalFlags;
typedef enum
{
  G_TYPE_FLAG_ABSTRACT = (1 << 4),
  G_TYPE_FLAG_VALUE_ABSTRACT = (1 << 5)
} GTypeFlags;
struct _GTypeInfo
{

  guint16 class_size;

  GBaseInitFunc base_init;
  GBaseFinalizeFunc base_finalize;


  GClassInitFunc class_init;
  GClassFinalizeFunc class_finalize;
  gconstpointer class_data;


  guint16 instance_size;
  guint16 n_preallocs;
  GInstanceInitFunc instance_init;


  const GTypeValueTable *value_table;
};
struct _GTypeFundamentalInfo
{
  GTypeFundamentalFlags type_flags;
};
struct _GInterfaceInfo
{
  GInterfaceInitFunc interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer interface_data;
};
struct _GTypeValueTable
{
  void (*value_init) (GValue *value);
  void (*value_free) (GValue *value);
  void (*value_copy) (const GValue *src_value,
                                  GValue *dest_value);

  gpointer (*value_peek_pointer) (const GValue *value);
  gchar *collect_format;
  gchar* (*collect_value) (GValue *value,
                                  guint n_collect_values,
                                  GTypeCValue *collect_values,
                                  guint collect_flags);
  gchar *lcopy_format;
  gchar* (*lcopy_value) (const GValue *value,
                                  guint n_collect_values,
                                  GTypeCValue *collect_values,
                                  guint collect_flags);
};
GType g_type_register_static (GType parent_type,
                                         const gchar *type_name,
                                         const GTypeInfo *info,
                                         GTypeFlags flags);
GType g_type_register_dynamic (GType parent_type,
                                         const gchar *type_name,
                                         GTypePlugin *plugin,
                                         GTypeFlags flags);
GType g_type_register_fundamental (GType type_id,
                                         const gchar *type_name,
                                         const GTypeInfo *info,
                                         const GTypeFundamentalInfo *finfo,
                                         GTypeFlags flags);
void g_type_add_interface_static (GType instance_type,
                                         GType interface_type,
                                         const GInterfaceInfo *info);
void g_type_add_interface_dynamic (GType instance_type,
                                         GType interface_type,
                                         GTypePlugin *plugin);
void g_type_interface_add_prerequisite (GType interface_type,
                                         GType prerequisite_type);
GType *g_type_interface_prerequisites (GType interface_type,
                                         guint *n_prerequisites);



GTypePlugin* g_type_get_plugin (GType type);
GTypePlugin* g_type_interface_get_plugin (GType instance_type,
                                                 GType interface_type);
GType g_type_fundamental_next (void);
GType g_type_fundamental (GType type_id);
GTypeInstance* g_type_create_instance (GType type);
void g_type_free_instance (GTypeInstance *instance);
void g_type_add_class_cache_func (gpointer cache_data,
                                                 GTypeClassCacheFunc cache_func);
void g_type_remove_class_cache_func (gpointer cache_data,
                                                 GTypeClassCacheFunc cache_func);
void g_type_class_unref_uncached (gpointer g_class);
GTypeValueTable* g_type_value_table_peek (GType type);



gboolean g_type_check_instance (GTypeInstance *instance);
GTypeInstance* g_type_check_instance_cast (GTypeInstance *instance,
                                                 GType iface_type);
gboolean g_type_check_instance_is_a (GTypeInstance *instance,
                                                 GType iface_type);
GTypeClass* g_type_check_class_cast (GTypeClass *g_class,
                                                 GType is_a_type);
gboolean g_type_check_class_is_a (GTypeClass *g_class,
                                                 GType is_a_type);
gboolean g_type_check_is_value_type (GType type);
gboolean g_type_check_value (GValue *value);
gboolean g_type_check_value_holds (GValue *value,
                                                 GType type);
gboolean g_type_test_flags (GType type,
                                                 guint flags);



const gchar* g_type_name_from_instance (GTypeInstance *instance);
const gchar* g_type_name_from_class (GTypeClass *g_class);
# 378 "/usr/include/glib-2.0/gobject/gtype.h"
extern GTypeDebugFlags _g_type_debug_flags;


# 27 "/usr/include/glib-2.0/gobject/gboxed.h" 2









typedef gpointer (*GBoxedCopyFunc) (gpointer boxed);
typedef void (*GBoxedFreeFunc) (gpointer boxed);



gpointer g_boxed_copy (GType boxed_type,
                                                 gconstpointer src_boxed);
void g_boxed_free (GType boxed_type,
                                                 gpointer boxed);
void g_value_set_boxed (GValue *value,
                                                 gconstpointer v_boxed);
void g_value_set_static_boxed (GValue *value,
                                                 gconstpointer v_boxed);
gpointer g_value_get_boxed (const GValue *value);
gpointer g_value_dup_boxed (const GValue *value);



GType g_boxed_type_register_static (const gchar *name,
                                                 GBoxedCopyFunc boxed_copy,
                                                 GBoxedFreeFunc boxed_free);
# 67 "/usr/include/glib-2.0/gobject/gboxed.h"
void g_value_set_boxed_take_ownership (GValue *value,
                                                 gconstpointer v_boxed);
GType g_closure_get_type (void) ;
GType g_value_get_type (void) ;
GType g_value_array_get_type (void) ;
GType g_gstring_get_type (void) ;


# 26 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 26 "/usr/include/glib-2.0/gobject/genums.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/genums.h" 2


# 46 "/usr/include/glib-2.0/gobject/genums.h"
typedef struct _GEnumClass GEnumClass;
typedef struct _GFlagsClass GFlagsClass;
typedef struct _GEnumValue GEnumValue;
typedef struct _GFlagsValue GFlagsValue;
struct _GEnumClass
{
  GTypeClass g_type_class;

  gint minimum;
  gint maximum;
  guint n_values;
  GEnumValue *values;
};
struct _GFlagsClass
{
  GTypeClass g_type_class;

  guint mask;
  guint n_values;
  GFlagsValue *values;
};
struct _GEnumValue
{
  gint value;
  gchar *value_name;
  gchar *value_nick;
};
struct _GFlagsValue
{
  guint value;
  gchar *value_name;
  gchar *value_nick;
};



GEnumValue* g_enum_get_value (GEnumClass *enum_class,
                                                 gint value);
GEnumValue* g_enum_get_value_by_name (GEnumClass *enum_class,
                                                 const gchar *name);
GEnumValue* g_enum_get_value_by_nick (GEnumClass *enum_class,
                                                 const gchar *nick);
GFlagsValue* g_flags_get_first_value (GFlagsClass *flags_class,
                                                 guint value);
GFlagsValue* g_flags_get_value_by_name (GFlagsClass *flags_class,
                                                 const gchar *name);
GFlagsValue* g_flags_get_value_by_nick (GFlagsClass *flags_class,
                                                 const gchar *nick);
void g_value_set_enum (GValue *value,
                                                 gint v_enum);
gint g_value_get_enum (const GValue *value);
void g_value_set_flags (GValue *value,
                                                 guint v_flags);
guint g_value_get_flags (const GValue *value);







GType g_enum_register_static (const gchar *name,
                                    const GEnumValue *const_static_values);
GType g_flags_register_static (const gchar *name,
                                    const GFlagsValue *const_static_values);



void g_enum_complete_type_info (GType g_enum_type,
                                    GTypeInfo *info,
                                    const GEnumValue *const_values);
void g_flags_complete_type_info (GType g_flags_type,
                                    GTypeInfo *info,
                                    const GFlagsValue *const_values);


# 27 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 26 "/usr/include/glib-2.0/gobject/gobject.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvalue.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvalue.h" 2


# 41 "/usr/include/glib-2.0/gobject/gvalue.h"
typedef void (*GValueTransform) (const GValue *src_value,
                                 GValue *dest_value);
struct _GValue
{

  GType g_type;


  union {
    gint v_int;
    guint v_uint;
    glong v_long;
    gulong v_ulong;
    gint64 v_int64;
    guint64 v_uint64;
    gfloat v_float;
    gdouble v_double;
    gpointer v_pointer;
  } data[2];
};



GValue* g_value_init (GValue *value,
                                         GType g_type);
void g_value_copy (const GValue *src_value,
                                         GValue *dest_value);
GValue* g_value_reset (GValue *value);
void g_value_unset (GValue *value);
void g_value_set_instance (GValue *value,
                                         gpointer instance);



gboolean g_value_fits_pointer (const GValue *value);
gpointer g_value_peek_pointer (const GValue *value);



gboolean g_value_type_compatible (GType src_type,
                                         GType dest_type);
gboolean g_value_type_transformable (GType src_type,
                                         GType dest_type);
gboolean g_value_transform (const GValue *src_value,
                                         GValue *dest_value);
void g_value_register_transform_func (GType src_type,
                                         GType dest_type,
                                         GValueTransform transform_func);




# 28 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 28 "/usr/include/glib-2.0/gobject/gparam.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gparam.h" 2


# 49 "/usr/include/glib-2.0/gobject/gparam.h"
typedef enum
{
  G_PARAM_READABLE = 1 << 0,
  G_PARAM_WRITABLE = 1 << 1,
  G_PARAM_CONSTRUCT = 1 << 2,
  G_PARAM_CONSTRUCT_ONLY = 1 << 3,
  G_PARAM_LAX_VALIDATION = 1 << 4,
  G_PARAM_PRIVATE = 1 << 5
} GParamFlags;







typedef struct _GParamSpec GParamSpec;
typedef struct _GParamSpecClass GParamSpecClass;
typedef struct _GParameter GParameter;
typedef struct _GParamSpecPool GParamSpecPool;
struct _GParamSpec
{
  GTypeInstance g_type_instance;

  gchar *name;
  GParamFlags flags;
  GType value_type;
  GType owner_type;


  gchar *_nick;
  gchar *_blurb;
  GData *qdata;
  guint ref_count;
  guint param_id;
};
struct _GParamSpecClass
{
  GTypeClass g_type_class;

  GType value_type;

  void (*finalize) (GParamSpec *pspec);


  void (*value_set_default) (GParamSpec *pspec,
                                         GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
                                         GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
                                         const GValue *value1,
                                         const GValue *value2);
  gpointer dummy[4];
};
struct _GParameter
{
  const gchar *name;
  GValue value;
};



GParamSpec* g_param_spec_ref (GParamSpec *pspec);
void g_param_spec_unref (GParamSpec *pspec);
void g_param_spec_sink (GParamSpec *pspec);
gpointer g_param_spec_get_qdata (GParamSpec *pspec,
                                                 GQuark quark);
void g_param_spec_set_qdata (GParamSpec *pspec,
                                                 GQuark quark,
                                                 gpointer data);
void g_param_spec_set_qdata_full (GParamSpec *pspec,
                                                 GQuark quark,
                                                 gpointer data,
                                                 GDestroyNotify destroy);
gpointer g_param_spec_steal_qdata (GParamSpec *pspec,
                                                 GQuark quark);
void g_param_value_set_default (GParamSpec *pspec,
                                                 GValue *value);
gboolean g_param_value_defaults (GParamSpec *pspec,
                                                 GValue *value);
gboolean g_param_value_validate (GParamSpec *pspec,
                                                 GValue *value);
gboolean g_param_value_convert (GParamSpec *pspec,
                                                 const GValue *src_value,
                                                 GValue *dest_value,
                                                 gboolean strict_validation);
gint g_param_values_cmp (GParamSpec *pspec,
                                                 const GValue *value1,
                                                 const GValue *value2);
const gchar* g_param_spec_get_name (GParamSpec *pspec);
const gchar* g_param_spec_get_nick (GParamSpec *pspec);
const gchar* g_param_spec_get_blurb (GParamSpec *pspec);
void g_value_set_param (GValue *value,
                                                 GParamSpec *param);
GParamSpec* g_value_get_param (const GValue *value);
GParamSpec* g_value_dup_param (const GValue *value);



void g_value_set_param_take_ownership (GValue *value,
                                                 GParamSpec *param);



typedef struct _GParamSpecTypeInfo GParamSpecTypeInfo;
struct _GParamSpecTypeInfo
{

  guint16 instance_size;
  guint16 n_preallocs;
  void (*instance_init) (GParamSpec *pspec);


  GType value_type;
  void (*finalize) (GParamSpec *pspec);
  void (*value_set_default) (GParamSpec *pspec,
                                         GValue *value);
  gboolean (*value_validate) (GParamSpec *pspec,
                                         GValue *value);
  gint (*values_cmp) (GParamSpec *pspec,
                                         const GValue *value1,
                                         const GValue *value2);
};
GType g_param_type_register_static (const gchar *name,
                                         const GParamSpecTypeInfo *pspec_info);


GType _g_param_type_register_static_constant (const gchar *name,
                                               const GParamSpecTypeInfo *pspec_info,
                                               GType opt_type);



gpointer g_param_spec_internal (GType param_type,
                                                 const gchar *name,
                                                 const gchar *nick,
                                                 const gchar *blurb,
                                                 GParamFlags flags);
GParamSpecPool* g_param_spec_pool_new (gboolean type_prefixing);
void g_param_spec_pool_insert (GParamSpecPool *pool,
                                                 GParamSpec *pspec,
                                                 GType owner_type);
void g_param_spec_pool_remove (GParamSpecPool *pool,
                                                 GParamSpec *pspec);
GParamSpec* g_param_spec_pool_lookup (GParamSpecPool *pool,
                                                 const gchar *param_name,
                                                 GType owner_type,
                                                 gboolean walk_ancestors);
GList* g_param_spec_pool_list_owned (GParamSpecPool *pool,
                                                 GType owner_type);
GParamSpec** g_param_spec_pool_list (GParamSpecPool *pool,
                                                 GType owner_type,
                                                 guint *n_pspecs_p);
# 221 "/usr/include/glib-2.0/gobject/gparam.h"

# 29 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 26 "/usr/include/glib-2.0/gobject/gclosure.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gclosure.h" 2


# 39 "/usr/include/glib-2.0/gobject/gclosure.h"
typedef struct _GClosure GClosure;
typedef struct _GClosureNotifyData GClosureNotifyData;
typedef void (*GCallback) (void);
typedef void (*GClosureNotify) (gpointer data,
                                         GClosure *closure);
typedef void (*GClosureMarshal) (GClosure *closure,
                                         GValue *return_value,
                                         guint n_param_values,
                                         const GValue *param_values,
                                         gpointer invocation_hint,
                                         gpointer marshal_data);
typedef struct _GCClosure GCClosure;



struct _GClosureNotifyData
{
  gpointer data;
  GClosureNotify notify;
};
struct _GClosure
{
                        guint ref_count : 15;
                        guint meta_marshal : 1;
                        guint n_guards : 1;
                        guint n_fnotifiers : 2;
                        guint n_inotifiers : 8;
                        guint in_inotify : 1;
                        guint floating : 1;
                        guint derivative_flag : 1;
                        guint in_marshal : 1;
                        guint is_invalid : 1;

                        void (*marshal) (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);
                        gpointer data;

                        GClosureNotifyData *notifiers;
# 92 "/usr/include/glib-2.0/gobject/gclosure.h"
};


struct _GCClosure
{
  GClosure closure;
  gpointer callback;
};



GClosure* g_cclosure_new (GCallback callback_func,
                                                 gpointer user_data,
                                                 GClosureNotify destroy_data);
GClosure* g_cclosure_new_swap (GCallback callback_func,
                                                 gpointer user_data,
                                                 GClosureNotify destroy_data);
GClosure* g_signal_type_cclosure_new (GType itype,
                                                 guint struct_offset);



GClosure* g_closure_ref (GClosure *closure);
void g_closure_sink (GClosure *closure);
void g_closure_unref (GClosure *closure);

GClosure* g_closure_new_simple (guint sizeof_closure,
                                                 gpointer data);
void g_closure_add_finalize_notifier (GClosure *closure,
                                                 gpointer notify_data,
                                                 GClosureNotify notify_func);
void g_closure_remove_finalize_notifier (GClosure *closure,
                                                 gpointer notify_data,
                                                 GClosureNotify notify_func);
void g_closure_add_invalidate_notifier (GClosure *closure,
                                                 gpointer notify_data,
                                                 GClosureNotify notify_func);
void g_closure_remove_invalidate_notifier (GClosure *closure,
                                                 gpointer notify_data,
                                                 GClosureNotify notify_func);
void g_closure_add_marshal_guards (GClosure *closure,
                                                 gpointer pre_marshal_data,
                                                 GClosureNotify pre_marshal_notify,
                                                 gpointer post_marshal_data,
                                                 GClosureNotify post_marshal_notify);
void g_closure_set_marshal (GClosure *closure,
                                                 GClosureMarshal marshal);
void g_closure_set_meta_marshal (GClosure *closure,
                                                 gpointer marshal_data,
                                                 GClosureMarshal meta_marshal);
void g_closure_invalidate (GClosure *closure);
void g_closure_invoke (GClosure *closure,
                                                 GValue *return_value,
                                                 guint n_param_values,
                                                 const GValue *param_values,
                                                 gpointer invocation_hint);
# 160 "/usr/include/glib-2.0/gobject/gclosure.h"

# 30 "/usr/include/glib-2.0/gobject/gobject.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 26 "/usr/include/glib-2.0/gobject/gsignal.h"
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 27 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 28 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 29 "/usr/include/glib-2.0/gobject/gsignal.h" 2
# 1 "/usr/include/glib-2.0/gobject/gmarshal.h" 1






extern void g_cclosure_marshal_VOID__VOID (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);


extern void g_cclosure_marshal_VOID__CHAR (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UCHAR (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__INT (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UINT (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__LONG (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__ULONG (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__ENUM (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);


extern void g_cclosure_marshal_VOID__FLAGS (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__FLOAT (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_VOID__STRING (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_VOID__PARAM (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__BOXED (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);


extern void g_cclosure_marshal_VOID__POINTER (GClosure *closure,
                                              GValue *return_value,
                                              guint n_param_values,
                                              const GValue *param_values,
                                              gpointer invocation_hint,
                                              gpointer marshal_data);


extern void g_cclosure_marshal_VOID__OBJECT (GClosure *closure,
                                             GValue *return_value,
                                             guint n_param_values,
                                             const GValue *param_values,
                                             gpointer invocation_hint,
                                             gpointer marshal_data);


extern void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);


extern void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure,
                                                   GValue *return_value,
                                                   guint n_param_values,
                                                   const GValue *param_values,
                                                   gpointer invocation_hint,
                                                   gpointer marshal_data);


extern void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);



# 30 "/usr/include/glib-2.0/gobject/gsignal.h" 2




typedef struct _GSignalQuery GSignalQuery;
typedef struct _GSignalInvocationHint GSignalInvocationHint;
typedef GClosureMarshal GSignalCMarshaller;
typedef gboolean (*GSignalEmissionHook) (GSignalInvocationHint *ihint,
                                         guint n_param_values,
                                         const GValue *param_values,
                                         gpointer data);
typedef gboolean (*GSignalAccumulator) (GSignalInvocationHint *ihint,
                                         GValue *return_accu,
                                         const GValue *handler_return,
                                         gpointer data);



typedef enum
{
  G_SIGNAL_RUN_FIRST = 1 << 0,
  G_SIGNAL_RUN_LAST = 1 << 1,
  G_SIGNAL_RUN_CLEANUP = 1 << 2,
  G_SIGNAL_NO_RECURSE = 1 << 3,
  G_SIGNAL_DETAILED = 1 << 4,
  G_SIGNAL_ACTION = 1 << 5,
  G_SIGNAL_NO_HOOKS = 1 << 6
} GSignalFlags;

typedef enum
{
  G_CONNECT_AFTER = 1 << 0,
  G_CONNECT_SWAPPED = 1 << 1
} GConnectFlags;
typedef enum
{
  G_SIGNAL_MATCH_ID = 1 << 0,
  G_SIGNAL_MATCH_DETAIL = 1 << 1,
  G_SIGNAL_MATCH_CLOSURE = 1 << 2,
  G_SIGNAL_MATCH_FUNC = 1 << 3,
  G_SIGNAL_MATCH_DATA = 1 << 4,
  G_SIGNAL_MATCH_UNBLOCKED = 1 << 5
} GSignalMatchType;





struct _GSignalInvocationHint
{
  guint signal_id;
  GQuark detail;
  GSignalFlags run_type;
};
struct _GSignalQuery
{
  guint signal_id;
  const gchar *signal_name;
  GType itype;
  GSignalFlags signal_flags;
  GType return_type;
  guint n_params;
  const GType *param_types;
};



guint g_signal_newv (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GClosure *class_closure,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             GType *param_types);
guint g_signal_new_valist (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             GClosure *class_closure,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             va_list args);
guint g_signal_new (const gchar *signal_name,
                                             GType itype,
                                             GSignalFlags signal_flags,
                                             guint class_offset,
                                             GSignalAccumulator accumulator,
                                             gpointer accu_data,
                                             GSignalCMarshaller c_marshaller,
                                             GType return_type,
                                             guint n_params,
                                             ...);
void g_signal_emitv (const GValue *instance_and_params,
                                             guint signal_id,
                                             GQuark detail,
                                             GValue *return_value);
void g_signal_emit_valist (gpointer instance,
                                             guint signal_id,
                                             GQuark detail,
                                             va_list var_args);
void g_signal_emit (gpointer instance,
                                             guint signal_id,
                                             GQuark detail,
                                             ...);
void g_signal_emit_by_name (gpointer instance,
                                             const gchar *detailed_signal,
                                             ...);
guint g_signal_lookup (const gchar *name,
                                             GType itype);
const gchar* g_signal_name (guint signal_id);
void g_signal_query (guint signal_id,
                                             GSignalQuery *query);
guint* g_signal_list_ids (GType itype,
                                             guint *n_ids);
gboolean g_signal_parse_name (const gchar *detailed_signal,
                                             GType itype,
                                             guint *signal_id_p,
                                             GQuark *detail_p,
                                             gboolean force_detail_quark);
GSignalInvocationHint* g_signal_get_invocation_hint (gpointer instance);



void g_signal_stop_emission (gpointer instance,
                                             guint signal_id,
                                             GQuark detail);
void g_signal_stop_emission_by_name (gpointer instance,
                                             const gchar *detailed_signal);
gulong g_signal_add_emission_hook (guint signal_id,
                                             GQuark detail,
                                             GSignalEmissionHook hook_func,
                                             gpointer hook_data,
                                             GDestroyNotify data_destroy);
void g_signal_remove_emission_hook (guint signal_id,
                                             gulong hook_id);



gboolean g_signal_has_handler_pending (gpointer instance,
                                               guint signal_id,
                                               GQuark detail,
                                               gboolean may_be_blocked);
gulong g_signal_connect_closure_by_id (gpointer instance,
                                               guint signal_id,
                                               GQuark detail,
                                               GClosure *closure,
                                               gboolean after);
gulong g_signal_connect_closure (gpointer instance,
                                               const gchar *detailed_signal,
                                               GClosure *closure,
                                               gboolean after);
gulong g_signal_connect_data (gpointer instance,
                                               const gchar *detailed_signal,
                                               GCallback c_handler,
                                               gpointer data,
                                               GClosureNotify destroy_data,
                                               GConnectFlags connect_flags);
void g_signal_handler_block (gpointer instance,
                                               gulong handler_id);
void g_signal_handler_unblock (gpointer instance,
                                               gulong handler_id);
void g_signal_handler_disconnect (gpointer instance,
                                               gulong handler_id);
gboolean g_signal_handler_is_connected (gpointer instance,
                                               gulong handler_id);
gulong g_signal_handler_find (gpointer instance,
                                               GSignalMatchType mask,
                                               guint signal_id,
                                               GQuark detail,
                                               GClosure *closure,
                                               gpointer func,
                                               gpointer data);
guint g_signal_handlers_block_matched (gpointer instance,
                                               GSignalMatchType mask,
                                               guint signal_id,
                                               GQuark detail,
                                               GClosure *closure,
                                               gpointer func,
                                               gpointer data);
guint g_signal_handlers_unblock_matched (gpointer instance,
                                               GSignalMatchType mask,
                                               guint signal_id,
                                               GQuark detail,
                                               GClosure *closure,
                                               gpointer func,
                                               gpointer data);
guint g_signal_handlers_disconnect_matched (gpointer instance,
                                               GSignalMatchType mask,
                                               guint signal_id,
                                               GQuark detail,
                                               GClosure *closure,
                                               gpointer func,
                                               gpointer data);



void g_signal_override_class_closure (guint signal_id,
                                               GType instance_type,
                                               GClosure *class_closure);
void g_signal_chain_from_overridden (const GValue *instance_and_params,
                                               GValue *return_value);
# 260 "/usr/include/glib-2.0/gobject/gsignal.h"
void g_signal_handlers_destroy (gpointer instance);
void _g_signals_destroy (GType itype);


# 31 "/usr/include/glib-2.0/gobject/gobject.h" 2


# 49 "/usr/include/glib-2.0/gobject/gobject.h"
typedef struct _GObject GObject;
typedef struct _GObjectClass GObjectClass;
typedef struct _GObjectConstructParam GObjectConstructParam;
typedef void (*GObjectGetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectSetPropertyFunc) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
typedef void (*GObjectFinalizeFunc) (GObject *object);
typedef void (*GWeakNotify) (gpointer data,
                                         GObject *where_the_object_was);
struct _GObject
{
  GTypeInstance g_type_instance;


  guint ref_count;
  GData *qdata;
};
struct _GObjectClass
{
  GTypeClass g_type_class;


  GSList *construct_properties;


  GObject* (*constructor) (GType type,
                                 guint n_construct_properties,
                                 GObjectConstructParam *construct_properties);
  void (*set_property) (GObject *object,
                                         guint property_id,
                                         const GValue *value,
                                         GParamSpec *pspec);
  void (*get_property) (GObject *object,
                                         guint property_id,
                                         GValue *value,
                                         GParamSpec *pspec);
  void (*dispose) (GObject *object);
  void (*finalize) (GObject *object);


  void (*dispatch_properties_changed) (GObject *object,
                                             guint n_pspecs,
                                             GParamSpec **pspecs);


  void (*notify) (GObject *object,
                                         GParamSpec *pspec);

  gpointer pdummy[8];
};
struct _GObjectConstructParam
{
  GParamSpec *pspec;
  GValue *value;
};



void g_object_class_install_property (GObjectClass *oclass,
                                               guint property_id,
                                               GParamSpec *pspec);
GParamSpec* g_object_class_find_property (GObjectClass *oclass,
                                               const gchar *property_name);
GParamSpec**g_object_class_list_properties (GObjectClass *oclass,
                                               guint *n_properties);
gpointer g_object_new (GType object_type,
                                               const gchar *first_property_name,
                                               ...);
gpointer g_object_newv (GType object_type,
                                               guint n_parameters,
                                               GParameter *parameters);
GObject* g_object_new_valist (GType object_type,
                                               const gchar *first_property_name,
                                               va_list var_args);
void g_object_set (gpointer object,
                                               const gchar *first_property_name,
                                               ...);
void g_object_get (gpointer object,
                                               const gchar *first_property_name,
                                               ...);
gpointer g_object_connect (gpointer object,
                                               const gchar *signal_spec,
                                               ...);
void g_object_disconnect (gpointer object,
                                               const gchar *signal_spec,
                                               ...);
void g_object_set_valist (GObject *object,
                                               const gchar *first_property_name,
                                               va_list var_args);
void g_object_get_valist (GObject *object,
                                               const gchar *first_property_name,
                                               va_list var_args);
void g_object_set_property (GObject *object,
                                               const gchar *property_name,
                                               const GValue *value);
void g_object_get_property (GObject *object,
                                               const gchar *property_name,
                                               GValue *value);
void g_object_freeze_notify (GObject *object);
void g_object_notify (GObject *object,
                                               const gchar *property_name);
void g_object_thaw_notify (GObject *object);
gpointer g_object_ref (gpointer object);
void g_object_unref (gpointer object);
void g_object_weak_ref (GObject *object,
                                               GWeakNotify notify,
                                               gpointer data);
void g_object_weak_unref (GObject *object,
                                               GWeakNotify notify,
                                               gpointer data);
void g_object_add_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
void g_object_remove_weak_pointer (GObject *object,
                                               gpointer *weak_pointer_location);
gpointer g_object_get_qdata (GObject *object,
                                               GQuark quark);
void g_object_set_qdata (GObject *object,
                                               GQuark quark,
                                               gpointer data);
void g_object_set_qdata_full (GObject *object,
                                               GQuark quark,
                                               gpointer data,
                                               GDestroyNotify destroy);
gpointer g_object_steal_qdata (GObject *object,
                                               GQuark quark);
gpointer g_object_get_data (GObject *object,
                                               const gchar *key);
void g_object_set_data (GObject *object,
                                               const gchar *key,
                                               gpointer data);
void g_object_set_data_full (GObject *object,
                                               const gchar *key,
                                               gpointer data,
                                               GDestroyNotify destroy);
gpointer g_object_steal_data (GObject *object,
                                               const gchar *key);
void g_object_watch_closure (GObject *object,
                                               GClosure *closure);
GClosure* g_cclosure_new_object (GCallback callback_func,
                                               GObject *object);
GClosure* g_cclosure_new_object_swap (GCallback callback_func,
                                               GObject *object);
GClosure* g_closure_new_object (guint sizeof_closure,
                                               GObject *object);
void g_value_set_object (GValue *value,
                                               gpointer v_object);
gpointer g_value_get_object (const GValue *value);
GObject* g_value_dup_object (const GValue *value);
gulong g_signal_connect_object (gpointer instance,
                                               const gchar *detailed_signal,
                                               GCallback c_handler,
                                               gpointer gobject,
                                               GConnectFlags connect_flags);



void g_object_run_dispose (GObject *object);



void g_value_set_object_take_ownership (GValue *value,
                                               gpointer v_object);
# 235 "/usr/include/glib-2.0/gobject/gobject.h"

# 28 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparam.h" 1
# 29 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gparamspecs.h" 1
# 28 "/usr/include/glib-2.0/gobject/gparamspecs.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/genums.h" 1
# 30 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/gboxed.h" 1
# 31 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 32 "/usr/include/glib-2.0/gobject/gparamspecs.h" 2


# 99 "/usr/include/glib-2.0/gobject/gparamspecs.h"
typedef struct _GParamSpecChar GParamSpecChar;
typedef struct _GParamSpecUChar GParamSpecUChar;
typedef struct _GParamSpecBoolean GParamSpecBoolean;
typedef struct _GParamSpecInt GParamSpecInt;
typedef struct _GParamSpecUInt GParamSpecUInt;
typedef struct _GParamSpecLong GParamSpecLong;
typedef struct _GParamSpecULong GParamSpecULong;
typedef struct _GParamSpecInt64 GParamSpecInt64;
typedef struct _GParamSpecUInt64 GParamSpecUInt64;
typedef struct _GParamSpecUnichar GParamSpecUnichar;
typedef struct _GParamSpecEnum GParamSpecEnum;
typedef struct _GParamSpecFlags GParamSpecFlags;
typedef struct _GParamSpecFloat GParamSpecFloat;
typedef struct _GParamSpecDouble GParamSpecDouble;
typedef struct _GParamSpecString GParamSpecString;
typedef struct _GParamSpecParam GParamSpecParam;
typedef struct _GParamSpecBoxed GParamSpecBoxed;
typedef struct _GParamSpecPointer GParamSpecPointer;
typedef struct _GParamSpecValueArray GParamSpecValueArray;
typedef struct _GParamSpecObject GParamSpecObject;

struct _GParamSpecChar
{
  GParamSpec parent_instance;

  gint8 minimum;
  gint8 maximum;
  gint8 default_value;
};
struct _GParamSpecUChar
{
  GParamSpec parent_instance;

  guint8 minimum;
  guint8 maximum;
  guint8 default_value;
};
struct _GParamSpecBoolean
{
  GParamSpec parent_instance;

  gboolean default_value;
};
struct _GParamSpecInt
{
  GParamSpec parent_instance;

  gint minimum;
  gint maximum;
  gint default_value;
};
struct _GParamSpecUInt
{
  GParamSpec parent_instance;

  guint minimum;
  guint maximum;
  guint default_value;
};
struct _GParamSpecLong
{
  GParamSpec parent_instance;

  glong minimum;
  glong maximum;
  glong default_value;
};
struct _GParamSpecULong
{
  GParamSpec parent_instance;

  gulong minimum;
  gulong maximum;
  gulong default_value;
};
struct _GParamSpecInt64
{
  GParamSpec parent_instance;

  gint64 minimum;
  gint64 maximum;
  gint64 default_value;
};
struct _GParamSpecUInt64
{
  GParamSpec parent_instance;

  guint64 minimum;
  guint64 maximum;
  guint64 default_value;
};
struct _GParamSpecUnichar
{
  GParamSpec parent_instance;

  gunichar default_value;
};
struct _GParamSpecEnum
{
  GParamSpec parent_instance;

  GEnumClass *enum_class;
  gint default_value;
};
struct _GParamSpecFlags
{
  GParamSpec parent_instance;

  GFlagsClass *flags_class;
  guint default_value;
};
struct _GParamSpecFloat
{
  GParamSpec parent_instance;

  gfloat minimum;
  gfloat maximum;
  gfloat default_value;
  gfloat epsilon;
};
struct _GParamSpecDouble
{
  GParamSpec parent_instance;

  gdouble minimum;
  gdouble maximum;
  gdouble default_value;
  gdouble epsilon;
};
struct _GParamSpecString
{
  GParamSpec parent_instance;

  gchar *default_value;
  gchar *cset_first;
  gchar *cset_nth;
  gchar substitutor;
  guint null_fold_if_empty : 1;
  guint ensure_non_null : 1;
};
struct _GParamSpecParam
{
  GParamSpec parent_instance;
};
struct _GParamSpecBoxed
{
  GParamSpec parent_instance;
};
struct _GParamSpecPointer
{
  GParamSpec parent_instance;
};
struct _GParamSpecValueArray
{
  GParamSpec parent_instance;
  GParamSpec *element_spec;
  guint fixed_n_elements;
};
struct _GParamSpecObject
{
  GParamSpec parent_instance;
};


GParamSpec* g_param_spec_char (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gint8 minimum,
                                          gint8 maximum,
                                          gint8 default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_uchar (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          guint8 minimum,
                                          guint8 maximum,
                                          guint8 default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_boolean (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gboolean default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_int (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gint minimum,
                                          gint maximum,
                                          gint default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_uint (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          guint minimum,
                                          guint maximum,
                                          guint default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_long (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          glong minimum,
                                          glong maximum,
                                          glong default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_ulong (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gulong minimum,
                                          gulong maximum,
                                          gulong default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_int64 (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gint64 minimum,
                                          gint64 maximum,
                                          gint64 default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_uint64 (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          guint64 minimum,
                                          guint64 maximum,
                                          guint64 default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_unichar (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gunichar default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_enum (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GType enum_type,
                                          gint default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_flags (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GType flags_type,
                                          guint default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_float (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gfloat minimum,
                                          gfloat maximum,
                                          gfloat default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_double (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          gdouble minimum,
                                          gdouble maximum,
                                          gdouble default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_string (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          const gchar *default_value,
                                          GParamFlags flags);
GParamSpec* g_param_spec_param (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GType param_type,
                                          GParamFlags flags);
GParamSpec* g_param_spec_boxed (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GType boxed_type,
                                          GParamFlags flags);
GParamSpec* g_param_spec_pointer (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GParamFlags flags);
GParamSpec* g_param_spec_value_array (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GParamSpec *element_spec,
                                          GParamFlags flags);
GParamSpec* g_param_spec_object (const gchar *name,
                                          const gchar *nick,
                                          const gchar *blurb,
                                          GType object_type,
                                          GParamFlags flags);
# 410 "/usr/include/glib-2.0/gobject/gparamspecs.h"
extern GType *g_param_spec_types;


# 30 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsignal.h" 1
# 31 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 1
# 25 "/usr/include/glib-2.0/gobject/gsourceclosure.h"
# 1 "/usr/include/glib-2.0/gobject/gclosure.h" 1
# 26 "/usr/include/glib-2.0/gobject/gsourceclosure.h" 2



void g_source_set_closure (GSource *source,
                           GClosure *closure);

GType g_io_channel_get_type (void);
GType g_io_condition_get_type (void);





# 32 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 33 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypemodule.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtypemodule.h"
# 1 "/usr/include/glib-2.0/gobject/gobject.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtypemodule.h" 2



typedef struct _GTypeModule GTypeModule;
typedef struct _GTypeModuleClass GTypeModuleClass;
# 40 "/usr/include/glib-2.0/gobject/gtypemodule.h"
struct _GTypeModule
{
  GObject parent_instance;

  guint use_count;
  GSList *type_infos;
  GSList *interface_infos;
  gchar *name;
};

struct _GTypeModuleClass
{
  GObjectClass parent_class;

  gboolean (* load) (GTypeModule *module);
  void (* unload) (GTypeModule *module);


  void (*reserved1) (void);
  void (*reserved2) (void);
  void (*reserved3) (void);
  void (*reserved4) (void);
};

GType g_type_module_get_type (void);
gboolean g_type_module_use (GTypeModule *module);
void g_type_module_unuse (GTypeModule *module);
void g_type_module_set_name (GTypeModule *module,
                                      const gchar *name);
GType g_type_module_register_type (GTypeModule *module,
                                      GType parent_type,
                                      const gchar *type_name,
                                      const GTypeInfo *type_info,
                                      GTypeFlags flags);
void g_type_module_add_interface (GTypeModule *module,
                                      GType instance_type,
                                      GType interface_type,
                                      const GInterfaceInfo *interface_info);


# 34 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 1
# 26 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
# 1 "/usr/include/glib-2.0/gobject/gtype.h" 1
# 27 "/usr/include/glib-2.0/gobject/gtypeplugin.h" 2


# 40 "/usr/include/glib-2.0/gobject/gtypeplugin.h"
typedef struct _GTypePluginClass GTypePluginClass;
typedef void (*GTypePluginUse) (GTypePlugin *plugin);
typedef void (*GTypePluginUnuse) (GTypePlugin *plugin);
typedef void (*GTypePluginCompleteTypeInfo) (GTypePlugin *plugin,
                                                   GType g_type,
                                                   GTypeInfo *info,
                                                   GTypeValueTable *value_table);
typedef void (*GTypePluginCompleteInterfaceInfo) (GTypePlugin *plugin,
                                                   GType instance_type,
                                                   GType interface_type,
                                                   GInterfaceInfo *info);
struct _GTypePluginClass
{
  GTypeInterface base_iface;

  GTypePluginUse use_plugin;
  GTypePluginUnuse unuse_plugin;
  GTypePluginCompleteTypeInfo complete_type_info;
  GTypePluginCompleteInterfaceInfo complete_interface_info;
};



GType g_type_plugin_get_type (void) ;
void g_type_plugin_use (GTypePlugin *plugin);
void g_type_plugin_unuse (GTypePlugin *plugin);
void g_type_plugin_complete_type_info (GTypePlugin *plugin,
                                                 GType g_type,
                                                 GTypeInfo *info,
                                                 GTypeValueTable *value_table);
void g_type_plugin_complete_interface_info (GTypePlugin *plugin,
                                                 GType instance_type,
                                                 GType interface_type,
                                                 GInterfaceInfo *info);


# 35 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 36 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluearray.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluearray.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvaluearray.h" 2
# 37 "/usr/include/glib-2.0/gobject/gvaluearray.h"
typedef struct _GValueArray GValueArray;
struct _GValueArray
{
  guint n_values;
  GValue *values;


  guint n_prealloced;
};



GValue* g_value_array_get_nth (GValueArray *value_array,
                                              guint index_);
GValueArray* g_value_array_new (guint n_prealloced);
void g_value_array_free (GValueArray *value_array);
GValueArray* g_value_array_copy (const GValueArray *value_array);
GValueArray* g_value_array_prepend (GValueArray *value_array,
                                              const GValue *value);
GValueArray* g_value_array_append (GValueArray *value_array,
                                              const GValue *value);
GValueArray* g_value_array_insert (GValueArray *value_array,
                                              guint index_,
                                              const GValue *value);
GValueArray* g_value_array_remove (GValueArray *value_array,
                                              guint index_);
GValueArray* g_value_array_sort (GValueArray *value_array,
                                              GCompareFunc compare_func);
GValueArray* g_value_array_sort_with_data (GValueArray *value_array,
                                              GCompareDataFunc compare_func,
                                              gpointer user_data);
# 37 "/usr/include/glib-2.0/glib-object.h" 2
# 1 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 1
# 28 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
# 1 "/usr/include/glib-2.0/gobject/gvalue.h" 1
# 29 "/usr/include/glib-2.0/gobject/gvaluetypes.h" 2


# 49 "/usr/include/glib-2.0/gobject/gvaluetypes.h"
void g_value_set_char (GValue *value,
                                                 gchar v_char);
gchar g_value_get_char (const GValue *value);
void g_value_set_uchar (GValue *value,
                                                 guchar v_uchar);
guchar g_value_get_uchar (const GValue *value);
void g_value_set_boolean (GValue *value,
                                                 gboolean v_boolean);
gboolean g_value_get_boolean (const GValue *value);
void g_value_set_int (GValue *value,
                                                 gint v_int);
gint g_value_get_int (const GValue *value);
void g_value_set_uint (GValue *value,
                                                 guint v_uint);
guint g_value_get_uint (const GValue *value);
void g_value_set_long (GValue *value,
                                                 glong v_long);
glong g_value_get_long (const GValue *value);
void g_value_set_ulong (GValue *value,
                                                 gulong v_ulong);
gulong g_value_get_ulong (const GValue *value);
void g_value_set_int64 (GValue *value,
                                                 gint64 v_int64);
gint64 g_value_get_int64 (const GValue *value);
void g_value_set_uint64 (GValue *value,
                                                 guint64 v_uint64);
guint64 g_value_get_uint64 (const GValue *value);
void g_value_set_float (GValue *value,
                                                 gfloat v_float);
gfloat g_value_get_float (const GValue *value);
void g_value_set_double (GValue *value,
                                                 gdouble v_double);
gdouble g_value_get_double (const GValue *value);
void g_value_set_string (GValue *value,
                                                 const gchar *v_string);
void g_value_set_static_string (GValue *value,
                                                 const gchar *v_string);
const gchar* g_value_get_string (const GValue *value);
gchar* g_value_dup_string (const GValue *value);
void g_value_set_pointer (GValue *value,
                                                 gpointer v_pointer);
gpointer g_value_get_pointer (const GValue *value);



GType g_pointer_type_register_static (const gchar *name);


gchar* g_strdup_value_contents (const GValue *value);



void g_value_set_string_take_ownership (GValue *value,
                                                 gchar *v_string);



typedef gchar* gchararray;



# 38 "/usr/include/glib-2.0/glib-object.h" 2
# 27 "/usr/include/pango-1.0/pango/pango-types.h" 2



typedef struct _PangoLogAttr PangoLogAttr;

typedef struct _PangoEngineLang PangoEngineLang;
typedef struct _PangoEngineShape PangoEngineShape;

typedef struct _PangoFont PangoFont;
typedef struct _PangoRectangle PangoRectangle;


typedef struct _PangoLanguage PangoLanguage;



typedef guint32 PangoGlyph;




struct _PangoRectangle
{
  int x;
  int y;
  int width;
  int height;
};
# 72 "/usr/include/pango-1.0/pango/pango-types.h"
typedef enum {
  PANGO_DIRECTION_LTR,
  PANGO_DIRECTION_RTL,
  PANGO_DIRECTION_TTB_LTR,
  PANGO_DIRECTION_TTB_RTL
} PangoDirection;



GType pango_language_get_type (void);
PangoLanguage *pango_language_from_string (const char *language);


gboolean pango_language_matches (PangoLanguage *language,
                                       const char *range_list);


# 27 "/usr/include/pango-1.0/pango/pango-font.h" 2





typedef struct _PangoFontDescription PangoFontDescription;
typedef struct _PangoFontMetrics PangoFontMetrics;
# 43 "/usr/include/pango-1.0/pango/pango-font.h"
typedef enum {
  PANGO_STYLE_NORMAL,
  PANGO_STYLE_OBLIQUE,
  PANGO_STYLE_ITALIC
} PangoStyle;

typedef enum {
  PANGO_VARIANT_NORMAL,
  PANGO_VARIANT_SMALL_CAPS
} PangoVariant;

typedef enum {
  PANGO_WEIGHT_ULTRALIGHT = 200,
  PANGO_WEIGHT_LIGHT = 300,
  PANGO_WEIGHT_NORMAL = 400,
  PANGO_WEIGHT_BOLD = 700,
  PANGO_WEIGHT_ULTRABOLD = 800,
  PANGO_WEIGHT_HEAVY = 900
} PangoWeight;

typedef enum {
  PANGO_STRETCH_ULTRA_CONDENSED,
  PANGO_STRETCH_EXTRA_CONDENSED,
  PANGO_STRETCH_CONDENSED,
  PANGO_STRETCH_SEMI_CONDENSED,
  PANGO_STRETCH_NORMAL,
  PANGO_STRETCH_SEMI_EXPANDED,
  PANGO_STRETCH_EXPANDED,
  PANGO_STRETCH_EXTRA_EXPANDED,
  PANGO_STRETCH_ULTRA_EXPANDED
} PangoStretch;

typedef enum {
  PANGO_FONT_MASK_FAMILY = 1 << 0,
  PANGO_FONT_MASK_STYLE = 1 << 1,
  PANGO_FONT_MASK_VARIANT = 1 << 2,
  PANGO_FONT_MASK_WEIGHT = 1 << 3,
  PANGO_FONT_MASK_STRETCH = 1 << 4,
  PANGO_FONT_MASK_SIZE = 1 << 5
} PangoFontMask;
# 99 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_description_get_type (void);
PangoFontDescription *pango_font_description_new (void);
PangoFontDescription *pango_font_description_copy (const PangoFontDescription *desc);
PangoFontDescription *pango_font_description_copy_static (const PangoFontDescription *desc);
guint pango_font_description_hash (const PangoFontDescription *desc);
gboolean pango_font_description_equal (const PangoFontDescription *desc1,
                                                          const PangoFontDescription *desc2);
void pango_font_description_free (PangoFontDescription *desc);
void pango_font_descriptions_free (PangoFontDescription **descs,
                                                          int n_descs);

void pango_font_description_set_family (PangoFontDescription *desc,
                                                               const char *family);
void pango_font_description_set_family_static (PangoFontDescription *desc,
                                                               const char *family);
const char *pango_font_description_get_family (const PangoFontDescription *desc);
void pango_font_description_set_style (PangoFontDescription *desc,
                                                               PangoStyle style);
PangoStyle pango_font_description_get_style (const PangoFontDescription *desc);
void pango_font_description_set_variant (PangoFontDescription *desc,
                                                               PangoVariant variant);
PangoVariant pango_font_description_get_variant (const PangoFontDescription *desc);
void pango_font_description_set_weight (PangoFontDescription *desc,
                                                               PangoWeight weight);
PangoWeight pango_font_description_get_weight (const PangoFontDescription *desc);
void pango_font_description_set_stretch (PangoFontDescription *desc,
                                                               PangoStretch stretch);
PangoStretch pango_font_description_get_stretch (const PangoFontDescription *desc);
void pango_font_description_set_size (PangoFontDescription *desc,
                                                               gint size);
gint pango_font_description_get_size (const PangoFontDescription *desc);

PangoFontMask pango_font_description_get_set_fields (const PangoFontDescription *desc);
void pango_font_description_unset_fields (PangoFontDescription *desc,
                                                     PangoFontMask to_unset);

void pango_font_description_merge (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);
void pango_font_description_merge_static (PangoFontDescription *desc,
                                          const PangoFontDescription *desc_to_merge,
                                          gboolean replace_existing);

gboolean pango_font_description_better_match (const PangoFontDescription *desc,
                                              const PangoFontDescription *old_match,
                                              const PangoFontDescription *new_match);

PangoFontDescription *pango_font_description_from_string (const char *str);
char * pango_font_description_to_string (const PangoFontDescription *desc);
char * pango_font_description_to_filename (const PangoFontDescription *desc);






GType pango_font_metrics_get_type (void);
PangoFontMetrics *pango_font_metrics_ref (PangoFontMetrics *metrics);
void pango_font_metrics_unref (PangoFontMetrics *metrics);
int pango_font_metrics_get_ascent (PangoFontMetrics *metrics);
int pango_font_metrics_get_descent (PangoFontMetrics *metrics);
int pango_font_metrics_get_approximate_char_width (PangoFontMetrics *metrics);
int pango_font_metrics_get_approximate_digit_width (PangoFontMetrics *metrics);
# 187 "/usr/include/pango-1.0/pango/pango-font.h"
typedef struct _PangoFontFamily PangoFontFamily;
typedef struct _PangoFontFace PangoFontFace;

GType pango_font_family_get_type (void) ;

void pango_font_family_list_faces (PangoFontFamily *family,
                                                   PangoFontFace ***faces,
                                                   int *n_faces);
const char *pango_font_family_get_name (PangoFontFamily *family);
# 240 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_face_get_type (void) ;

PangoFontDescription *pango_font_face_describe (PangoFontFace *face);
const char *pango_font_face_get_face_name (PangoFontFace *face);
# 286 "/usr/include/pango-1.0/pango/pango-font.h"
GType pango_font_get_type (void) ;

PangoFontDescription *pango_font_describe (PangoFont *font);
PangoCoverage * pango_font_get_coverage (PangoFont *font,
                                                    PangoLanguage *language);
PangoEngineShape * pango_font_find_shaper (PangoFont *font,
                                                    PangoLanguage *language,
                                                    guint32 ch);
PangoFontMetrics * pango_font_get_metrics (PangoFont *font,
                                                    PangoLanguage *language);
void pango_font_get_glyph_extents (PangoFont *font,
                                                    PangoGlyph glyph,
                                                    PangoRectangle *ink_rect,
                                                    PangoRectangle *logical_rect);
# 343 "/usr/include/pango-1.0/pango/pango-font.h"

# 26 "/usr/include/pango-1.0/pango/pango-attributes.h" 2






typedef struct _PangoColor PangoColor;

struct _PangoColor
{
  guint16 red;
  guint16 green;
  guint16 blue;
};


GType pango_color_get_type (void) ;

PangoColor *pango_color_copy (const PangoColor *src);
void pango_color_free (PangoColor *color);
gboolean pango_color_parse (PangoColor *color,
                                  const char *spec);



typedef struct _PangoAttribute PangoAttribute;
typedef struct _PangoAttrClass PangoAttrClass;

typedef struct _PangoAttrString PangoAttrString;
typedef struct _PangoAttrLanguage PangoAttrLanguage;
typedef struct _PangoAttrInt PangoAttrInt;
typedef struct _PangoAttrFloat PangoAttrFloat;
typedef struct _PangoAttrColor PangoAttrColor;
typedef struct _PangoAttrFontDesc PangoAttrFontDesc;
typedef struct _PangoAttrShape PangoAttrShape;


typedef struct _PangoAttrList PangoAttrList;
typedef struct _PangoAttrIterator PangoAttrIterator;

typedef enum
{
  PANGO_ATTR_INVALID,
  PANGO_ATTR_LANGUAGE,
  PANGO_ATTR_FAMILY,
  PANGO_ATTR_STYLE,
  PANGO_ATTR_WEIGHT,
  PANGO_ATTR_VARIANT,
  PANGO_ATTR_STRETCH,
  PANGO_ATTR_SIZE,
  PANGO_ATTR_FONT_DESC,
  PANGO_ATTR_FOREGROUND,
  PANGO_ATTR_BACKGROUND,
  PANGO_ATTR_UNDERLINE,
  PANGO_ATTR_STRIKETHROUGH,
  PANGO_ATTR_RISE,
  PANGO_ATTR_SHAPE,
  PANGO_ATTR_SCALE
} PangoAttrType;

typedef enum {
  PANGO_UNDERLINE_NONE,
  PANGO_UNDERLINE_SINGLE,
  PANGO_UNDERLINE_DOUBLE,
  PANGO_UNDERLINE_LOW
} PangoUnderline;

struct _PangoAttribute
{
  const PangoAttrClass *klass;
  guint start_index;
  guint end_index;
};

typedef gboolean (*PangoAttrFilterFunc) (PangoAttribute *attribute,
                                         gpointer data);

struct _PangoAttrClass
{

  PangoAttrType type;
  PangoAttribute * (*copy) (const PangoAttribute *attr);
  void (*destroy) (PangoAttribute *attr);
  gboolean (*equal) (const PangoAttribute *attr1, const PangoAttribute *attr2);
};

struct _PangoAttrString
{
  PangoAttribute attr;
  char *value;
};

struct _PangoAttrLanguage
{
  PangoAttribute attr;
  PangoLanguage *value;
};

struct _PangoAttrInt
{
  PangoAttribute attr;
  int value;
};

struct _PangoAttrFloat
{
  PangoAttribute attr;
  double value;
};

struct _PangoAttrColor
{
  PangoAttribute attr;
  PangoColor color;
};

struct _PangoAttrShape
{
  PangoAttribute attr;
  PangoRectangle ink_rect;
  PangoRectangle logical_rect;
};

struct _PangoAttrFontDesc
{
  PangoAttribute attr;
  PangoFontDescription *desc;
};

PangoAttrType pango_attr_type_register (const gchar *name);

PangoAttribute * pango_attribute_copy (const PangoAttribute *attr);
void pango_attribute_destroy (PangoAttribute *attr);
gboolean pango_attribute_equal (const PangoAttribute *attr1,
                                                const PangoAttribute *attr2);

PangoAttribute *pango_attr_language_new (PangoLanguage *language);
PangoAttribute *pango_attr_family_new (const char *family);
PangoAttribute *pango_attr_foreground_new (guint16 red,
                                              guint16 green,
                                              guint16 blue);
PangoAttribute *pango_attr_background_new (guint16 red,
                                              guint16 green,
                                              guint16 blue);
PangoAttribute *pango_attr_size_new (int size);
PangoAttribute *pango_attr_style_new (PangoStyle style);
PangoAttribute *pango_attr_weight_new (PangoWeight weight);
PangoAttribute *pango_attr_variant_new (PangoVariant variant);
PangoAttribute *pango_attr_stretch_new (PangoStretch stretch);
PangoAttribute *pango_attr_font_desc_new (const PangoFontDescription *desc);
PangoAttribute *pango_attr_underline_new (PangoUnderline underline);
PangoAttribute *pango_attr_strikethrough_new (gboolean strikethrough);
PangoAttribute *pango_attr_rise_new (int rise);
PangoAttribute *pango_attr_shape_new (const PangoRectangle *ink_rect,
                                              const PangoRectangle *logical_rect);
PangoAttribute *pango_attr_scale_new (double scale_factor);

GType pango_attr_list_get_type (void) ;
PangoAttrList * pango_attr_list_new (void);
void pango_attr_list_ref (PangoAttrList *list);
void pango_attr_list_unref (PangoAttrList *list);
PangoAttrList * pango_attr_list_copy (PangoAttrList *list);
void pango_attr_list_insert (PangoAttrList *list,
                                                  PangoAttribute *attr);
void pango_attr_list_insert_before (PangoAttrList *list,
                                                  PangoAttribute *attr);
void pango_attr_list_change (PangoAttrList *list,
                                                  PangoAttribute *attr);
void pango_attr_list_splice (PangoAttrList *list,
                                                  PangoAttrList *other,
                                                  gint pos,
                                                  gint len);

PangoAttrList *pango_attr_list_filter (PangoAttrList *list,
                                       PangoAttrFilterFunc func,
                                       gpointer data);

PangoAttrIterator *pango_attr_list_get_iterator (PangoAttrList *list);

void pango_attr_iterator_range (PangoAttrIterator *iterator,
                                                 gint *start,
                                                 gint *end);
gboolean pango_attr_iterator_next (PangoAttrIterator *iterator);
PangoAttrIterator *pango_attr_iterator_copy (PangoAttrIterator *iterator);
void pango_attr_iterator_destroy (PangoAttrIterator *iterator);
PangoAttribute * pango_attr_iterator_get (PangoAttrIterator *iterator,
                                                 PangoAttrType type);
void pango_attr_iterator_get_font (PangoAttrIterator *iterator,
                                                 PangoFontDescription *desc,
                                                 PangoLanguage **language,
                                                 GSList **extra_attrs);
GSList * pango_attr_iterator_get_attrs (PangoAttrIterator *iterator);


gboolean pango_parse_markup (const char *markup_text,
                             int length,
                             gunichar accel_marker,
                             PangoAttrList **attr_list,
                             char **text,
                             gunichar *accel_char,
                             GError **error);


# 26 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-break.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-break.h"


# 1 "/usr/include/pango-1.0/pango/pango-item.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-item.h"


typedef struct _PangoAnalysis PangoAnalysis;
typedef struct _PangoItem PangoItem;

struct _PangoAnalysis
{
  PangoEngineShape *shape_engine;
  PangoEngineLang *lang_engine;
  PangoFont *font;
  guint8 level;
  PangoLanguage *language;
  GSList *extra_attrs;
};

struct _PangoItem
{
  gint offset;
  gint length;
  gint num_chars;
  PangoAnalysis analysis;
};

PangoItem *pango_item_new (void);
PangoItem *pango_item_copy (PangoItem *item);
void pango_item_free (PangoItem *item);
PangoItem *pango_item_split (PangoItem *orig,
                             int split_index,
                             int split_offset);


# 30 "/usr/include/pango-1.0/pango/pango-break.h" 2



struct _PangoLogAttr
{
  guint is_line_break : 1;

  guint is_mandatory_break : 1;

  guint is_char_break : 1;

  guint is_white : 1;




  guint is_cursor_position : 1;






  guint is_word_start : 1;
  guint is_word_end : 1;
# 64 "/usr/include/pango-1.0/pango/pango-break.h"
  guint is_sentence_boundary : 1;
  guint is_sentence_start : 1;
  guint is_sentence_end : 1;
};




void pango_break (const gchar *text,
                  int length,
                  PangoAnalysis *analysis,
                  PangoLogAttr *attrs,
                  int attrs_len);

void pango_find_paragraph_boundary (const gchar *text,
                                    gint length,
                                    gint *paragraph_delimiter_index,
                                    gint *next_paragraph_start);

void pango_get_log_attrs (const char *text,
                          int length,
                          int level,
                          PangoLanguage *language,
                          PangoLogAttr *log_attrs,
                          int attrs_len);
# 105 "/usr/include/pango-1.0/pango/pango-break.h"

# 27 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-context.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-context.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontmap.h" 1
# 26 "/usr/include/pango-1.0/pango/pango-fontmap.h"
# 1 "/usr/include/pango-1.0/pango/pango-fontset.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-fontset.h"

# 40 "/usr/include/pango-1.0/pango/pango-fontset.h"
GType pango_fontset_get_type (void) ;

typedef struct _PangoFontset PangoFontset;

PangoFont * pango_fontset_get_font (PangoFontset *fontset,
                                             guint wc);
PangoFontMetrics *pango_fontset_get_metrics (PangoFontset *fontset);
# 102 "/usr/include/pango-1.0/pango/pango-fontset.h"

# 27 "/usr/include/pango-1.0/pango/pango-fontmap.h" 2







typedef struct _PangoContext PangoContext;
typedef struct _PangoFontMap PangoFontMap;

GType pango_font_map_get_type (void) ;
PangoFont * pango_font_map_load_font (PangoFontMap *fontmap,
                                            PangoContext *context,
                                            const PangoFontDescription *desc);
PangoFontset *pango_font_map_load_fontset (PangoFontMap *fontmap,
                                            PangoContext *context,
                                            const PangoFontDescription *desc,
                                            PangoLanguage *language);
void pango_font_map_list_families (PangoFontMap *fontmap,
                                            PangoFontFamily ***families,
                                            int *n_families);
# 91 "/usr/include/pango-1.0/pango/pango-fontmap.h"

# 27 "/usr/include/pango-1.0/pango/pango-context.h" 2









typedef struct _PangoContextClass PangoContextClass;
# 50 "/usr/include/pango-1.0/pango/pango-context.h"
GType pango_context_get_type (void) ;







void pango_context_list_families (PangoContext *context,
                                           PangoFontFamily ***families,
                                           int *n_families);
PangoFont * pango_context_load_font (PangoContext *context,
                                           const PangoFontDescription *desc);
PangoFontset *pango_context_load_fontset (PangoContext *context,
                                           const PangoFontDescription *desc,
                                           PangoLanguage *language);

PangoFontMetrics *pango_context_get_metrics (PangoContext *context,
                                               const PangoFontDescription *desc,
                                               PangoLanguage *language);

void pango_context_set_font_description (PangoContext *context,
                                                              const PangoFontDescription *desc);
PangoFontDescription * pango_context_get_font_description (PangoContext *context);
PangoLanguage *pango_context_get_language (PangoContext *context);
void pango_context_set_language (PangoContext *context,
                                                              PangoLanguage *language);
void pango_context_set_base_dir (PangoContext *context,
                                                              PangoDirection direction);
PangoDirection pango_context_get_base_dir (PangoContext *context);





GList *pango_itemize (PangoContext *context,
                      const char *text,
                      int start_index,
                      int length,
                      PangoAttrList *attrs,
                      PangoAttrIterator *cached_iter);



# 28 "/usr/include/pango-1.0/pango/pango.h" 2

# 1 "/usr/include/pango-1.0/pango/pango-engine.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-engine.h"
# 1 "/usr/include/pango-1.0/pango/pango-glyph.h" 1
# 28 "/usr/include/pango-1.0/pango/pango-glyph.h"


typedef struct _PangoGlyphGeometry PangoGlyphGeometry;
typedef struct _PangoGlyphVisAttr PangoGlyphVisAttr;
typedef struct _PangoGlyphInfo PangoGlyphInfo;
typedef struct _PangoGlyphString PangoGlyphString;


typedef gint32 PangoGlyphUnit;



struct _PangoGlyphGeometry
{
  PangoGlyphUnit width;
  PangoGlyphUnit x_offset;
  PangoGlyphUnit y_offset;
};



struct _PangoGlyphVisAttr
{
  guint is_cluster_start : 1;
};



struct _PangoGlyphInfo
{
  PangoGlyph glyph;
  PangoGlyphGeometry geometry;
  PangoGlyphVisAttr attr;
};




struct _PangoGlyphString {
  gint num_glyphs;

  PangoGlyphInfo *glyphs;






  gint *log_clusters;


  gint space;
};



PangoGlyphString *pango_glyph_string_new (void);
void pango_glyph_string_set_size (PangoGlyphString *string,
                                               gint new_len);
GType pango_glyph_string_get_type (void);
PangoGlyphString *pango_glyph_string_copy (PangoGlyphString *string);
void pango_glyph_string_free (PangoGlyphString *string);
void pango_glyph_string_extents (PangoGlyphString *glyphs,
                                               PangoFont *font,
                                               PangoRectangle *ink_rect,
                                               PangoRectangle *logical_rect);

void pango_glyph_string_extents_range (PangoGlyphString *glyphs,
                                                     int start,
                                                     int end,
                                                     PangoFont *font,
                                                     PangoRectangle *ink_rect,
                                                     PangoRectangle *logical_rect);

void pango_glyph_string_get_logical_widths (PangoGlyphString *glyphs,
                                            const char *text,
                                            int length,
                                            int embedding_level,
                                            int *logical_widths);

void pango_glyph_string_index_to_x (PangoGlyphString *glyphs,
                                    char *text,
                                    int length,
                                    PangoAnalysis *analysis,
                                    int index_,
                                    gboolean trailing,
                                    int *x_pos);
void pango_glyph_string_x_to_index (PangoGlyphString *glyphs,
                                    char *text,
                                    int length,
                                    PangoAnalysis *analysis,
                                    int x_pos,
                                    int *index_,
                                    int *trailing);



void pango_shape (const gchar *text,
                  gint length,
                  PangoAnalysis *analysis,
                  PangoGlyphString *glyphs);

GList *pango_reorder_items (GList *logical_items);


# 29 "/usr/include/pango-1.0/pango/pango-engine.h" 2


# 100 "/usr/include/pango-1.0/pango/pango-engine.h"

# 30 "/usr/include/pango-1.0/pango/pango.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-enum-types.h" 1
# 9 "/usr/include/pango-1.0/pango/pango-enum-types.h"




GType pango_attr_type_get_type (void);


GType pango_underline_get_type (void);




GType pango_coverage_level_get_type (void);




GType pango_style_get_type (void);


GType pango_variant_get_type (void);


GType pango_weight_get_type (void);


GType pango_stretch_get_type (void);


GType pango_font_mask_get_type (void);




GType pango_alignment_get_type (void);


GType pango_wrap_mode_get_type (void);




GType pango_tab_align_get_type (void);




GType pango_direction_get_type (void);



# 31 "/usr/include/pango-1.0/pango/pango.h" 2




# 1 "/usr/include/pango-1.0/pango/pango-layout.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-layout.h"
# 1 "/usr/include/pango-1.0/pango/pango-glyph-item.h" 1
# 30 "/usr/include/pango-1.0/pango/pango-glyph-item.h"


typedef struct _PangoGlyphItem PangoGlyphItem;

struct _PangoGlyphItem
{
  PangoItem *item;
  PangoGlyphString *glyphs;
};

PangoGlyphItem *pango_glyph_item_split (PangoGlyphItem *orig,
                                              const char *text,
                                              int split_index);
GSList * pango_glyph_item_apply_attrs (PangoGlyphItem *glyph_item,
                                              const char *text,
                                              PangoAttrList *list);


# 28 "/usr/include/pango-1.0/pango/pango-layout.h" 2
# 1 "/usr/include/pango-1.0/pango/pango-tabs.h" 1
# 27 "/usr/include/pango-1.0/pango/pango-tabs.h"


typedef struct _PangoTabArray PangoTabArray;

typedef enum
{
  PANGO_TAB_LEFT
# 42 "/usr/include/pango-1.0/pango/pango-tabs.h"
} PangoTabAlign;



PangoTabArray *pango_tab_array_new (gint initial_size,
                                                     gboolean positions_in_pixels);
PangoTabArray *pango_tab_array_new_with_positions (gint size,
                                                     gboolean positions_in_pixels,
                                                     PangoTabAlign first_alignment,
                                                     gint first_position,
                                                     ...);
GType pango_tab_array_get_type (void);
PangoTabArray *pango_tab_array_copy (PangoTabArray *src);
void pango_tab_array_free (PangoTabArray *tab_array);
gint pango_tab_array_get_size (PangoTabArray *tab_array);
void pango_tab_array_resize (PangoTabArray *tab_array,
                                                     gint new_size);
void pango_tab_array_set_tab (PangoTabArray *tab_array,
                                                     gint tab_index,
                                                     PangoTabAlign alignment,
                                                     gint location);
void pango_tab_array_get_tab (PangoTabArray *tab_array,
                                                     gint tab_index,
                                                     PangoTabAlign *alignment,
                                                     gint *location);
void pango_tab_array_get_tabs (PangoTabArray *tab_array,
                                                     PangoTabAlign **alignments,
                                                     gint **locations);

gboolean pango_tab_array_get_positions_in_pixels (PangoTabArray *tab_array);



# 29 "/usr/include/pango-1.0/pango/pango-layout.h" 2



typedef struct _PangoLayout PangoLayout;
typedef struct _PangoLayoutClass PangoLayoutClass;
typedef struct _PangoLayoutLine PangoLayoutLine;


typedef PangoGlyphItem PangoLayoutRun;

typedef enum {
  PANGO_ALIGN_LEFT,
  PANGO_ALIGN_CENTER,
  PANGO_ALIGN_RIGHT
} PangoAlignment;

typedef enum {
  PANGO_WRAP_WORD,
  PANGO_WRAP_CHAR,
  PANGO_WRAP_WORD_CHAR
} PangoWrapMode;

struct _PangoLayoutLine
{
  PangoLayout *layout;
  gint start_index;
  gint length;
  GSList *runs;
};
# 71 "/usr/include/pango-1.0/pango/pango-layout.h"
GType pango_layout_get_type (void) ;
PangoLayout *pango_layout_new (PangoContext *context);
PangoLayout *pango_layout_copy (PangoLayout *src);

PangoContext *pango_layout_get_context (PangoLayout *layout);

void pango_layout_set_attributes (PangoLayout *layout,
                                            PangoAttrList *attrs);
PangoAttrList *pango_layout_get_attributes (PangoLayout *layout);

void pango_layout_set_text (PangoLayout *layout,
                                            const char *text,
                                            int length);
const char *pango_layout_get_text (PangoLayout *layout);

void pango_layout_set_markup (PangoLayout *layout,
                                            const char *markup,
                                            int length);

void pango_layout_set_markup_with_accel (PangoLayout *layout,
                                                   const char *markup,
                                                   int length,
                                                   gunichar accel_marker,
                                                   gunichar *accel_char);

void pango_layout_set_font_description (PangoLayout *layout,
                                                  const PangoFontDescription *desc);
void pango_layout_set_width (PangoLayout *layout,
                                                  int width);
int pango_layout_get_width (PangoLayout *layout);
void pango_layout_set_wrap (PangoLayout *layout,
                                                  PangoWrapMode wrap);
PangoWrapMode pango_layout_get_wrap (PangoLayout *layout);
void pango_layout_set_indent (PangoLayout *layout,
                                                  int indent);
int pango_layout_get_indent (PangoLayout *layout);
void pango_layout_set_spacing (PangoLayout *layout,
                                                  int spacing);
int pango_layout_get_spacing (PangoLayout *layout);
void pango_layout_set_justify (PangoLayout *layout,
                                                  gboolean justify);
gboolean pango_layout_get_justify (PangoLayout *layout);
void pango_layout_set_alignment (PangoLayout *layout,
                                                  PangoAlignment alignment);
PangoAlignment pango_layout_get_alignment (PangoLayout *layout);

void pango_layout_set_tabs (PangoLayout *layout,
                                                  PangoTabArray *tabs);

PangoTabArray* pango_layout_get_tabs (PangoLayout *layout);

void pango_layout_set_single_paragraph_mode (PangoLayout *layout,
                                                       gboolean setting);
gboolean pango_layout_get_single_paragraph_mode (PangoLayout *layout);

void pango_layout_context_changed (PangoLayout *layout);

void pango_layout_get_log_attrs (PangoLayout *layout,
                                     PangoLogAttr **attrs,
                                     gint *n_attrs);

void pango_layout_index_to_pos (PangoLayout *layout,
                                            int index_,
                                            PangoRectangle *pos);
void pango_layout_get_cursor_pos (PangoLayout *layout,
                                            int index_,
                                            PangoRectangle *strong_pos,
                                            PangoRectangle *weak_pos);
void pango_layout_move_cursor_visually (PangoLayout *layout,
                                            gboolean strong,
                                            int old_index,
                                            int old_trailing,
                                            int direction,
                                            int *new_index,
                                            int *new_trailing);
gboolean pango_layout_xy_to_index (PangoLayout *layout,
                                            int x,
                                            int y,
                                            int *index_,
                                            int *trailing);
void pango_layout_get_extents (PangoLayout *layout,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);
void pango_layout_get_pixel_extents (PangoLayout *layout,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);
void pango_layout_get_size (PangoLayout *layout,
                                            int *width,
                                            int *height);
void pango_layout_get_pixel_size (PangoLayout *layout,
                                            int *width,
                                            int *height);

int pango_layout_get_line_count (PangoLayout *layout);
PangoLayoutLine *pango_layout_get_line (PangoLayout *layout,
                                                    int line);
GSList * pango_layout_get_lines (PangoLayout *layout);

void pango_layout_line_ref (PangoLayoutLine *line);
void pango_layout_line_unref (PangoLayoutLine *line);
gboolean pango_layout_line_x_to_index (PangoLayoutLine *line,
                                         int x_pos,
                                         int *index_,
                                         int *trailing);
void pango_layout_line_index_to_x (PangoLayoutLine *line,
                                         int index_,
                                         gboolean trailing,
                                         int *x_pos);
void pango_layout_line_get_x_ranges (PangoLayoutLine *line,
                                         int start_index,
                                         int end_index,
                                         int **ranges,
                                         int *n_ranges);
void pango_layout_line_get_extents (PangoLayoutLine *line,
                                         PangoRectangle *ink_rect,
                                         PangoRectangle *logical_rect);
void pango_layout_line_get_pixel_extents (PangoLayoutLine *layout_line,
                                              PangoRectangle *ink_rect,
                                              PangoRectangle *logical_rect);

typedef struct _PangoLayoutIter PangoLayoutIter;

PangoLayoutIter *pango_layout_get_iter (PangoLayout *layout);
void pango_layout_iter_free (PangoLayoutIter *iter);

int pango_layout_iter_get_index (PangoLayoutIter *iter);
PangoLayoutRun *pango_layout_iter_get_run (PangoLayoutIter *iter);
PangoLayoutLine *pango_layout_iter_get_line (PangoLayoutIter *iter);
gboolean pango_layout_iter_at_last_line (PangoLayoutIter *iter);

gboolean pango_layout_iter_next_char (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_cluster (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_run (PangoLayoutIter *iter);
gboolean pango_layout_iter_next_line (PangoLayoutIter *iter);

void pango_layout_iter_get_char_extents (PangoLayoutIter *iter,
                                            PangoRectangle *logical_rect);
void pango_layout_iter_get_cluster_extents (PangoLayoutIter *iter,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);
void pango_layout_iter_get_run_extents (PangoLayoutIter *iter,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);
void pango_layout_iter_get_line_extents (PangoLayoutIter *iter,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);



void pango_layout_iter_get_line_yrange (PangoLayoutIter *iter,
                                            int *y0_,
                                            int *y1_);
void pango_layout_iter_get_layout_extents (PangoLayoutIter *iter,
                                            PangoRectangle *ink_rect,
                                            PangoRectangle *logical_rect);
int pango_layout_iter_get_baseline (PangoLayoutIter *iter);


# 36 "/usr/include/pango-1.0/pango/pango.h" 2
# 34 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2
# 51 "/usr/include/gtk-2.0/gdk/gdktypes.h"
# 1 "/usr/lib/gtk-2.0/include/gdkconfig.h" 1
# 52 "/usr/include/gtk-2.0/gdk/gdktypes.h" 2
# 66 "/usr/include/gtk-2.0/gdk/gdktypes.h"
typedef struct _GdkPoint GdkPoint;
typedef struct _GdkRectangle GdkRectangle;
typedef struct _GdkSegment GdkSegment;
typedef struct _GdkSpan GdkSpan;






typedef guint32 GdkWChar;

typedef struct _GdkAtom *GdkAtom;
# 89 "/usr/include/gtk-2.0/gdk/gdktypes.h"
typedef guint32 GdkNativeWindow;




typedef struct _GdkColor GdkColor;
typedef struct _GdkColormap GdkColormap;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkFont GdkFont;
typedef struct _GdkGC GdkGC;
typedef struct _GdkImage GdkImage;
typedef struct _GdkRegion GdkRegion;
typedef struct _GdkVisual GdkVisual;

typedef struct _GdkDrawable GdkDrawable;
typedef struct _GdkDrawable GdkBitmap;
typedef struct _GdkDrawable GdkPixmap;
typedef struct _GdkDrawable GdkWindow;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;

typedef enum
{
  GDK_LSB_FIRST,
  GDK_MSB_FIRST
} GdkByteOrder;



typedef enum
{
  GDK_SHIFT_MASK = 1 << 0,
  GDK_LOCK_MASK = 1 << 1,
  GDK_CONTROL_MASK = 1 << 2,
  GDK_MOD1_MASK = 1 << 3,
  GDK_MOD2_MASK = 1 << 4,
  GDK_MOD3_MASK = 1 << 5,
  GDK_MOD4_MASK = 1 << 6,
  GDK_MOD5_MASK = 1 << 7,
  GDK_BUTTON1_MASK = 1 << 8,
  GDK_BUTTON2_MASK = 1 << 9,
  GDK_BUTTON3_MASK = 1 << 10,
  GDK_BUTTON4_MASK = 1 << 11,
  GDK_BUTTON5_MASK = 1 << 12,


  GDK_RELEASE_MASK = 1 << 30,
  GDK_MODIFIER_MASK = GDK_RELEASE_MASK | 0x1fff
} GdkModifierType;

typedef enum
{
  GDK_INPUT_READ = 1 << 0,
  GDK_INPUT_WRITE = 1 << 1,
  GDK_INPUT_EXCEPTION = 1 << 2
} GdkInputCondition;

typedef enum
{
  GDK_OK = 0,
  GDK_ERROR = -1,
  GDK_ERROR_PARAM = -2,
  GDK_ERROR_FILE = -3,
  GDK_ERROR_MEM = -4
} GdkStatus;





typedef enum
{
  GDK_GRAB_SUCCESS = 0,
  GDK_GRAB_ALREADY_GRABBED = 1,
  GDK_GRAB_INVALID_TIME = 2,
  GDK_GRAB_NOT_VIEWABLE = 3,
  GDK_GRAB_FROZEN = 4
} GdkGrabStatus;

typedef void (*GdkInputFunction) (gpointer data,
                                  gint source,
                                  GdkInputCondition condition);

typedef void (*GdkDestroyNotify) (gpointer data);

struct _GdkPoint
{
  gint x;
  gint y;
};

struct _GdkRectangle
{
  gint x;
  gint y;
  gint width;
  gint height;
};

struct _GdkSegment
{
  gint x1;
  gint y1;
  gint x2;
  gint y2;
};

struct _GdkSpan
{
  gint x;
  gint y;
  gint width;
};
# 5 "/usr/include/gtk-2.0/gdk/gdkcolor.h" 2
# 17 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColor
{
  guint32 pixel;
  guint16 red;
  guint16 green;
  guint16 blue;
};




typedef struct _GdkColormapClass GdkColormapClass;
# 39 "/usr/include/gtk-2.0/gdk/gdkcolor.h"
struct _GdkColormap
{
  GObject parent_instance;


  gint size;
  GdkColor *colors;


  GdkVisual *visual;

  gpointer windowing_data;
};

struct _GdkColormapClass
{
  GObjectClass parent_class;

};

GType gdk_colormap_get_type (void) ;

GdkColormap* gdk_colormap_new (GdkVisual *visual,
                                   gboolean allocate);


GdkColormap* gdk_colormap_ref (GdkColormap *cmap);
void gdk_colormap_unref (GdkColormap *cmap);



GdkColormap* gdk_colormap_get_system (void);


GdkScreen *gdk_colormap_get_screen (GdkColormap *cmap);


gint gdk_colormap_get_system_size (void);




void gdk_colormap_change (GdkColormap *colormap,
                          gint ncolors);


gint gdk_colormap_alloc_colors (GdkColormap *colormap,
                                   GdkColor *colors,
                                   gint ncolors,
                                   gboolean writeable,
                                   gboolean best_match,
                                   gboolean *success);
gboolean gdk_colormap_alloc_color (GdkColormap *colormap,
                                   GdkColor *color,
                                   gboolean writeable,
                                   gboolean best_match);
void gdk_colormap_free_colors (GdkColormap *colormap,
                                   GdkColor *colors,
                                   gint ncolors);
void gdk_colormap_query_color (GdkColormap *colormap,
                                   gulong pixel,
                                   GdkColor *result);

GdkVisual *gdk_colormap_get_visual (GdkColormap *colormap);

GdkColor *gdk_color_copy (const GdkColor *color);
void gdk_color_free (GdkColor *color);
gint gdk_color_parse (const gchar *spec,
                           GdkColor *color);
guint gdk_color_hash (const GdkColor *colora);
gboolean gdk_color_equal (const GdkColor *colora,
                           const GdkColor *colorb);

GType gdk_color_get_type (void);



void gdk_colors_store (GdkColormap *colormap,
                          GdkColor *colors,
                          gint ncolors);
gint gdk_color_white (GdkColormap *colormap,
                          GdkColor *color);
gint gdk_color_black (GdkColormap *colormap,
                          GdkColor *color);
gint gdk_color_alloc (GdkColormap *colormap,
                          GdkColor *color);
gint gdk_color_change (GdkColormap *colormap,
                          GdkColor *color);




gint gdk_colors_alloc (GdkColormap *colormap,
                          gboolean contiguous,
                          gulong *planes,
                          gint nplanes,
                          gulong *pixels,
                          gint npixels);
void gdk_colors_free (GdkColormap *colormap,
                          gulong *pixels,
                          gint npixels,
                          gulong planes);
# 31 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkcursor.h" 1
# 14 "/usr/include/gtk-2.0/gdk/gdkcursor.h"
typedef enum
{
  GDK_X_CURSOR = 0,
  GDK_ARROW = 2,
  GDK_BASED_ARROW_DOWN = 4,
  GDK_BASED_ARROW_UP = 6,
  GDK_BOAT = 8,
  GDK_BOGOSITY = 10,
  GDK_BOTTOM_LEFT_CORNER = 12,
  GDK_BOTTOM_RIGHT_CORNER = 14,
  GDK_BOTTOM_SIDE = 16,
  GDK_BOTTOM_TEE = 18,
  GDK_BOX_SPIRAL = 20,
  GDK_CENTER_PTR = 22,
  GDK_CIRCLE = 24,
  GDK_CLOCK = 26,
  GDK_COFFEE_MUG = 28,
  GDK_CROSS = 30,
  GDK_CROSS_REVERSE = 32,
  GDK_CROSSHAIR = 34,
  GDK_DIAMOND_CROSS = 36,
  GDK_DOT = 38,
  GDK_DOTBOX = 40,
  GDK_DOUBLE_ARROW = 42,
  GDK_DRAFT_LARGE = 44,
  GDK_DRAFT_SMALL = 46,
  GDK_DRAPED_BOX = 48,
  GDK_EXCHANGE = 50,
  GDK_FLEUR = 52,
  GDK_GOBBLER = 54,
  GDK_GUMBY = 56,
  GDK_HAND1 = 58,
  GDK_HAND2 = 60,
  GDK_HEART = 62,
  GDK_ICON = 64,
  GDK_IRON_CROSS = 66,
  GDK_LEFT_PTR = 68,
  GDK_LEFT_SIDE = 70,
  GDK_LEFT_TEE = 72,
  GDK_LEFTBUTTON = 74,
  GDK_LL_ANGLE = 76,
  GDK_LR_ANGLE = 78,
  GDK_MAN = 80,
  GDK_MIDDLEBUTTON = 82,
  GDK_MOUSE = 84,
  GDK_PENCIL = 86,
  GDK_PIRATE = 88,
  GDK_PLUS = 90,
  GDK_QUESTION_ARROW = 92,
  GDK_RIGHT_PTR = 94,
  GDK_RIGHT_SIDE = 96,
  GDK_RIGHT_TEE = 98,
  GDK_RIGHTBUTTON = 100,
  GDK_RTL_LOGO = 102,
  GDK_SAILBOAT = 104,
  GDK_SB_DOWN_ARROW = 106,
  GDK_SB_H_DOUBLE_ARROW = 108,
  GDK_SB_LEFT_ARROW = 110,
  GDK_SB_RIGHT_ARROW = 112,
  GDK_SB_UP_ARROW = 114,
  GDK_SB_V_DOUBLE_ARROW = 116,
  GDK_SHUTTLE = 118,
  GDK_SIZING = 120,
  GDK_SPIDER = 122,
  GDK_SPRAYCAN = 124,
  GDK_STAR = 126,
  GDK_TARGET = 128,
  GDK_TCROSS = 130,
  GDK_TOP_LEFT_ARROW = 132,
  GDK_TOP_LEFT_CORNER = 134,
  GDK_TOP_RIGHT_CORNER = 136,
  GDK_TOP_SIDE = 138,
  GDK_TOP_TEE = 140,
  GDK_TREK = 142,
  GDK_UL_ANGLE = 144,
  GDK_UMBRELLA = 146,
  GDK_UR_ANGLE = 148,
  GDK_WATCH = 150,
  GDK_XTERM = 152,
  GDK_LAST_CURSOR,
  GDK_CURSOR_IS_PIXMAP = -1
} GdkCursorType;

struct _GdkCursor
{
  GdkCursorType type;
  guint ref_count;
};




GType gdk_cursor_get_type (void);

GdkCursor* gdk_cursor_new_for_display (GdkDisplay *display,
                                          GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new (GdkCursorType cursor_type);

GdkCursor* gdk_cursor_new_from_pixmap (GdkPixmap *source,
                                          GdkPixmap *mask,
                                          GdkColor *fg,
                                          GdkColor *bg,
                                          gint x,
                                          gint y);
GdkDisplay* gdk_cursor_get_display (GdkCursor *cursor);
GdkCursor* gdk_cursor_ref (GdkCursor *cursor);
void gdk_cursor_unref (GdkCursor *cursor);
# 32 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 1
# 28 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
# 1 "/usr/include/gtk-2.0/gdk/gdkevents.h" 1





# 1 "/usr/include/gtk-2.0/gdk/gdkdnd.h" 1
# 10 "/usr/include/gtk-2.0/gdk/gdkdnd.h"
typedef struct _GdkDragContext GdkDragContext;

typedef enum
{
  GDK_ACTION_DEFAULT = 1 << 0,
  GDK_ACTION_COPY = 1 << 1,
  GDK_ACTION_MOVE = 1 << 2,
  GDK_ACTION_LINK = 1 << 3,
  GDK_ACTION_PRIVATE = 1 << 4,
  GDK_ACTION_ASK = 1 << 5
} GdkDragAction;

typedef enum
{
  GDK_DRAG_PROTO_MOTIF,
  GDK_DRAG_PROTO_XDND,
  GDK_DRAG_PROTO_ROOTWIN,

  GDK_DRAG_PROTO_NONE,
  GDK_DRAG_PROTO_WIN32_DROPFILES,
  GDK_DRAG_PROTO_OLE2,
  GDK_DRAG_PROTO_LOCAL
} GdkDragProtocol;





typedef struct _GdkDragContextClass GdkDragContextClass;
# 47 "/usr/include/gtk-2.0/gdk/gdkdnd.h"
struct _GdkDragContext {
  GObject parent_instance;



  GdkDragProtocol protocol;

  gboolean is_source;

  GdkWindow *source_window;
  GdkWindow *dest_window;

  GList *targets;
  GdkDragAction actions;
  GdkDragAction suggested_action;
  GdkDragAction action;

  guint32 start_time;



  gpointer windowing_data;
};

struct _GdkDragContextClass {
  GObjectClass parent_class;


};



GType gdk_drag_context_get_type (void) ;
GdkDragContext * gdk_drag_context_new (void);


void gdk_drag_context_ref (GdkDragContext *context);
void gdk_drag_context_unref (GdkDragContext *context);




void gdk_drag_status (GdkDragContext *context,
                                         GdkDragAction action,
                                         guint32 time_);
void gdk_drop_reply (GdkDragContext *context,
                                         gboolean ok,
                                         guint32 time_);
void gdk_drop_finish (GdkDragContext *context,
                                         gboolean success,
                                         guint32 time_);
GdkAtom gdk_drag_get_selection (GdkDragContext *context);



GdkDragContext * gdk_drag_begin (GdkWindow *window,
                                      GList *targets);

guint32 gdk_drag_get_protocol_for_display (GdkDisplay *display,
                                           guint32 xid,
                                           GdkDragProtocol *protocol);
void gdk_drag_find_window_for_screen (GdkDragContext *context,
                                           GdkWindow *drag_window,
                                           GdkScreen *screen,
                                           gint x_root,
                                           gint y_root,
                                           GdkWindow **dest_window,
                                           GdkDragProtocol *protocol);


guint32 gdk_drag_get_protocol (guint32 xid,
                               GdkDragProtocol *protocol);
void gdk_drag_find_window (GdkDragContext *context,
                               GdkWindow *drag_window,
                               gint x_root,
                               gint y_root,
                               GdkWindow **dest_window,
                               GdkDragProtocol *protocol);


gboolean gdk_drag_motion (GdkDragContext *context,
                                      GdkWindow *dest_window,
                                      GdkDragProtocol protocol,
                                      gint x_root,
                                      gint y_root,
                                      GdkDragAction suggested_action,
                                      GdkDragAction possible_actions,
                                      guint32 time_);
void gdk_drag_drop (GdkDragContext *context,
                                      guint32 time_);
void gdk_drag_abort (GdkDragContext *context,
                                      guint32 time_);
# 7 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkinput.h" 1
# 17 "/usr/include/gtk-2.0/gdk/gdkinput.h"
typedef struct _GdkDeviceKey GdkDeviceKey;
typedef struct _GdkDeviceAxis GdkDeviceAxis;
typedef struct _GdkDevice GdkDevice;
typedef struct _GdkDeviceClass GdkDeviceClass;
typedef struct _GdkTimeCoord GdkTimeCoord;

typedef enum
{
  GDK_EXTENSION_EVENTS_NONE,
  GDK_EXTENSION_EVENTS_ALL,
  GDK_EXTENSION_EVENTS_CURSOR
} GdkExtensionMode;

typedef enum
{
  GDK_SOURCE_MOUSE,
  GDK_SOURCE_PEN,
  GDK_SOURCE_ERASER,
  GDK_SOURCE_CURSOR
} GdkInputSource;

typedef enum
{
  GDK_MODE_DISABLED,
  GDK_MODE_SCREEN,
  GDK_MODE_WINDOW
} GdkInputMode;

typedef enum
{
  GDK_AXIS_IGNORE,
  GDK_AXIS_X,
  GDK_AXIS_Y,
  GDK_AXIS_PRESSURE,
  GDK_AXIS_XTILT,
  GDK_AXIS_YTILT,
  GDK_AXIS_WHEEL,
  GDK_AXIS_LAST
} GdkAxisUse;

struct _GdkDeviceKey
{
  guint keyval;
  GdkModifierType modifiers;
};

struct _GdkDeviceAxis
{
  GdkAxisUse use;
  gdouble min;
  gdouble max;
};

struct _GdkDevice
{
  GObject parent_instance;


  gchar *name;
  GdkInputSource source;
  GdkInputMode mode;
  gboolean has_cursor;

  gint num_axes;
  GdkDeviceAxis *axes;

  gint num_keys;
  GdkDeviceKey *keys;
};






struct _GdkTimeCoord
{
  guint32 time;
  gdouble axes[128];
};

GType gdk_device_get_type (void);



GList * gdk_devices_list (void);



void gdk_device_set_source (GdkDevice *device,
                                         GdkInputSource source);

gboolean gdk_device_set_mode (GdkDevice *device,
                                         GdkInputMode mode);

void gdk_device_set_key (GdkDevice *device,
                                         guint index_,
                                         guint keyval,
                                         GdkModifierType modifiers);

void gdk_device_set_axis_use (GdkDevice *device,
                                  guint index_,
                                  GdkAxisUse use);
void gdk_device_get_state (GdkDevice *device,
                                  GdkWindow *window,
                                  gdouble *axes,
                                  GdkModifierType *mask);
gboolean gdk_device_get_history (GdkDevice *device,
                                  GdkWindow *window,
                                  guint32 start,
                                  guint32 stop,
                                  GdkTimeCoord ***events,
                                  gint *n_events);
void gdk_device_free_history (GdkTimeCoord **events,
                                  gint n_events);
gboolean gdk_device_get_axis (GdkDevice *device,
                                  gdouble *axes,
                                  GdkAxisUse use,
                                  gdouble *value);

void gdk_input_set_extension_events (GdkWindow *window,
                                     gint mask,
                                     GdkExtensionMode mode);


GdkDevice *gdk_device_get_core_pointer (void);
# 8 "/usr/include/gtk-2.0/gdk/gdkevents.h" 2
# 19 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef struct _GdkEventAny GdkEventAny;
typedef struct _GdkEventExpose GdkEventExpose;
typedef struct _GdkEventNoExpose GdkEventNoExpose;
typedef struct _GdkEventVisibility GdkEventVisibility;
typedef struct _GdkEventMotion GdkEventMotion;
typedef struct _GdkEventButton GdkEventButton;
typedef struct _GdkEventScroll GdkEventScroll;
typedef struct _GdkEventKey GdkEventKey;
typedef struct _GdkEventFocus GdkEventFocus;
typedef struct _GdkEventCrossing GdkEventCrossing;
typedef struct _GdkEventConfigure GdkEventConfigure;
typedef struct _GdkEventProperty GdkEventProperty;
typedef struct _GdkEventSelection GdkEventSelection;
typedef struct _GdkEventProximity GdkEventProximity;
typedef struct _GdkEventClient GdkEventClient;
typedef struct _GdkEventDND GdkEventDND;
typedef struct _GdkEventWindowState GdkEventWindowState;
typedef struct _GdkEventSetting GdkEventSetting;

typedef union _GdkEvent GdkEvent;

typedef void (*GdkEventFunc) (GdkEvent *event,
                              gpointer data);



typedef void GdkXEvent;



typedef enum {
  GDK_FILTER_CONTINUE,
  GDK_FILTER_TRANSLATE,


  GDK_FILTER_REMOVE
} GdkFilterReturn;

typedef GdkFilterReturn (*GdkFilterFunc) (GdkXEvent *xevent,
                                          GdkEvent *event,
                                          gpointer data);
# 85 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTHING = -1,
  GDK_DELETE = 0,
  GDK_DESTROY = 1,
  GDK_EXPOSE = 2,
  GDK_MOTION_NOTIFY = 3,
  GDK_BUTTON_PRESS = 4,
  GDK_2BUTTON_PRESS = 5,
  GDK_3BUTTON_PRESS = 6,
  GDK_BUTTON_RELEASE = 7,
  GDK_KEY_PRESS = 8,
  GDK_KEY_RELEASE = 9,
  GDK_ENTER_NOTIFY = 10,
  GDK_LEAVE_NOTIFY = 11,
  GDK_FOCUS_CHANGE = 12,
  GDK_CONFIGURE = 13,
  GDK_MAP = 14,
  GDK_UNMAP = 15,
  GDK_PROPERTY_NOTIFY = 16,
  GDK_SELECTION_CLEAR = 17,
  GDK_SELECTION_REQUEST = 18,
  GDK_SELECTION_NOTIFY = 19,
  GDK_PROXIMITY_IN = 20,
  GDK_PROXIMITY_OUT = 21,
  GDK_DRAG_ENTER = 22,
  GDK_DRAG_LEAVE = 23,
  GDK_DRAG_MOTION = 24,
  GDK_DRAG_STATUS = 25,
  GDK_DROP_START = 26,
  GDK_DROP_FINISHED = 27,
  GDK_CLIENT_EVENT = 28,
  GDK_VISIBILITY_NOTIFY = 29,
  GDK_NO_EXPOSE = 30,
  GDK_SCROLL = 31,
  GDK_WINDOW_STATE = 32,
  GDK_SETTING = 33
} GdkEventType;




typedef enum
{
  GDK_EXPOSURE_MASK = 1 << 1,
  GDK_POINTER_MOTION_MASK = 1 << 2,
  GDK_POINTER_MOTION_HINT_MASK = 1 << 3,
  GDK_BUTTON_MOTION_MASK = 1 << 4,
  GDK_BUTTON1_MOTION_MASK = 1 << 5,
  GDK_BUTTON2_MOTION_MASK = 1 << 6,
  GDK_BUTTON3_MOTION_MASK = 1 << 7,
  GDK_BUTTON_PRESS_MASK = 1 << 8,
  GDK_BUTTON_RELEASE_MASK = 1 << 9,
  GDK_KEY_PRESS_MASK = 1 << 10,
  GDK_KEY_RELEASE_MASK = 1 << 11,
  GDK_ENTER_NOTIFY_MASK = 1 << 12,
  GDK_LEAVE_NOTIFY_MASK = 1 << 13,
  GDK_FOCUS_CHANGE_MASK = 1 << 14,
  GDK_STRUCTURE_MASK = 1 << 15,
  GDK_PROPERTY_CHANGE_MASK = 1 << 16,
  GDK_VISIBILITY_NOTIFY_MASK = 1 << 17,
  GDK_PROXIMITY_IN_MASK = 1 << 18,
  GDK_PROXIMITY_OUT_MASK = 1 << 19,
  GDK_SUBSTRUCTURE_MASK = 1 << 20,
  GDK_SCROLL_MASK = 1 << 21,
  GDK_ALL_EVENTS_MASK = 0x3FFFFE
} GdkEventMask;

typedef enum
{
  GDK_VISIBILITY_UNOBSCURED,
  GDK_VISIBILITY_PARTIAL,
  GDK_VISIBILITY_FULLY_OBSCURED
} GdkVisibilityState;

typedef enum
{
  GDK_SCROLL_UP,
  GDK_SCROLL_DOWN,
  GDK_SCROLL_LEFT,
  GDK_SCROLL_RIGHT
} GdkScrollDirection;
# 176 "/usr/include/gtk-2.0/gdk/gdkevents.h"
typedef enum
{
  GDK_NOTIFY_ANCESTOR = 0,
  GDK_NOTIFY_VIRTUAL = 1,
  GDK_NOTIFY_INFERIOR = 2,
  GDK_NOTIFY_NONLINEAR = 3,
  GDK_NOTIFY_NONLINEAR_VIRTUAL = 4,
  GDK_NOTIFY_UNKNOWN = 5
} GdkNotifyType;






typedef enum
{
  GDK_CROSSING_NORMAL,
  GDK_CROSSING_GRAB,
  GDK_CROSSING_UNGRAB
} GdkCrossingMode;

typedef enum
{
  GDK_PROPERTY_NEW_VALUE,
  GDK_PROPERTY_DELETE
} GdkPropertyState;

typedef enum
{
  GDK_WINDOW_STATE_WITHDRAWN = 1 << 0,
  GDK_WINDOW_STATE_ICONIFIED = 1 << 1,
  GDK_WINDOW_STATE_MAXIMIZED = 1 << 2,
  GDK_WINDOW_STATE_STICKY = 1 << 3,
  GDK_WINDOW_STATE_FULLSCREEN = 1 << 4
} GdkWindowState;

typedef enum
{
  GDK_SETTING_ACTION_NEW,
  GDK_SETTING_ACTION_CHANGED,
  GDK_SETTING_ACTION_DELETED
} GdkSettingAction;

struct _GdkEventAny
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkRectangle area;
  GdkRegion *region;
  gint count;
};

struct _GdkEventNoExpose
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
};

struct _GdkEventVisibility
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkVisibilityState state;
};

struct _GdkEventMotion
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  gint16 is_hint;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventButton
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble *axes;
  guint state;
  guint button;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventScroll
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  gdouble x;
  gdouble y;
  guint state;
  GdkScrollDirection direction;
  GdkDevice *device;
  gdouble x_root, y_root;
};

struct _GdkEventKey
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 hardware_keycode;
  guint8 group;
};

struct _GdkEventCrossing
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindow *subwindow;
  guint32 time;
  gdouble x;
  gdouble y;
  gdouble x_root;
  gdouble y_root;
  GdkCrossingMode mode;
  GdkNotifyType detail;
  gboolean focus;
  guint state;
};

struct _GdkEventFocus
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint16 in;
};

struct _GdkEventConfigure
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  gint x, y;
  gint width;
  gint height;
};

struct _GdkEventProperty
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom atom;
  guint32 time;
  guint state;
};

struct _GdkEventSelection
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom selection;
  GdkAtom target;
  GdkAtom property;
  guint32 time;
  GdkNativeWindow requestor;
};




struct _GdkEventProximity
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  guint32 time;
  GdkDevice *device;
};

struct _GdkEventClient
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkAtom message_type;
  gushort data_format;
  union {
    char b[20];
    short s[10];
    long l[5];
  } data;
};

struct _GdkEventSetting
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkSettingAction action;
  char *name;
};

struct _GdkEventWindowState
{
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkWindowState changed_mask;
  GdkWindowState new_window_state;
};



struct _GdkEventDND {
  GdkEventType type;
  GdkWindow *window;
  gint8 send_event;
  GdkDragContext *context;

  guint32 time;
  gshort x_root, y_root;
};

union _GdkEvent
{
  GdkEventType type;
  GdkEventAny any;
  GdkEventExpose expose;
  GdkEventNoExpose no_expose;
  GdkEventVisibility visibility;
  GdkEventMotion motion;
  GdkEventButton button;
  GdkEventScroll scroll;
  GdkEventKey key;
  GdkEventCrossing crossing;
  GdkEventFocus focus_change;
  GdkEventConfigure configure;
  GdkEventProperty property;
  GdkEventSelection selection;
  GdkEventProximity proximity;
  GdkEventClient client;
  GdkEventDND dnd;
  GdkEventWindowState window_state;
  GdkEventSetting setting;
};

GType gdk_event_get_type (void);

gboolean gdk_events_pending (void);
GdkEvent* gdk_event_get (void);

GdkEvent* gdk_event_peek (void);
GdkEvent* gdk_event_get_graphics_expose (GdkWindow *window);
void gdk_event_put (GdkEvent *event);

GdkEvent* gdk_event_new (GdkEventType type);
GdkEvent* gdk_event_copy (GdkEvent *event);
void gdk_event_free (GdkEvent *event);

guint32 gdk_event_get_time (GdkEvent *event);
gboolean gdk_event_get_state (GdkEvent *event,
                                         GdkModifierType *state);
gboolean gdk_event_get_coords (GdkEvent *event,
                                         gdouble *x_win,
                                         gdouble *y_win);
gboolean gdk_event_get_root_coords (GdkEvent *event,
                                         gdouble *x_root,
                                         gdouble *y_root);
gboolean gdk_event_get_axis (GdkEvent *event,
                                         GdkAxisUse axis_use,
                                         gdouble *value);
void gdk_event_handler_set (GdkEventFunc func,
                                         gpointer data,
                                         GDestroyNotify notify);

void gdk_event_set_screen (GdkEvent *event,
                                 GdkScreen *screen);
GdkScreen *gdk_event_get_screen (GdkEvent *event);

void gdk_set_show_events (gboolean show_events);
gboolean gdk_get_show_events (void);


void gdk_add_client_message_filter (GdkAtom message_type,
                                    GdkFilterFunc func,
                                    gpointer data);

gboolean gdk_setting_get (const gchar *name,
                          GValue *value);
# 29 "/usr/include/gtk-2.0/gdk/gdkdisplay.h" 2




typedef struct _GdkDisplayClass GdkDisplayClass;
typedef struct _GdkDisplayPointerHooks GdkDisplayPointerHooks;
# 44 "/usr/include/gtk-2.0/gdk/gdkdisplay.h"
struct _GdkDisplay
{
  GObject parent_instance;


  GList *queued_events;
  GList *queued_tail;




  guint32 button_click_time[2];
  GdkWindow *button_window[2];
  gint button_number[2];

  guint double_click_time;
  GdkDevice *core_pointer;

  const GdkDisplayPointerHooks *pointer_hooks;

  guint closed : 1;
};

struct _GdkDisplayClass
{
  GObjectClass parent_class;

  const gchar * (*get_display_name) (GdkDisplay *display);
  gint (*get_n_screens) (GdkDisplay *display);
  GdkScreen * (*get_screen) (GdkDisplay *display,
                                                    gint screen_num);
  GdkScreen * (*get_default_screen) (GdkDisplay *display);



  void (*closed) (GdkDisplay *display,
                  gboolean is_error);
};

struct _GdkDisplayPointerHooks
{
  void (*get_pointer) (GdkDisplay *display,
                                    GdkScreen **screen,
                                    gint *x,
                                    gint *y,
                                    GdkModifierType *mask);
  GdkWindow* (*window_get_pointer) (GdkDisplay *display,
                                    GdkWindow *window,
                                    gint *x,
                                    gint *y,
                                    GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkDisplay *display,
                                    gint *win_x,
                                    gint *win_y);
};

GType gdk_display_get_type (void);
GdkDisplay *gdk_display_open (const gchar *display_name);

const gchar * gdk_display_get_name (GdkDisplay *display);

gint gdk_display_get_n_screens (GdkDisplay *display);
GdkScreen * gdk_display_get_screen (GdkDisplay *display,
                                            gint screen_num);
GdkScreen * gdk_display_get_default_screen (GdkDisplay *display);
void gdk_display_pointer_ungrab (GdkDisplay *display,
                                            guint32 time_);
void gdk_display_keyboard_ungrab (GdkDisplay *display,
                                            guint32 time_);
gboolean gdk_display_pointer_is_grabbed (GdkDisplay *display);
void gdk_display_beep (GdkDisplay *display);
void gdk_display_sync (GdkDisplay *display);
void gdk_display_close (GdkDisplay *display);

GList * gdk_display_list_devices (GdkDisplay *display);

GdkEvent* gdk_display_get_event (GdkDisplay *display);
GdkEvent* gdk_display_peek_event (GdkDisplay *display);
void gdk_display_put_event (GdkDisplay *display,
                                  GdkEvent *event);

void gdk_display_add_client_message_filter (GdkDisplay *display,
                                            GdkAtom message_type,
                                            GdkFilterFunc func,
                                            gpointer data);

void gdk_display_set_double_click_time (GdkDisplay *display,
                                        guint msec);

GdkDisplay *gdk_display_get_default (void);

GdkDevice *gdk_display_get_core_pointer (GdkDisplay *display);

void gdk_display_get_pointer (GdkDisplay *display,
                                                    GdkScreen **screen,
                                                    gint *x,
                                                    gint *y,
                                                    GdkModifierType *mask);
GdkWindow * gdk_display_get_window_at_pointer (GdkDisplay *display,
                                                    gint *win_x,
                                                    gint *win_y);

GdkDisplayPointerHooks *gdk_display_set_pointer_hooks (GdkDisplay *display,
                                                       const GdkDisplayPointerHooks *new_hooks);

GdkDisplay *gdk_display_open_default_libgtk_only (void);


# 33 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 1




# 1 "/usr/include/gtk-2.0/gdk/gdkgc.h" 1
# 11 "/usr/include/gtk-2.0/gdk/gdkgc.h"
typedef struct _GdkGCValues GdkGCValues;
typedef struct _GdkGCClass GdkGCClass;







typedef enum
{
  GDK_CAP_NOT_LAST,
  GDK_CAP_BUTT,
  GDK_CAP_ROUND,
  GDK_CAP_PROJECTING
} GdkCapStyle;







typedef enum
{
  GDK_SOLID,
  GDK_TILED,
  GDK_STIPPLED,
  GDK_OPAQUE_STIPPLED
} GdkFill;
# 60 "/usr/include/gtk-2.0/gdk/gdkgc.h"
typedef enum
{
  GDK_COPY,
  GDK_INVERT,
  GDK_XOR,
  GDK_CLEAR,
  GDK_AND,
  GDK_AND_REVERSE,
  GDK_AND_INVERT,
  GDK_NOOP,
  GDK_OR,
  GDK_EQUIV,
  GDK_OR_REVERSE,
  GDK_COPY_INVERT,
  GDK_OR_INVERT,
  GDK_NAND,
  GDK_NOR,
  GDK_SET
} GdkFunction;






typedef enum
{
  GDK_JOIN_MITER,
  GDK_JOIN_ROUND,
  GDK_JOIN_BEVEL
} GdkJoinStyle;






typedef enum
{
  GDK_LINE_SOLID,
  GDK_LINE_ON_OFF_DASH,
  GDK_LINE_DOUBLE_DASH
} GdkLineStyle;

typedef enum
{
  GDK_CLIP_BY_CHILDREN = 0,
  GDK_INCLUDE_INFERIORS = 1
} GdkSubwindowMode;

typedef enum
{
  GDK_GC_FOREGROUND = 1 << 0,
  GDK_GC_BACKGROUND = 1 << 1,
  GDK_GC_FONT = 1 << 2,
  GDK_GC_FUNCTION = 1 << 3,
  GDK_GC_FILL = 1 << 4,
  GDK_GC_TILE = 1 << 5,
  GDK_GC_STIPPLE = 1 << 6,
  GDK_GC_CLIP_MASK = 1 << 7,
  GDK_GC_SUBWINDOW = 1 << 8,
  GDK_GC_TS_X_ORIGIN = 1 << 9,
  GDK_GC_TS_Y_ORIGIN = 1 << 10,
  GDK_GC_CLIP_X_ORIGIN = 1 << 11,
  GDK_GC_CLIP_Y_ORIGIN = 1 << 12,
  GDK_GC_EXPOSURES = 1 << 13,
  GDK_GC_LINE_WIDTH = 1 << 14,
  GDK_GC_LINE_STYLE = 1 << 15,
  GDK_GC_CAP_STYLE = 1 << 16,
  GDK_GC_JOIN_STYLE = 1 << 17
} GdkGCValuesMask;

struct _GdkGCValues
{
  GdkColor foreground;
  GdkColor background;
  GdkFont *font;
  GdkFunction function;
  GdkFill fill;
  GdkPixmap *tile;
  GdkPixmap *stipple;
  GdkPixmap *clip_mask;
  GdkSubwindowMode subwindow_mode;
  gint ts_x_origin;
  gint ts_y_origin;
  gint clip_x_origin;
  gint clip_y_origin;
  gint graphics_exposures;
  gint line_width;
  GdkLineStyle line_style;
  GdkCapStyle cap_style;
  GdkJoinStyle join_style;
};
# 161 "/usr/include/gtk-2.0/gdk/gdkgc.h"
struct _GdkGC
{
  GObject parent_instance;

  gint clip_x_origin;
  gint clip_y_origin;
  gint ts_x_origin;
  gint ts_y_origin;

  GdkColormap *colormap;
};

struct _GdkGCClass
{
  GObjectClass parent_class;

  void (*get_values) (GdkGC *gc,
                          GdkGCValues *values);
  void (*set_values) (GdkGC *gc,
                          GdkGCValues *values,
                          GdkGCValuesMask mask);
  void (*set_dashes) (GdkGC *gc,
                          gint dash_offset,
                          gint8 dash_list[],
                          gint n);


  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
};


GType gdk_gc_get_type (void) ;
GdkGC *gdk_gc_new (GdkDrawable *drawable);
GdkGC *gdk_gc_new_with_values (GdkDrawable *drawable,
                                   GdkGCValues *values,
                                   GdkGCValuesMask values_mask);


GdkGC *gdk_gc_ref (GdkGC *gc);
void gdk_gc_unref (GdkGC *gc);


void gdk_gc_get_values (GdkGC *gc,
                                   GdkGCValues *values);
void gdk_gc_set_values (GdkGC *gc,
                                   GdkGCValues *values,
                                   GdkGCValuesMask values_mask);
void gdk_gc_set_foreground (GdkGC *gc,
                                   GdkColor *color);
void gdk_gc_set_background (GdkGC *gc,
                                   GdkColor *color);

void gdk_gc_set_font (GdkGC *gc,
                                   GdkFont *font);

void gdk_gc_set_function (GdkGC *gc,
                                   GdkFunction function);
void gdk_gc_set_fill (GdkGC *gc,
                                   GdkFill fill);
void gdk_gc_set_tile (GdkGC *gc,
                                   GdkPixmap *tile);
void gdk_gc_set_stipple (GdkGC *gc,
                                   GdkPixmap *stipple);
void gdk_gc_set_ts_origin (GdkGC *gc,
                                   gint x,
                                   gint y);
void gdk_gc_set_clip_origin (GdkGC *gc,
                                   gint x,
                                   gint y);
void gdk_gc_set_clip_mask (GdkGC *gc,
                                   GdkBitmap *mask);
void gdk_gc_set_clip_rectangle (GdkGC *gc,
                                   GdkRectangle *rectangle);
void gdk_gc_set_clip_region (GdkGC *gc,
                                   GdkRegion *region);
void gdk_gc_set_subwindow (GdkGC *gc,
                                   GdkSubwindowMode mode);
void gdk_gc_set_exposures (GdkGC *gc,
                                   gboolean exposures);
void gdk_gc_set_line_attributes (GdkGC *gc,
                                   gint line_width,
                                   GdkLineStyle line_style,
                                   GdkCapStyle cap_style,
                                   GdkJoinStyle join_style);
void gdk_gc_set_dashes (GdkGC *gc,
                                   gint dash_offset,
                                   gint8 dash_list[],
                                   gint n);
void gdk_gc_offset (GdkGC *gc,
                                   gint x_offset,
                                   gint y_offset);
void gdk_gc_copy (GdkGC *dst_gc,
                                   GdkGC *src_gc);


void gdk_gc_set_colormap (GdkGC *gc,
                                      GdkColormap *colormap);
GdkColormap *gdk_gc_get_colormap (GdkGC *gc);
void gdk_gc_set_rgb_fg_color (GdkGC *gc,
                                      GdkColor *color);
void gdk_gc_set_rgb_bg_color (GdkGC *gc,
                                      GdkColor *color);
GdkScreen * gdk_gc_get_screen (GdkGC *gc);
# 6 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkrgb.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkrgb.h"
typedef struct _GdkRgbCmap GdkRgbCmap;

struct _GdkRgbCmap {
  guint32 colors[256];
  gint n_colors;


  GSList *info_list;
};


void gdk_rgb_init (void);

gulong gdk_rgb_xpixel_from_rgb (guint32 rgb) ;
void gdk_rgb_gc_set_foreground (GdkGC *gc,
                                  guint32 rgb);
void gdk_rgb_gc_set_background (GdkGC *gc,
                                  guint32 rgb);



void gdk_rgb_find_color (GdkColormap *colormap,
                                  GdkColor *color);

typedef enum
{
  GDK_RGB_DITHER_NONE,
  GDK_RGB_DITHER_NORMAL,
  GDK_RGB_DITHER_MAX
} GdkRgbDither;

void gdk_draw_rgb_image (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *rgb_buf,
                                             gint rowstride);
void gdk_draw_rgb_image_dithalign (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *rgb_buf,
                                             gint rowstride,
                                             gint xdith,
                                             gint ydith);
void gdk_draw_rgb_32_image (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *buf,
                                             gint rowstride);
void gdk_draw_rgb_32_image_dithalign (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *buf,
                                             gint rowstride,
                                             gint xdith,
                                             gint ydith);
void gdk_draw_gray_image (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *buf,
                                             gint rowstride);
void gdk_draw_indexed_image (GdkDrawable *drawable,
                                             GdkGC *gc,
                                             gint x,
                                             gint y,
                                             gint width,
                                             gint height,
                                             GdkRgbDither dith,
                                             guchar *buf,
                                             gint rowstride,
                                             GdkRgbCmap *cmap);
GdkRgbCmap *gdk_rgb_cmap_new (guint32 *colors,
                                             gint n_colors);
void gdk_rgb_cmap_free (GdkRgbCmap *cmap);

void gdk_rgb_set_verbose (gboolean verbose);


void gdk_rgb_set_install (gboolean install);
void gdk_rgb_set_min_colors (gint min_colors);


GdkColormap *gdk_rgb_get_colormap (void);
GdkVisual * gdk_rgb_get_visual (void);
gboolean gdk_rgb_ditherable (void);
# 7 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 1
# 30 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h"
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h" 1
# 9 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-features.h"
extern const guint gdk_pixbuf_major_version, gdk_pixbuf_minor_version, gdk_pixbuf_micro_version;
extern const char *gdk_pixbuf_version;
# 31 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2







typedef enum
{
        GDK_PIXBUF_ALPHA_BILEVEL,
        GDK_PIXBUF_ALPHA_FULL
} GdkPixbufAlphaMode;





typedef enum {
        GDK_COLORSPACE_RGB
} GdkColorspace;


typedef struct _GdkPixbuf GdkPixbuf;
typedef struct _GdkPixbufAnimation GdkPixbufAnimation;
typedef struct _GdkPixbufAnimationIter GdkPixbufAnimationIter;
# 70 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h"
typedef void (* GdkPixbufDestroyNotify) (guchar *pixels, gpointer data);



typedef enum {

        GDK_PIXBUF_ERROR_CORRUPT_IMAGE,

        GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY,

        GDK_PIXBUF_ERROR_BAD_OPTION,

        GDK_PIXBUF_ERROR_UNKNOWN_TYPE,

        GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION,
        GDK_PIXBUF_ERROR_FAILED
} GdkPixbufError;

GQuark gdk_pixbuf_error_quark (void) ;



GType gdk_pixbuf_get_type (void) ;




GdkPixbuf *gdk_pixbuf_ref (GdkPixbuf *pixbuf);
void gdk_pixbuf_unref (GdkPixbuf *pixbuf);




GdkColorspace gdk_pixbuf_get_colorspace (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_n_channels (const GdkPixbuf *pixbuf);
gboolean gdk_pixbuf_get_has_alpha (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_bits_per_sample (const GdkPixbuf *pixbuf);
guchar *gdk_pixbuf_get_pixels (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_width (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_height (const GdkPixbuf *pixbuf);
int gdk_pixbuf_get_rowstride (const GdkPixbuf *pixbuf);




GdkPixbuf *gdk_pixbuf_new (GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample,
                           int width, int height);



GdkPixbuf *gdk_pixbuf_copy (const GdkPixbuf *pixbuf);


GdkPixbuf *gdk_pixbuf_new_subpixbuf (GdkPixbuf *src_pixbuf,
                                     int src_x,
                                     int src_y,
                                     int width,
                                     int height);



GdkPixbuf *gdk_pixbuf_new_from_file (const char *filename,
                                     GError **error);

GdkPixbuf *gdk_pixbuf_new_from_data (const guchar *data,
                                     GdkColorspace colorspace,
                                     gboolean has_alpha,
                                     int bits_per_sample,
                                     int width, int height,
                                     int rowstride,
                                     GdkPixbufDestroyNotify destroy_fn,
                                     gpointer destroy_fn_data);

GdkPixbuf *gdk_pixbuf_new_from_xpm_data (const char **data);
GdkPixbuf* gdk_pixbuf_new_from_inline (gint data_length,
                                         const guint8 *data,
                                         gboolean copy_pixels,
                                         GError **error);


void gdk_pixbuf_fill (GdkPixbuf *pixbuf,
                                         guint32 pixel);



gboolean gdk_pixbuf_save (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    GError **error,
                                    ...);

gboolean gdk_pixbuf_savev (GdkPixbuf *pixbuf,
                                    const char *filename,
                                    const char *type,
                                    char **option_keys,
                                    char **option_values,
                                    GError **error);


GdkPixbuf *gdk_pixbuf_add_alpha (const GdkPixbuf *pixbuf, gboolean substitute_color,
                                 guchar r, guchar g, guchar b);


void gdk_pixbuf_copy_area (const GdkPixbuf *src_pixbuf,
                           int src_x, int src_y,
                           int width, int height,
                           GdkPixbuf *dest_pixbuf,
                           int dest_x, int dest_y);


void gdk_pixbuf_saturate_and_pixelate (const GdkPixbuf *src,
                                       GdkPixbuf *dest,
                                       gfloat saturation,
                                       gboolean pixelate);
# 193 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h"
typedef enum {
        GDK_INTERP_NEAREST,
        GDK_INTERP_TILES,
        GDK_INTERP_BILINEAR,
        GDK_INTERP_HYPER
} GdkInterpType;

void gdk_pixbuf_scale (const GdkPixbuf *src,
                                 GdkPixbuf *dest,
                                 int dest_x,
                                 int dest_y,
                                 int dest_width,
                                 int dest_height,
                                 double offset_x,
                                 double offset_y,
                                 double scale_x,
                                 double scale_y,
                                 GdkInterpType interp_type);
void gdk_pixbuf_composite (const GdkPixbuf *src,
                                 GdkPixbuf *dest,
                                 int dest_x,
                                 int dest_y,
                                 int dest_width,
                                 int dest_height,
                                 double offset_x,
                                 double offset_y,
                                 double scale_x,
                                 double scale_y,
                                 GdkInterpType interp_type,
                                 int overall_alpha);
void gdk_pixbuf_composite_color (const GdkPixbuf *src,
                                 GdkPixbuf *dest,
                                 int dest_x,
                                 int dest_y,
                                 int dest_width,
                                 int dest_height,
                                 double offset_x,
                                 double offset_y,
                                 double scale_x,
                                 double scale_y,
                                 GdkInterpType interp_type,
                                 int overall_alpha,
                                 int check_x,
                                 int check_y,
                                 int check_size,
                                 guint32 color1,
                                 guint32 color2);

GdkPixbuf *gdk_pixbuf_scale_simple (const GdkPixbuf *src,
                                              int dest_width,
                                              int dest_height,
                                              GdkInterpType interp_type);

GdkPixbuf *gdk_pixbuf_composite_color_simple (const GdkPixbuf *src,
                                              int dest_width,
                                              int dest_height,
                                              GdkInterpType interp_type,
                                              int overall_alpha,
                                              int check_size,
                                              guint32 color1,
                                              guint32 color2);





GType gdk_pixbuf_animation_get_type (void) ;

GdkPixbufAnimation *gdk_pixbuf_animation_new_from_file (const char *filename,
                                                          GError **error);


GdkPixbufAnimation *gdk_pixbuf_animation_ref (GdkPixbufAnimation *animation);
void gdk_pixbuf_animation_unref (GdkPixbufAnimation *animation);


int gdk_pixbuf_animation_get_width (GdkPixbufAnimation *animation);
int gdk_pixbuf_animation_get_height (GdkPixbufAnimation *animation);
gboolean gdk_pixbuf_animation_is_static_image (GdkPixbufAnimation *animation);
GdkPixbuf *gdk_pixbuf_animation_get_static_image (GdkPixbufAnimation *animation);

GdkPixbufAnimationIter *gdk_pixbuf_animation_get_iter (GdkPixbufAnimation *animation,
                                                                              const GTimeVal *start_time);
GType gdk_pixbuf_animation_iter_get_type (void) ;
int gdk_pixbuf_animation_iter_get_delay_time (GdkPixbufAnimationIter *iter);
GdkPixbuf *gdk_pixbuf_animation_iter_get_pixbuf (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_on_currently_loading_frame (GdkPixbufAnimationIter *iter);
gboolean gdk_pixbuf_animation_iter_advance (GdkPixbufAnimationIter *iter,
                                                                              const GTimeVal *current_time);




const gchar * gdk_pixbuf_get_option (GdkPixbuf *pixbuf,
                                              const gchar *key);



typedef struct _GdkPixbufFormat GdkPixbufFormat;

GSList *gdk_pixbuf_get_formats (void);
gchar *gdk_pixbuf_format_get_name (GdkPixbufFormat *format);
gchar *gdk_pixbuf_format_get_description (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_mime_types (GdkPixbufFormat *format);
gchar **gdk_pixbuf_format_get_extensions (GdkPixbufFormat *format);
gboolean gdk_pixbuf_format_is_writable (GdkPixbufFormat *format);



# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h" 1
# 29 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"

# 39 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-loader.h"
typedef struct _GdkPixbufLoader GdkPixbufLoader;
struct _GdkPixbufLoader
{
  GObject parent_instance;


  gpointer priv;
};

typedef struct _GdkPixbufLoaderClass GdkPixbufLoaderClass;
struct _GdkPixbufLoaderClass
{
  GObjectClass parent_class;

  void (*size_prepared) (GdkPixbufLoader *loader,
                              int width,
                              int height);

  void (*area_prepared) (GdkPixbufLoader *loader);


  void (*area_updated) (GdkPixbufLoader *loader,
                              int x,
                              int y,
                              int width,
                              int height);

  void (*closed) (GdkPixbufLoader *loader);
};

GType gdk_pixbuf_loader_get_type (void) ;
GdkPixbufLoader * gdk_pixbuf_loader_new (void);
GdkPixbufLoader * gdk_pixbuf_loader_new_with_type (const char *image_type,
                                                      GError **error);
void gdk_pixbuf_loader_set_size (GdkPixbufLoader *loader,
                                                 int width,
                                                 int height);
gboolean gdk_pixbuf_loader_write (GdkPixbufLoader *loader,
                                                      const guchar *buf,
                                                      gsize count,
                                                      GError **error);
GdkPixbuf * gdk_pixbuf_loader_get_pixbuf (GdkPixbufLoader *loader);
GdkPixbufAnimation * gdk_pixbuf_loader_get_animation (GdkPixbufLoader *loader);
gboolean gdk_pixbuf_loader_close (GdkPixbufLoader *loader,
                                                      GError **error);
GdkPixbufFormat *gdk_pixbuf_loader_get_format (GdkPixbufLoader *loader);


# 303 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 1 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h" 1
# 9 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h"




GType gdk_pixbuf_alpha_mode_get_type (void);


GType gdk_colorspace_get_type (void);


GType gdk_pixbuf_error_get_type (void);


GType gdk_interp_type_get_type (void);



# 304 "/usr/include/gtk-2.0/gdk-pixbuf/gdk-pixbuf.h" 2
# 8 "/usr/include/gtk-2.0/gdk/gdkdrawable.h" 2





typedef struct _GdkDrawableClass GdkDrawableClass;
# 22 "/usr/include/gtk-2.0/gdk/gdkdrawable.h"
struct _GdkDrawable
{
  GObject parent_instance;
};

struct _GdkDrawableClass
{
  GObjectClass parent_class;

  GdkGC *(*create_gc) (GdkDrawable *drawable,
                          GdkGCValues *values,
                          GdkGCValuesMask mask);
  void (*draw_rectangle) (GdkDrawable *drawable,
                          GdkGC *gc,
                          gboolean filled,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
  void (*draw_arc) (GdkDrawable *drawable,
                          GdkGC *gc,
                          gboolean filled,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          gint angle1,
                          gint angle2);
  void (*draw_polygon) (GdkDrawable *drawable,
                          GdkGC *gc,
                          gboolean filled,
                          GdkPoint *points,
                          gint npoints);
  void (*draw_text) (GdkDrawable *drawable,
                          GdkFont *font,
                          GdkGC *gc,
                          gint x,
                          gint y,
                          const gchar *text,
                          gint text_length);
  void (*draw_text_wc) (GdkDrawable *drawable,
                          GdkFont *font,
                          GdkGC *gc,
                          gint x,
                          gint y,
                          const GdkWChar *text,
                          gint text_length);
  void (*draw_drawable) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkDrawable *src,
                          gint xsrc,
                          gint ysrc,
                          gint xdest,
                          gint ydest,
                          gint width,
                          gint height);
  void (*draw_points) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkPoint *points,
                          gint npoints);
  void (*draw_segments) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkSegment *segs,
                          gint nsegs);
 void (*draw_lines) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkPoint *points,
                          gint npoints);

  void (*draw_glyphs) (GdkDrawable *drawable,
                          GdkGC *gc,
                          PangoFont *font,
                          gint x,
                          gint y,
                          PangoGlyphString *glyphs);

  void (*draw_image) (GdkDrawable *drawable,
                          GdkGC *gc,
                          GdkImage *image,
                          gint xsrc,
                          gint ysrc,
                          gint xdest,
                          gint ydest,
                          gint width,
                          gint height);

  gint (*get_depth) (GdkDrawable *drawable);
  void (*get_size) (GdkDrawable *drawable,
                          gint *width,
                          gint *height);

  void (*set_colormap) (GdkDrawable *drawable,
                          GdkColormap *cmap);

  GdkColormap* (*get_colormap) (GdkDrawable *drawable);
  GdkVisual* (*get_visual) (GdkDrawable *drawable);
  GdkScreen* (*get_screen) (GdkDrawable *drawable);

  GdkImage* (*get_image) (GdkDrawable *drawable,
                              gint x,
                              gint y,
                              gint width,
                              gint height);

  GdkRegion* (*get_clip_region) (GdkDrawable *drawable);
  GdkRegion* (*get_visible_region) (GdkDrawable *drawable);

  GdkDrawable* (*get_composite_drawable) (GdkDrawable *drawable,
                                          gint x,
                                          gint y,
                                          gint width,
                                          gint height,
                                          gint *composite_x_offset,
                                          gint *composite_y_offset);

  void (*draw_pixbuf) (GdkDrawable *drawable,
                               GdkGC *gc,
                               GdkPixbuf *pixbuf,
                               gint src_x,
                               gint src_y,
                               gint dest_x,
                               gint dest_y,
                               gint width,
                               gint height,
                               GdkRgbDither dither,
                               gint x_dither,
                               gint y_dither);
  GdkImage* (*_copy_to_image) (GdkDrawable *drawable,
                                  GdkImage *image,
                                  gint src_x,
                                  gint src_y,
                                  gint dest_x,
                                  gint dest_y,
                                  gint width,
                                  gint height);


  void (*_gdk_reserved1) (void);
  void (*_gdk_reserved2) (void);
  void (*_gdk_reserved3) (void);
  void (*_gdk_reserved4) (void);
  void (*_gdk_reserved5) (void);
  void (*_gdk_reserved6) (void);
  void (*_gdk_reserved7) (void);
  void (*_gdk_reserved9) (void);
  void (*_gdk_reserved10) (void);
  void (*_gdk_reserved11) (void);
  void (*_gdk_reserved12) (void);
  void (*_gdk_reserved13) (void);
  void (*_gdk_reserved14) (void);
  void (*_gdk_reserved15) (void);
  void (*_gdk_reserved16) (void);
};

GType gdk_drawable_get_type (void);





void gdk_drawable_set_data (GdkDrawable *drawable,
                                           const gchar *key,
                                           gpointer data,
                                           GDestroyNotify destroy_func);
gpointer gdk_drawable_get_data (GdkDrawable *drawable,
                                           const gchar *key);


void gdk_drawable_get_size (GdkDrawable *drawable,
                                           gint *width,
                                           gint *height);
void gdk_drawable_set_colormap (GdkDrawable *drawable,
                                           GdkColormap *colormap);
GdkColormap* gdk_drawable_get_colormap (GdkDrawable *drawable);
GdkVisual* gdk_drawable_get_visual (GdkDrawable *drawable);
gint gdk_drawable_get_depth (GdkDrawable *drawable);
GdkScreen* gdk_drawable_get_screen (GdkDrawable *drawable);
GdkDisplay* gdk_drawable_get_display (GdkDrawable *drawable);


GdkDrawable* gdk_drawable_ref (GdkDrawable *drawable);
void gdk_drawable_unref (GdkDrawable *drawable);




void gdk_draw_point (GdkDrawable *drawable,
                         GdkGC *gc,
                         gint x,
                         gint y);
void gdk_draw_line (GdkDrawable *drawable,
                         GdkGC *gc,
                         gint x1_,
                         gint y1_,
                         gint x2_,
                         gint y2_);
void gdk_draw_rectangle (GdkDrawable *drawable,
                         GdkGC *gc,
                         gboolean filled,
                         gint x,
                         gint y,
                         gint width,
                         gint height);
void gdk_draw_arc (GdkDrawable *drawable,
                         GdkGC *gc,
                         gboolean filled,
                         gint x,
                         gint y,
                         gint width,
                         gint height,
                         gint angle1,
                         gint angle2);
void gdk_draw_polygon (GdkDrawable *drawable,
                         GdkGC *gc,
                         gboolean filled,
                         GdkPoint *points,
                         gint npoints);


void gdk_draw_string (GdkDrawable *drawable,
                         GdkFont *font,
                         GdkGC *gc,
                         gint x,
                         gint y,
                         const gchar *string);



void gdk_draw_text (GdkDrawable *drawable,
                         GdkFont *font,
                         GdkGC *gc,
                         gint x,
                         gint y,
                         const gchar *text,
                         gint text_length);

void gdk_draw_text_wc (GdkDrawable *drawable,
                         GdkFont *font,
                         GdkGC *gc,
                         gint x,
                         gint y,
                         const GdkWChar *text,
                         gint text_length);

void gdk_draw_drawable (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkDrawable *src,
                         gint xsrc,
                         gint ysrc,
                         gint xdest,
                         gint ydest,
                         gint width,
                         gint height);
void gdk_draw_image (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkImage *image,
                         gint xsrc,
                         gint ysrc,
                         gint xdest,
                         gint ydest,
                         gint width,
                         gint height);
void gdk_draw_points (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkPoint *points,
                         gint npoints);
void gdk_draw_segments (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkSegment *segs,
                         gint nsegs);
void gdk_draw_lines (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkPoint *points,
                         gint npoints);
void gdk_draw_pixbuf (GdkDrawable *drawable,
                         GdkGC *gc,
                         GdkPixbuf *pixbuf,
                         gint src_x,
                         gint src_y,
                         gint dest_x,
                         gint dest_y,
                         gint width,
                         gint height,
                         GdkRgbDither dither,
                         gint x_dither,
                         gint y_dither);

void gdk_draw_glyphs (GdkDrawable *drawable,
                           GdkGC *gc,
                           PangoFont *font,
                           gint x,
                           gint y,
                           PangoGlyphString *glyphs);
void gdk_draw_layout_line (GdkDrawable *drawable,
                           GdkGC *gc,
                           gint x,
                           gint y,
                           PangoLayoutLine *line);
void gdk_draw_layout (GdkDrawable *drawable,
                           GdkGC *gc,
                           gint x,
                           gint y,
                           PangoLayout *layout);

void gdk_draw_layout_line_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayoutLine *line,
                                       GdkColor *foreground,
                                       GdkColor *background);
void gdk_draw_layout_with_colors (GdkDrawable *drawable,
                                       GdkGC *gc,
                                       gint x,
                                       gint y,
                                       PangoLayout *layout,
                                       GdkColor *foreground,
                                       GdkColor *background);






GdkImage* gdk_drawable_get_image (GdkDrawable *drawable,
                                  gint x,
                                  gint y,
                                  gint width,
                                  gint height);

GdkRegion *gdk_drawable_get_clip_region (GdkDrawable *drawable);
GdkRegion *gdk_drawable_get_visible_region (GdkDrawable *drawable);
# 35 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h" 1
# 9 "/usr/include/gtk-2.0/gdk/gdkenumtypes.h"




GType gdk_cursor_type_get_type (void);




GType gdk_drag_action_get_type (void);


GType gdk_drag_protocol_get_type (void);




GType gdk_filter_return_get_type (void);


GType gdk_event_type_get_type (void);


GType gdk_event_mask_get_type (void);


GType gdk_visibility_state_get_type (void);


GType gdk_scroll_direction_get_type (void);


GType gdk_notify_type_get_type (void);


GType gdk_crossing_mode_get_type (void);


GType gdk_property_state_get_type (void);


GType gdk_window_state_get_type (void);


GType gdk_setting_action_get_type (void);




GType gdk_font_type_get_type (void);




GType gdk_cap_style_get_type (void);


GType gdk_fill_get_type (void);


GType gdk_function_get_type (void);


GType gdk_join_style_get_type (void);


GType gdk_line_style_get_type (void);


GType gdk_subwindow_mode_get_type (void);


GType gdk_gc_values_mask_get_type (void);




GType gdk_image_type_get_type (void);




GType gdk_extension_mode_get_type (void);


GType gdk_input_source_get_type (void);


GType gdk_input_mode_get_type (void);


GType gdk_axis_use_get_type (void);




GType gdk_prop_mode_get_type (void);




GType gdk_fill_rule_get_type (void);


GType gdk_overlap_type_get_type (void);




GType gdk_rgb_dither_get_type (void);




GType gdk_byte_order_get_type (void);


GType gdk_modifier_type_get_type (void);


GType gdk_input_condition_get_type (void);


GType gdk_status_get_type (void);


GType gdk_grab_status_get_type (void);




GType gdk_visual_type_get_type (void);




GType gdk_window_class_get_type (void);


GType gdk_window_type_get_type (void);


GType gdk_window_attributes_type_get_type (void);


GType gdk_window_hints_get_type (void);


GType gdk_window_type_hint_get_type (void);


GType gdk_wm_decoration_get_type (void);


GType gdk_wm_function_get_type (void);


GType gdk_gravity_get_type (void);


GType gdk_window_edge_get_type (void);



# 36 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkfont.h" 1
# 19 "/usr/include/gtk-2.0/gdk/gdkfont.h"
typedef enum
{
  GDK_FONT_FONT,
  GDK_FONT_FONTSET
} GdkFontType;

struct _GdkFont
{
  GdkFontType type;
  gint ascent;
  gint descent;
};

GType gdk_font_get_type (void);

GdkFont* gdk_font_ref (GdkFont *font);
void gdk_font_unref (GdkFont *font);
gint gdk_font_id (const GdkFont *font);
gboolean gdk_font_equal (const GdkFont *fonta,
                             const GdkFont *fontb);

GdkFont *gdk_font_load_for_display (GdkDisplay *display,
                                                const gchar *font_name);
GdkFont *gdk_fontset_load_for_display (GdkDisplay *display,
                                                const gchar *fontset_name);
GdkFont *gdk_font_from_description_for_display (GdkDisplay *display,
                                                PangoFontDescription *font_desc);




GdkFont* gdk_font_load (const gchar *font_name);
GdkFont* gdk_fontset_load (const gchar *fontset_name);
GdkFont* gdk_font_from_description (PangoFontDescription *font_desc);


gint gdk_string_width (GdkFont *font,
                             const gchar *string);
gint gdk_text_width (GdkFont *font,
                             const gchar *text,
                             gint text_length);
gint gdk_text_width_wc (GdkFont *font,
                             const GdkWChar *text,
                             gint text_length);
gint gdk_char_width (GdkFont *font,
                             gchar character);
gint gdk_char_width_wc (GdkFont *font,
                             GdkWChar character);
gint gdk_string_measure (GdkFont *font,
                             const gchar *string);
gint gdk_text_measure (GdkFont *font,
                             const gchar *text,
                             gint text_length);
gint gdk_char_measure (GdkFont *font,
                             gchar character);
gint gdk_string_height (GdkFont *font,
                             const gchar *string);
gint gdk_text_height (GdkFont *font,
                             const gchar *text,
                             gint text_length);
gint gdk_char_height (GdkFont *font,
                             gchar character);

void gdk_text_extents (GdkFont *font,
                             const gchar *text,
                             gint text_length,
                             gint *lbearing,
                             gint *rbearing,
                             gint *width,
                             gint *ascent,
                             gint *descent);
void gdk_text_extents_wc (GdkFont *font,
                             const GdkWChar *text,
                             gint text_length,
                             gint *lbearing,
                             gint *rbearing,
                             gint *width,
                             gint *ascent,
                             gint *descent);
void gdk_string_extents (GdkFont *font,
                             const gchar *string,
                             gint *lbearing,
                             gint *rbearing,
                             gint *width,
                             gint *ascent,
                             gint *descent);

GdkDisplay * gdk_font_get_display (GdkFont *font);
# 38 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkimage.h" 1
# 21 "/usr/include/gtk-2.0/gdk/gdkimage.h"
typedef enum
{
  GDK_IMAGE_NORMAL,
  GDK_IMAGE_SHARED,
  GDK_IMAGE_FASTEST
} GdkImageType;

typedef struct _GdkImageClass GdkImageClass;
# 37 "/usr/include/gtk-2.0/gdk/gdkimage.h"
struct _GdkImage
{
  GObject parent_instance;

  GdkImageType type;
  GdkVisual *visual;
  GdkByteOrder byte_order;
  gint width;
  gint height;
  guint16 depth;
  guint16 bpp;
  guint16 bpl;
  guint16 bits_per_pixel;
  gpointer mem;

  GdkColormap *colormap;

  gpointer windowing_data;
};

struct _GdkImageClass
{
  GObjectClass parent_class;
};

GType gdk_image_get_type (void) ;

GdkImage* gdk_image_new (GdkImageType type,
                                GdkVisual *visual,
                                gint width,
                                gint height);


GdkImage* gdk_image_get (GdkDrawable *drawable,
                                gint x,
                                gint y,
                                gint width,
                                gint height);

GdkImage * gdk_image_ref (GdkImage *image);
void gdk_image_unref (GdkImage *image);


void gdk_image_put_pixel (GdkImage *image,
                                gint x,
                                gint y,
                                guint32 pixel);
guint32 gdk_image_get_pixel (GdkImage *image,
                                gint x,
                                gint y);

void gdk_image_set_colormap (GdkImage *image,
                                   GdkColormap *colormap);
GdkColormap* gdk_image_get_colormap (GdkImage *image);
# 40 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkkeys.h" 1
# 36 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
typedef struct _GdkKeymapKey GdkKeymapKey;


struct _GdkKeymapKey
{
  guint keycode;
  gint group;
  gint level;
};
# 54 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
typedef struct _GdkKeymap GdkKeymap;
typedef struct _GdkKeymapClass GdkKeymapClass;
# 64 "/usr/include/gtk-2.0/gdk/gdkkeys.h"
struct _GdkKeymap
{
  GObject parent_instance;
  GdkDisplay *display;
};

struct _GdkKeymapClass
{
  GObjectClass parent_class;

  void (*direction_changed) (GdkKeymap *keymap);
  void (*keys_changed) (GdkKeymap *keymap);
};

GType gdk_keymap_get_type (void) ;


GdkKeymap* gdk_keymap_get_default (void);

GdkKeymap* gdk_keymap_get_for_display (GdkDisplay *display);


guint gdk_keymap_lookup_key (GdkKeymap *keymap,
                                                    const GdkKeymapKey *key);
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap,
                                                    guint hardware_keycode,
                                                    GdkModifierType state,
                                                    gint group,
                                                    guint *keyval,
                                                    gint *effective_group,
                                                    gint *level,
                                                    GdkModifierType *consumed_modifiers);
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap,
                                                    guint keyval,
                                                    GdkKeymapKey **keys,
                                                    gint *n_keys);
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap,
                                                    guint hardware_keycode,
                                                    GdkKeymapKey **keys,
                                                    guint **keyvals,
                                                    gint *n_entries);
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);



gchar* gdk_keyval_name (guint keyval) ;
guint gdk_keyval_from_name (const gchar *keyval_name);
void gdk_keyval_convert_case (guint symbol,
                                  guint *lower,
                                  guint *upper);
guint gdk_keyval_to_upper (guint keyval) ;
guint gdk_keyval_to_lower (guint keyval) ;
gboolean gdk_keyval_is_upper (guint keyval) ;
gboolean gdk_keyval_is_lower (guint keyval) ;

guint32 gdk_keyval_to_unicode (guint keyval) ;
guint gdk_unicode_to_keyval (guint32 wc) ;
# 42 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h" 1
# 33 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"


typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDisplayManagerClass GdkDisplayManagerClass;
# 45 "/usr/include/gtk-2.0/gdk/gdkdisplaymanager.h"
struct _GdkDisplayManagerClass
{
  GObjectClass parent_class;

  void (*display_opened) (GdkDisplayManager *display_manager,
                          GdkDisplay *display);
};

GType gdk_display_manager_get_type (void) ;

GdkDisplayManager *gdk_display_manager_get (void);
GdkDisplay * gdk_display_manager_get_default_display (GdkDisplayManager *display_manager);
void gdk_display_manager_set_default_display (GdkDisplayManager *display_manager,
                                                            GdkDisplay *display);
GSList * gdk_display_manager_list_displays (GdkDisplayManager *display_manager);


# 43 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpango.h" 1
# 31 "/usr/include/gtk-2.0/gdk/gdkpango.h"
PangoContext *gdk_pango_context_get_for_screen (GdkScreen *screen);

PangoContext *gdk_pango_context_get (void);

void gdk_pango_context_set_colormap (PangoContext *context,
                                                GdkColormap *colormap);
# 45 "/usr/include/gtk-2.0/gdk/gdkpango.h"
GdkRegion *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     gint *index_ranges,
                                                     gint n_ranges);
GdkRegion *gdk_pango_layout_get_clip_region (PangoLayout *layout,
                                                     gint x_origin,
                                                     gint y_origin,
                                                     gint *index_ranges,
                                                     gint n_ranges);





typedef struct _GdkPangoAttrStipple GdkPangoAttrStipple;
typedef struct _GdkPangoAttrEmbossed GdkPangoAttrEmbossed;

struct _GdkPangoAttrStipple
{
  PangoAttribute attr;
  GdkBitmap *stipple;
};

struct _GdkPangoAttrEmbossed
{
  PangoAttribute attr;
  gboolean embossed;
};

PangoAttribute *gdk_pango_attr_stipple_new (GdkBitmap *stipple);
PangoAttribute *gdk_pango_attr_embossed_new (gboolean embossed);
# 44 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h" 1
# 14 "/usr/include/gtk-2.0/gdk/gdkpixbuf.h"
void gdk_pixbuf_render_threshold_alpha (GdkPixbuf *pixbuf,
                                          GdkBitmap *bitmap,
                                          int src_x,
                                          int src_y,
                                          int dest_x,
                                          int dest_y,
                                          int width,
                                          int height,
                                          int alpha_threshold);
void gdk_pixbuf_render_to_drawable (GdkPixbuf *pixbuf,
                                          GdkDrawable *drawable,
                                          GdkGC *gc,
                                          int src_x,
                                          int src_y,
                                          int dest_x,
                                          int dest_y,
                                          int width,
                                          int height,
                                          GdkRgbDither dither,
                                          int x_dither,
                                          int y_dither);
void gdk_pixbuf_render_to_drawable_alpha (GdkPixbuf *pixbuf,
                                          GdkDrawable *drawable,
                                          int src_x,
                                          int src_y,
                                          int dest_x,
                                          int dest_y,
                                          int width,
                                          int height,
                                          GdkPixbufAlphaMode alpha_mode,
                                          int alpha_threshold,
                                          GdkRgbDither dither,
                                          int x_dither,
                                          int y_dither);

void gdk_pixbuf_render_pixmap_and_mask_for_colormap (GdkPixbuf *pixbuf,
                                                     GdkColormap *colormap,
                                                     GdkPixmap **pixmap_return,
                                                     GdkBitmap **mask_return,
                                                     int alpha_threshold);

void gdk_pixbuf_render_pixmap_and_mask (GdkPixbuf *pixbuf,
                                                     GdkPixmap **pixmap_return,
                                                     GdkBitmap **mask_return,
                                                     int alpha_threshold);




GdkPixbuf *gdk_pixbuf_get_from_drawable (GdkPixbuf *dest,
                                         GdkDrawable *src,
                                         GdkColormap *cmap,
                                         int src_x,
                                         int src_y,
                                         int dest_x,
                                         int dest_y,
                                         int width,
                                         int height);

GdkPixbuf *gdk_pixbuf_get_from_image (GdkPixbuf *dest,
                                         GdkImage *src,
                                         GdkColormap *cmap,
                                         int src_x,
                                         int src_y,
                                         int dest_x,
                                         int dest_y,
                                         int width,
                                         int height);
# 45 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkpixmap.h" 1
# 11 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"
typedef struct _GdkPixmapObject GdkPixmapObject;
typedef struct _GdkPixmapObjectClass GdkPixmapObjectClass;
# 22 "/usr/include/gtk-2.0/gdk/gdkpixmap.h"
struct _GdkPixmapObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  gint depth;
};

struct _GdkPixmapObjectClass
{
  GdkDrawableClass parent_class;

};

GType gdk_pixmap_get_type (void) ;



GdkPixmap* gdk_pixmap_new (GdkDrawable *drawable,
                                         gint width,
                                         gint height,
                                         gint depth);
GdkBitmap* gdk_bitmap_create_from_data (GdkDrawable *drawable,
                                         const gchar *data,
                                         gint width,
                                         gint height);
GdkPixmap* gdk_pixmap_create_from_data (GdkDrawable *drawable,
                                         const gchar *data,
                                         gint width,
                                         gint height,
                                         gint depth,
                                         GdkColor *fg,
                                         GdkColor *bg);

GdkPixmap* gdk_pixmap_create_from_xpm (GdkDrawable *drawable,
                                                  GdkBitmap **mask,
                                                  GdkColor *transparent_color,
                                                  const gchar *filename);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm (GdkDrawable *drawable,
                                                  GdkColormap *colormap,
                                                  GdkBitmap **mask,
                                                  GdkColor *transparent_color,
                                                  const gchar *filename);
GdkPixmap* gdk_pixmap_create_from_xpm_d (GdkDrawable *drawable,
                                                  GdkBitmap **mask,
                                                  GdkColor *transparent_color,
                                                  gchar **data);
GdkPixmap* gdk_pixmap_colormap_create_from_xpm_d (GdkDrawable *drawable,
                                                  GdkColormap *colormap,
                                                  GdkBitmap **mask,
                                                  GdkColor *transparent_color,
                                                  gchar **data);




GdkPixmap* gdk_pixmap_foreign_new (GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup (GdkNativeWindow anid);


GdkPixmap* gdk_pixmap_foreign_new_for_display (GdkDisplay *display,
                                                  GdkNativeWindow anid);
GdkPixmap* gdk_pixmap_lookup_for_display (GdkDisplay *display,
                                                  GdkNativeWindow anid);
# 46 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkproperty.h" 1
# 10 "/usr/include/gtk-2.0/gdk/gdkproperty.h"
typedef enum
{
  GDK_PROP_MODE_REPLACE,
  GDK_PROP_MODE_PREPEND,
  GDK_PROP_MODE_APPEND
} GdkPropMode;

GdkAtom gdk_atom_intern (const gchar *atom_name,
                         gboolean only_if_exists);
gchar* gdk_atom_name (GdkAtom atom);

gboolean gdk_property_get (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gulong offset,
                              gulong length,
                              gint pdelete,
                              GdkAtom *actual_property_type,
                              gint *actual_format,
                              gint *actual_length,
                              guchar **data);
void gdk_property_change (GdkWindow *window,
                              GdkAtom property,
                              GdkAtom type,
                              gint format,
                              GdkPropMode mode,
                              const guchar *data,
                              gint nelements);
void gdk_property_delete (GdkWindow *window,
                              GdkAtom property);

gint gdk_text_property_to_text_list (GdkAtom encoding,
                                     gint format,
                                     const guchar *text,
                                     gint length,
                                     gchar ***list);
gint gdk_text_property_to_utf8_list (GdkAtom encoding,
                                     gint format,
                                     const guchar *text,
                                     gint length,
                                     gchar ***list);
gboolean gdk_utf8_to_compound_text (const gchar *str,
                                    GdkAtom *encoding,
                                    gint *format,
                                    guchar **ctext,
                                    gint *length);
gint gdk_string_to_compound_text (const gchar *str,
                                     GdkAtom *encoding,
                                     gint *format,
                                     guchar **ctext,
                                     gint *length);


gint gdk_text_property_to_text_list_for_display (GdkDisplay *display,
                                                 GdkAtom encoding,
                                                 gint format,
                                                 const guchar *text,
                                                 gint length,
                                                 gchar ***list);
gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display,
                                                 GdkAtom encoding,
                                                 gint format,
                                                 const guchar *text,
                                                 gint length,
                                                 gchar ***list);

gchar *gdk_utf8_to_string_target (const gchar *str);
gint gdk_string_to_compound_text_for_display (GdkDisplay *display,
                                                  const gchar *str,
                                                  GdkAtom *encoding,
                                                  gint *format,
                                                  guchar **ctext,
                                                  gint *length);
gboolean gdk_utf8_to_compound_text_for_display (GdkDisplay *display,
                                                  const gchar *str,
                                                  GdkAtom *encoding,
                                                  gint *format,
                                                  guchar **ctext,
                                                  gint *length);

void gdk_free_text_list (gchar **list);
void gdk_free_compound_text (guchar *ctext);
# 47 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkregion.h" 1
# 14 "/usr/include/gtk-2.0/gdk/gdkregion.h"
typedef enum
{
  GDK_EVEN_ODD_RULE,
  GDK_WINDING_RULE
} GdkFillRule;






typedef enum
{
  GDK_OVERLAP_RECTANGLE_IN,
  GDK_OVERLAP_RECTANGLE_OUT,
  GDK_OVERLAP_RECTANGLE_PART
} GdkOverlapType;

typedef void (*GdkSpanFunc) (GdkSpan *span,
                             gpointer data);

GdkRegion *gdk_region_new (void);
GdkRegion *gdk_region_polygon (GdkPoint *points,
                                 gint npoints,
                                 GdkFillRule fill_rule);
GdkRegion *gdk_region_copy (GdkRegion *region);
GdkRegion *gdk_region_rectangle (GdkRectangle *rectangle);
void gdk_region_destroy (GdkRegion *region);

void gdk_region_get_clipbox (GdkRegion *region,
                                          GdkRectangle *rectangle);
void gdk_region_get_rectangles (GdkRegion *region,
                                          GdkRectangle **rectangles,
                                          gint *n_rectangles);

gboolean gdk_region_empty (GdkRegion *region);
gboolean gdk_region_equal (GdkRegion *region1,
                                    GdkRegion *region2);
gboolean gdk_region_point_in (GdkRegion *region,
                                    int x,
                                    int y);
GdkOverlapType gdk_region_rect_in (GdkRegion *region,
                                    GdkRectangle *rect);

void gdk_region_offset (GdkRegion *region,
                                 gint dx,
                                 gint dy);
void gdk_region_shrink (GdkRegion *region,
                                 gint dx,
                                 gint dy);
void gdk_region_union_with_rect (GdkRegion *region,
                                 GdkRectangle *rect);
void gdk_region_intersect (GdkRegion *source1,
                                 GdkRegion *source2);
void gdk_region_union (GdkRegion *source1,
                                 GdkRegion *source2);
void gdk_region_subtract (GdkRegion *source1,
                                 GdkRegion *source2);
void gdk_region_xor (GdkRegion *source1,
                                 GdkRegion *source2);

void gdk_region_spans_intersect_foreach (GdkRegion *region,
                                         GdkSpan *spans,
                                         int n_spans,
                                         gboolean sorted,
                                         GdkSpanFunc function,
                                         gpointer data);
# 48 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkscreen.h" 1
# 30 "/usr/include/gtk-2.0/gdk/gdkscreen.h"


typedef struct _GdkScreenClass GdkScreenClass;
# 41 "/usr/include/gtk-2.0/gdk/gdkscreen.h"
struct _GdkScreen
{
  GObject parent_instance;

  guint closed : 1;
};

struct _GdkScreenClass
{
  GObjectClass parent_class;

  void (*size_changed) (GdkScreen *screen);
};

GType gdk_screen_get_type (void);
GdkColormap *gdk_screen_get_default_colormap (GdkScreen *screen);
void gdk_screen_set_default_colormap (GdkScreen *screen,
                                               GdkColormap *colormap);
GdkColormap* gdk_screen_get_system_colormap (GdkScreen *screen);
GdkVisual* gdk_screen_get_system_visual (GdkScreen *screen);
GdkColormap *gdk_screen_get_rgb_colormap (GdkScreen *screen);
GdkVisual * gdk_screen_get_rgb_visual (GdkScreen *screen);

GdkWindow * gdk_screen_get_root_window (GdkScreen *screen);
GdkDisplay * gdk_screen_get_display (GdkScreen *screen);
gint gdk_screen_get_number (GdkScreen *screen);
gint gdk_screen_get_width (GdkScreen *screen);
gint gdk_screen_get_height (GdkScreen *screen);
gint gdk_screen_get_width_mm (GdkScreen *screen);
gint gdk_screen_get_height_mm (GdkScreen *screen);

GList * gdk_screen_list_visuals (GdkScreen *screen);
GList * gdk_screen_get_toplevel_windows (GdkScreen *screen);
gchar * gdk_screen_make_display_name (GdkScreen *screen);

gint gdk_screen_get_n_monitors (GdkScreen *screen);
void gdk_screen_get_monitor_geometry (GdkScreen *screen,
                                                gint monitor_num,
                                                GdkRectangle *dest);
gint gdk_screen_get_monitor_at_point (GdkScreen *screen,
                                                gint x,
                                                gint y);
gint gdk_screen_get_monitor_at_window (GdkScreen *screen,
                                                GdkWindow *window);

void gdk_screen_broadcast_client_message (GdkScreen *screen,
                                                    GdkEvent *event);

GdkScreen *gdk_screen_get_default (void);

gboolean gdk_screen_get_setting (GdkScreen *screen,
                                   const gchar *name,
                                   GValue *value);


# 50 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkselection.h" 1
# 32 "/usr/include/gtk-2.0/gdk/gdkselection.h"
typedef GdkAtom GdkSelection;
typedef GdkAtom GdkTarget;
typedef GdkAtom GdkSelectionType;







gboolean gdk_selection_owner_set (GdkWindow *owner,
                                    GdkAtom selection,
                                    guint32 time_,
                                    gboolean send_event);
GdkWindow* gdk_selection_owner_get (GdkAtom selection);


gboolean gdk_selection_owner_set_for_display (GdkDisplay *display,
                                                GdkWindow *owner,
                                                GdkAtom selection,
                                                guint32 time_,
                                                gboolean send_event);
GdkWindow *gdk_selection_owner_get_for_display (GdkDisplay *display,
                                                GdkAtom selection);

void gdk_selection_convert (GdkWindow *requestor,
                                    GdkAtom selection,
                                    GdkAtom target,
                                    guint32 time_);
gboolean gdk_selection_property_get (GdkWindow *requestor,
                                       guchar **data,
                                       GdkAtom *prop_type,
                                       gint *prop_format);


void gdk_selection_send_notify (guint32 requestor,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      GdkAtom property,
                                      guint32 time_);


void gdk_selection_send_notify_for_display (GdkDisplay *display,
                                                  guint32 requestor,
                                                  GdkAtom selection,
                                                  GdkAtom target,
                                                  GdkAtom property,
                                                  guint32 time_);
# 51 "/usr/include/gtk-2.0/gdk/gdk.h" 2

# 1 "/usr/include/gtk-2.0/gdk/gdkvisual.h" 1






# 15 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef struct _GdkVisualClass GdkVisualClass;
# 25 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
typedef enum
{
  GDK_VISUAL_STATIC_GRAY,
  GDK_VISUAL_GRAYSCALE,
  GDK_VISUAL_STATIC_COLOR,
  GDK_VISUAL_PSEUDO_COLOR,
  GDK_VISUAL_TRUE_COLOR,
  GDK_VISUAL_DIRECT_COLOR
} GdkVisualType;
# 47 "/usr/include/gtk-2.0/gdk/gdkvisual.h"
struct _GdkVisual
{
  GObject parent_instance;

  GdkVisualType type;
  gint depth;
  GdkByteOrder byte_order;
  gint colormap_size;
  gint bits_per_rgb;

  guint32 red_mask;
  gint red_shift;
  gint red_prec;

  guint32 green_mask;
  gint green_shift;
  gint green_prec;

  guint32 blue_mask;
  gint blue_shift;
  gint blue_prec;
};

GType gdk_visual_get_type (void);


gint gdk_visual_get_best_depth (void);
GdkVisualType gdk_visual_get_best_type (void);
GdkVisual* gdk_visual_get_system (void);
GdkVisual* gdk_visual_get_best (void);
GdkVisual* gdk_visual_get_best_with_depth (gint depth);
GdkVisual* gdk_visual_get_best_with_type (GdkVisualType visual_type);
GdkVisual* gdk_visual_get_best_with_both (gint depth,
                                              GdkVisualType visual_type);

void gdk_query_depths (gint **depths,
                             gint *count);
void gdk_query_visual_types (GdkVisualType **visual_types,
                             gint *count);

GList* gdk_list_visuals (void);


GdkScreen *gdk_visual_get_screen (GdkVisual *visual);







# 53 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 1 "/usr/include/gtk-2.0/gdk/gdkwindow.h" 1
# 12 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef struct _GdkGeometry GdkGeometry;
typedef struct _GdkWindowAttr GdkWindowAttr;
typedef struct _GdkPointerHooks GdkPointerHooks;
# 25 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_INPUT_OUTPUT,
  GDK_INPUT_ONLY
} GdkWindowClass;
# 44 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_ROOT,
  GDK_WINDOW_TOPLEVEL,
  GDK_WINDOW_CHILD,
  GDK_WINDOW_DIALOG,
  GDK_WINDOW_TEMP,
  GDK_WINDOW_FOREIGN
} GdkWindowType;
# 62 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WA_TITLE = 1 << 1,
  GDK_WA_X = 1 << 2,
  GDK_WA_Y = 1 << 3,
  GDK_WA_CURSOR = 1 << 4,
  GDK_WA_COLORMAP = 1 << 5,
  GDK_WA_VISUAL = 1 << 6,
  GDK_WA_WMCLASS = 1 << 7,
  GDK_WA_NOREDIR = 1 << 8
} GdkWindowAttributesType;



typedef enum
{
  GDK_HINT_POS = 1 << 0,
  GDK_HINT_MIN_SIZE = 1 << 1,
  GDK_HINT_MAX_SIZE = 1 << 2,
  GDK_HINT_BASE_SIZE = 1 << 3,
  GDK_HINT_ASPECT = 1 << 4,
  GDK_HINT_RESIZE_INC = 1 << 5,
  GDK_HINT_WIN_GRAVITY = 1 << 6,
  GDK_HINT_USER_POS = 1 << 7,
  GDK_HINT_USER_SIZE = 1 << 8
} GdkWindowHints;
# 102 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
typedef enum
{
  GDK_WINDOW_TYPE_HINT_NORMAL,
  GDK_WINDOW_TYPE_HINT_DIALOG,
  GDK_WINDOW_TYPE_HINT_MENU,
  GDK_WINDOW_TYPE_HINT_TOOLBAR,
  GDK_WINDOW_TYPE_HINT_SPLASHSCREEN,
  GDK_WINDOW_TYPE_HINT_UTILITY,
  GDK_WINDOW_TYPE_HINT_DOCK,
  GDK_WINDOW_TYPE_HINT_DESKTOP
} GdkWindowTypeHint;







typedef enum
{
  GDK_DECOR_ALL = 1 << 0,
  GDK_DECOR_BORDER = 1 << 1,
  GDK_DECOR_RESIZEH = 1 << 2,
  GDK_DECOR_TITLE = 1 << 3,
  GDK_DECOR_MENU = 1 << 4,
  GDK_DECOR_MINIMIZE = 1 << 5,
  GDK_DECOR_MAXIMIZE = 1 << 6
} GdkWMDecoration;

typedef enum
{
  GDK_FUNC_ALL = 1 << 0,
  GDK_FUNC_RESIZE = 1 << 1,
  GDK_FUNC_MOVE = 1 << 2,
  GDK_FUNC_MINIMIZE = 1 << 3,
  GDK_FUNC_MAXIMIZE = 1 << 4,
  GDK_FUNC_CLOSE = 1 << 5
} GdkWMFunction;





typedef enum
{
  GDK_GRAVITY_NORTH_WEST = 1,
  GDK_GRAVITY_NORTH,
  GDK_GRAVITY_NORTH_EAST,
  GDK_GRAVITY_WEST,
  GDK_GRAVITY_CENTER,
  GDK_GRAVITY_EAST,
  GDK_GRAVITY_SOUTH_WEST,
  GDK_GRAVITY_SOUTH,
  GDK_GRAVITY_SOUTH_EAST,
  GDK_GRAVITY_STATIC
} GdkGravity;


typedef enum
{
  GDK_WINDOW_EDGE_NORTH_WEST,
  GDK_WINDOW_EDGE_NORTH,
  GDK_WINDOW_EDGE_NORTH_EAST,
  GDK_WINDOW_EDGE_WEST,
  GDK_WINDOW_EDGE_EAST,
  GDK_WINDOW_EDGE_SOUTH_WEST,
  GDK_WINDOW_EDGE_SOUTH,
  GDK_WINDOW_EDGE_SOUTH_EAST
} GdkWindowEdge;

struct _GdkWindowAttr
{
  gchar *title;
  gint event_mask;
  gint x, y;
  gint width;
  gint height;
  GdkWindowClass wclass;
  GdkVisual *visual;
  GdkColormap *colormap;
  GdkWindowType window_type;
  GdkCursor *cursor;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gboolean override_redirect;
};

struct _GdkGeometry
{
  gint min_width;
  gint min_height;
  gint max_width;
  gint max_height;
  gint base_width;
  gint base_height;
  gint width_inc;
  gint height_inc;
  gdouble min_aspect;
  gdouble max_aspect;
  GdkGravity win_gravity;
};

struct _GdkPointerHooks
{
  GdkWindow* (*get_pointer) (GdkWindow *window,
                                   gint *x,
                                   gint *y,
                                   GdkModifierType *mask);
  GdkWindow* (*window_at_pointer) (GdkScreen *screen,
                                   gint *win_x,
                                   gint *win_y);
};

typedef struct _GdkWindowObject GdkWindowObject;
typedef struct _GdkWindowObjectClass GdkWindowObjectClass;
# 226 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
struct _GdkWindowObject
{
  GdkDrawable parent_instance;

  GdkDrawable *impl;

  GdkWindowObject *parent;

  gpointer user_data;

  gint x;
  gint y;

  gint extension_events;

  GList *filters;
  GList *children;

  GdkColor bg_color;
  GdkPixmap *bg_pixmap;

  GSList *paint_stack;

  GdkRegion *update_area;
  guint update_freeze_count;

  guint8 window_type;
  guint8 depth;
  guint8 resize_count;

  GdkWindowState state;

  guint guffaw_gravity : 1;
  guint input_only : 1;
  guint modal_hint : 1;

  guint destroyed : 2;

  GdkEventMask event_mask;
};

struct _GdkWindowObjectClass
{
  GdkDrawableClass parent_class;
};



GType gdk_window_object_get_type (void) ;
GdkWindow* gdk_window_new (GdkWindow *parent,
                                                GdkWindowAttr *attributes,
                                                gint attributes_mask);
void gdk_window_destroy (GdkWindow *window);
GdkWindowType gdk_window_get_window_type (GdkWindow *window);
GdkWindow* gdk_window_at_pointer (gint *win_x,
                                                gint *win_y);
void gdk_window_show (GdkWindow *window);
void gdk_window_hide (GdkWindow *window);
void gdk_window_withdraw (GdkWindow *window);
void gdk_window_show_unraised (GdkWindow *window);
void gdk_window_move (GdkWindow *window,
                                                gint x,
                                                gint y);
void gdk_window_resize (GdkWindow *window,
                                                gint width,
                                                gint height);
void gdk_window_move_resize (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_reparent (GdkWindow *window,
                                                GdkWindow *new_parent,
                                                gint x,
                                                gint y);
void gdk_window_clear (GdkWindow *window);
void gdk_window_clear_area (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_clear_area_e (GdkWindow *window,
                                                gint x,
                                                gint y,
                                                gint width,
                                                gint height);
void gdk_window_raise (GdkWindow *window);
void gdk_window_lower (GdkWindow *window);
void gdk_window_focus (GdkWindow *window,
                                                guint32 timestamp);
void gdk_window_set_user_data (GdkWindow *window,
                                                gpointer user_data);
void gdk_window_set_override_redirect (GdkWindow *window,
                                                gboolean override_redirect);
void gdk_window_add_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_remove_filter (GdkWindow *window,
                                                GdkFilterFunc function,
                                                gpointer data);
void gdk_window_scroll (GdkWindow *window,
                                                gint dx,
                                                gint dy);







void gdk_window_shape_combine_mask (GdkWindow *window,
                                     GdkBitmap *mask,
                                     gint x,
                                     gint y);
void gdk_window_shape_combine_region (GdkWindow *window,
                                      GdkRegion *shape_region,
                                      gint offset_x,
                                      gint offset_y);
# 352 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_set_child_shapes (GdkWindow *window);
# 361 "/usr/include/gtk-2.0/gdk/gdkwindow.h"
void gdk_window_merge_child_shapes (GdkWindow *window);







gboolean gdk_window_is_visible (GdkWindow *window);
gboolean gdk_window_is_viewable (GdkWindow *window);

GdkWindowState gdk_window_get_state (GdkWindow *window);




gboolean gdk_window_set_static_gravities (GdkWindow *window,
                                          gboolean use_static);



GdkWindow* gdk_window_foreign_new (GdkNativeWindow anid);
GdkWindow* gdk_window_lookup (GdkNativeWindow anid);

GdkWindow *gdk_window_foreign_new_for_display (GdkDisplay *display,
                                                  GdkNativeWindow anid);
GdkWindow* gdk_window_lookup_for_display (GdkDisplay *display,
                                             GdkNativeWindow anid);





void gdk_window_set_hints (GdkWindow *window,
                                          gint x,
                                          gint y,
                                          gint min_width,
                                          gint min_height,
                                          gint max_width,
                                          gint max_height,
                                          gint flags);

void gdk_window_set_type_hint (GdkWindow *window,
                                           GdkWindowTypeHint hint);
void gdk_window_set_modal_hint (GdkWindow *window,
                                           gboolean modal);

void gdk_window_set_skip_taskbar_hint (GdkWindow *window,
                                       gboolean skips_taskbar);
void gdk_window_set_skip_pager_hint (GdkWindow *window,
                                       gboolean skips_pager);

void gdk_window_set_geometry_hints (GdkWindow *window,
                                             GdkGeometry *geometry,
                                             GdkWindowHints geom_mask);
void gdk_set_sm_client_id (const gchar *sm_client_id);

void gdk_window_begin_paint_rect (GdkWindow *window,
                                             GdkRectangle *rectangle);
void gdk_window_begin_paint_region (GdkWindow *window,
                                             GdkRegion *region);
void gdk_window_end_paint (GdkWindow *window);

void gdk_window_set_title (GdkWindow *window,
                                            const gchar *title);
void gdk_window_set_role (GdkWindow *window,
                                            const gchar *role);
void gdk_window_set_transient_for (GdkWindow *window,
                                            GdkWindow *parent);
void gdk_window_set_background (GdkWindow *window,
                                          GdkColor *color);
void gdk_window_set_back_pixmap (GdkWindow *window,
                                          GdkPixmap *pixmap,
                                          gboolean parent_relative);
void gdk_window_set_cursor (GdkWindow *window,
                                          GdkCursor *cursor);
void gdk_window_get_user_data (GdkWindow *window,
                                          gpointer *data);
void gdk_window_get_geometry (GdkWindow *window,
                                          gint *x,
                                          gint *y,
                                          gint *width,
                                          gint *height,
                                          gint *depth);
void gdk_window_get_position (GdkWindow *window,
                                          gint *x,
                                          gint *y);
gint gdk_window_get_origin (GdkWindow *window,
                                          gint *x,
                                          gint *y);



gboolean gdk_window_get_deskrelative_origin (GdkWindow *window,
                                          gint *x,
                                          gint *y);


void gdk_window_get_root_origin (GdkWindow *window,
                                          gint *x,
                                          gint *y);
void gdk_window_get_frame_extents (GdkWindow *window,
                                            GdkRectangle *rect);
GdkWindow* gdk_window_get_pointer (GdkWindow *window,
                                          gint *x,
                                          gint *y,
                                          GdkModifierType *mask);
GdkWindow * gdk_window_get_parent (GdkWindow *window);
GdkWindow * gdk_window_get_toplevel (GdkWindow *window);

GList * gdk_window_get_children (GdkWindow *window);
GList * gdk_window_peek_children (GdkWindow *window);
GdkEventMask gdk_window_get_events (GdkWindow *window);
void gdk_window_set_events (GdkWindow *window,
                                          GdkEventMask event_mask);

void gdk_window_set_icon_list (GdkWindow *window,
                                          GList *pixbufs);
void gdk_window_set_icon (GdkWindow *window,
                                          GdkWindow *icon_window,
                                          GdkPixmap *pixmap,
                                          GdkBitmap *mask);
void gdk_window_set_icon_name (GdkWindow *window,
                                          const gchar *name);
void gdk_window_set_group (GdkWindow *window,
                                          GdkWindow *leader);
void gdk_window_set_decorations (GdkWindow *window,
                                          GdkWMDecoration decorations);
gboolean gdk_window_get_decorations (GdkWindow *window,
                                          GdkWMDecoration *decorations);
void gdk_window_set_functions (GdkWindow *window,
                                          GdkWMFunction functions);

GList * gdk_window_get_toplevels (void);


void gdk_window_iconify (GdkWindow *window);
void gdk_window_deiconify (GdkWindow *window);
void gdk_window_stick (GdkWindow *window);
void gdk_window_unstick (GdkWindow *window);
void gdk_window_maximize (GdkWindow *window);
void gdk_window_unmaximize (GdkWindow *window);
void gdk_window_fullscreen (GdkWindow *window);
void gdk_window_unfullscreen (GdkWindow *window);

void gdk_window_register_dnd (GdkWindow *window);

void gdk_window_begin_resize_drag (GdkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
void gdk_window_begin_move_drag (GdkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);


void gdk_window_invalidate_rect (GdkWindow *window,
                                                 GdkRectangle *rect,
                                                 gboolean invalidate_children);
void gdk_window_invalidate_region (GdkWindow *window,
                                                 GdkRegion *region,
                                                 gboolean invalidate_children);
void gdk_window_invalidate_maybe_recurse (GdkWindow *window,
                                                 GdkRegion *region,
                                                 gboolean (*child_func) (GdkWindow *, gpointer),
                                                 gpointer user_data);
GdkRegion *gdk_window_get_update_area (GdkWindow *window);

void gdk_window_freeze_updates (GdkWindow *window);
void gdk_window_thaw_updates (GdkWindow *window);

void gdk_window_process_all_updates (void);
void gdk_window_process_updates (GdkWindow *window,
                                           gboolean update_children);


void gdk_window_set_debug_updates (gboolean setting);

void gdk_window_constrain_size (GdkGeometry *geometry,
                                           guint flags,
                                           gint width,
                                           gint height,
                                           gint *new_width,
                                           gint *new_height);

void gdk_window_get_internal_paint_info (GdkWindow *window,
                                         GdkDrawable **real_drawable,
                                         gint *x_offset,
                                         gint *y_offset);


GdkPointerHooks *gdk_set_pointer_hooks (const GdkPointerHooks *new_hooks);


GdkWindow *gdk_get_default_root_window (void);
# 54 "/usr/include/gtk-2.0/gdk/gdk.h" 2
# 63 "/usr/include/gtk-2.0/gdk/gdk.h"
void gdk_parse_args (gint *argc,
                                         gchar ***argv);
void gdk_init (gint *argc,
                                         gchar ***argv);
gboolean gdk_init_check (gint *argc,
                                         gchar ***argv);


void gdk_exit (gint error_code);

gchar* gdk_set_locale (void);

const char *gdk_get_program_class (void);
void gdk_set_program_class (const char *program_class);



void gdk_error_trap_push (void);
gint gdk_error_trap_pop (void);


void gdk_set_use_xshm (gboolean use_xshm);
gboolean gdk_get_use_xshm (void);


gchar* gdk_get_display (void);
const gchar* gdk_get_display_arg_name (void);



gint gdk_input_add_full (gint source,
                           GdkInputCondition condition,
                           GdkInputFunction function,
                           gpointer data,
                           GdkDestroyNotify destroy);


gint gdk_input_add (gint source,
                           GdkInputCondition condition,
                           GdkInputFunction function,
                           gpointer data);
void gdk_input_remove (gint tag);


GdkGrabStatus gdk_pointer_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      GdkEventMask event_mask,
                                      GdkWindow *confine_to,
                                      GdkCursor *cursor,
                                      guint32 time_);
GdkGrabStatus gdk_keyboard_grab (GdkWindow *window,
                                      gboolean owner_events,
                                      guint32 time_);


void gdk_pointer_ungrab (guint32 time_);
void gdk_keyboard_ungrab (guint32 time_);
gboolean gdk_pointer_is_grabbed (void);

gint gdk_screen_width (void) ;
gint gdk_screen_height (void) ;

gint gdk_screen_width_mm (void) ;
gint gdk_screen_height_mm (void) ;

void gdk_beep (void);


void gdk_flush (void);


void gdk_set_double_click_time (guint msec);




gboolean gdk_rectangle_intersect (GdkRectangle *src1,
                                  GdkRectangle *src2,
                                  GdkRectangle *dest);
void gdk_rectangle_union (GdkRectangle *src1,
                                  GdkRectangle *src2,
                                  GdkRectangle *dest);

GType gdk_rectangle_get_type (void);





gchar *gdk_wcstombs (const GdkWChar *src);
gint gdk_mbstowcs (GdkWChar *dest,
                                  const gchar *src,
                                  gint dest_max);



gboolean gdk_event_send_client_message (GdkEvent *event,
                                             GdkNativeWindow winid);
void gdk_event_send_clientmessage_toall (GdkEvent *event);

gboolean gdk_event_send_client_message_for_display (GdkDisplay *display,
                                                    GdkEvent *event,
                                                    GdkNativeWindow winid);

void gdk_notify_startup_complete (void);




extern GMutex *gdk_threads_mutex;

void gdk_threads_enter (void);
void gdk_threads_leave (void);
void gdk_threads_init (void);
# 32 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkenums.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkenums.h"
typedef enum
{
  GTK_ANCHOR_CENTER,
  GTK_ANCHOR_NORTH,
  GTK_ANCHOR_NORTH_WEST,
  GTK_ANCHOR_NORTH_EAST,
  GTK_ANCHOR_SOUTH,
  GTK_ANCHOR_SOUTH_WEST,
  GTK_ANCHOR_SOUTH_EAST,
  GTK_ANCHOR_WEST,
  GTK_ANCHOR_EAST,
  GTK_ANCHOR_N = GTK_ANCHOR_NORTH,
  GTK_ANCHOR_NW = GTK_ANCHOR_NORTH_WEST,
  GTK_ANCHOR_NE = GTK_ANCHOR_NORTH_EAST,
  GTK_ANCHOR_S = GTK_ANCHOR_SOUTH,
  GTK_ANCHOR_SW = GTK_ANCHOR_SOUTH_WEST,
  GTK_ANCHOR_SE = GTK_ANCHOR_SOUTH_EAST,
  GTK_ANCHOR_W = GTK_ANCHOR_WEST,
  GTK_ANCHOR_E = GTK_ANCHOR_EAST
} GtkAnchorType;


typedef enum
{
  GTK_ARROW_UP,
  GTK_ARROW_DOWN,
  GTK_ARROW_LEFT,
  GTK_ARROW_RIGHT
} GtkArrowType;


typedef enum
{
  GTK_EXPAND = 1 << 0,
  GTK_SHRINK = 1 << 1,
  GTK_FILL = 1 << 2
} GtkAttachOptions;


typedef enum
{
  GTK_BUTTONBOX_DEFAULT_STYLE,
  GTK_BUTTONBOX_SPREAD,
  GTK_BUTTONBOX_EDGE,
  GTK_BUTTONBOX_START,
  GTK_BUTTONBOX_END
} GtkButtonBoxStyle;


typedef enum
{
  GTK_CURVE_TYPE_LINEAR,
  GTK_CURVE_TYPE_SPLINE,
  GTK_CURVE_TYPE_FREE
} GtkCurveType;

typedef enum {
  GTK_DELETE_CHARS,
  GTK_DELETE_WORD_ENDS,


  GTK_DELETE_WORDS,
  GTK_DELETE_DISPLAY_LINES,
  GTK_DELETE_DISPLAY_LINE_ENDS,
  GTK_DELETE_PARAGRAPH_ENDS,
  GTK_DELETE_PARAGRAPHS,
  GTK_DELETE_WHITESPACE
} GtkDeleteType;


typedef enum
{
  GTK_DIR_TAB_FORWARD,
  GTK_DIR_TAB_BACKWARD,
  GTK_DIR_UP,
  GTK_DIR_DOWN,
  GTK_DIR_LEFT,
  GTK_DIR_RIGHT
} GtkDirectionType;


typedef enum
{
  GTK_EXPANDER_COLLAPSED,
  GTK_EXPANDER_SEMI_COLLAPSED,
  GTK_EXPANDER_SEMI_EXPANDED,
  GTK_EXPANDER_EXPANDED
} GtkExpanderStyle;


typedef enum
{
  GTK_ICON_SIZE_INVALID,
  GTK_ICON_SIZE_MENU,
  GTK_ICON_SIZE_SMALL_TOOLBAR,
  GTK_ICON_SIZE_LARGE_TOOLBAR,
  GTK_ICON_SIZE_BUTTON,
  GTK_ICON_SIZE_DND,
  GTK_ICON_SIZE_DIALOG
} GtkIconSize;



typedef enum
{
  GTK_SIDE_TOP,
  GTK_SIDE_BOTTOM,
  GTK_SIDE_LEFT,
  GTK_SIDE_RIGHT
} GtkSideType;



typedef enum
{
  GTK_TEXT_DIR_NONE,
  GTK_TEXT_DIR_LTR,
  GTK_TEXT_DIR_RTL
} GtkTextDirection;


typedef enum
{
  GTK_JUSTIFY_LEFT,
  GTK_JUSTIFY_RIGHT,
  GTK_JUSTIFY_CENTER,
  GTK_JUSTIFY_FILL
} GtkJustification;



typedef enum
{
  GTK_MATCH_ALL,
  GTK_MATCH_ALL_TAIL,
  GTK_MATCH_HEAD,
  GTK_MATCH_TAIL,
  GTK_MATCH_EXACT,
  GTK_MATCH_LAST
} GtkMatchType;



typedef enum
{
  GTK_MENU_DIR_PARENT,
  GTK_MENU_DIR_CHILD,
  GTK_MENU_DIR_NEXT,
  GTK_MENU_DIR_PREV
} GtkMenuDirectionType;

typedef enum
{
  GTK_PIXELS,
  GTK_INCHES,
  GTK_CENTIMETERS
} GtkMetricType;

typedef enum {
  GTK_MOVEMENT_LOGICAL_POSITIONS,
  GTK_MOVEMENT_VISUAL_POSITIONS,
  GTK_MOVEMENT_WORDS,
  GTK_MOVEMENT_DISPLAY_LINES,
  GTK_MOVEMENT_DISPLAY_LINE_ENDS,
  GTK_MOVEMENT_PARAGRAPHS,
  GTK_MOVEMENT_PARAGRAPH_ENDS,
  GTK_MOVEMENT_PAGES,
  GTK_MOVEMENT_BUFFER_ENDS
} GtkMovementStep;


typedef enum
{
  GTK_ORIENTATION_HORIZONTAL,
  GTK_ORIENTATION_VERTICAL
} GtkOrientation;


typedef enum
{
  GTK_CORNER_TOP_LEFT,
  GTK_CORNER_BOTTOM_LEFT,
  GTK_CORNER_TOP_RIGHT,
  GTK_CORNER_BOTTOM_RIGHT
} GtkCornerType;


typedef enum
{
  GTK_PACK_START,
  GTK_PACK_END
} GtkPackType;


typedef enum
{
  GTK_PATH_PRIO_LOWEST = 0,
  GTK_PATH_PRIO_GTK = 4,
  GTK_PATH_PRIO_APPLICATION = 8,
  GTK_PATH_PRIO_THEME = 10,
  GTK_PATH_PRIO_RC = 12,
  GTK_PATH_PRIO_HIGHEST = 15
} GtkPathPriorityType;



typedef enum
{
  GTK_PATH_WIDGET,
  GTK_PATH_WIDGET_CLASS,
  GTK_PATH_CLASS
} GtkPathType;


typedef enum
{
  GTK_POLICY_ALWAYS,
  GTK_POLICY_AUTOMATIC,
  GTK_POLICY_NEVER
} GtkPolicyType;

typedef enum
{
  GTK_POS_LEFT,
  GTK_POS_RIGHT,
  GTK_POS_TOP,
  GTK_POS_BOTTOM
} GtkPositionType;


typedef enum
{
  GTK_PREVIEW_COLOR,
  GTK_PREVIEW_GRAYSCALE
} GtkPreviewType;



typedef enum
{
  GTK_RELIEF_NORMAL,
  GTK_RELIEF_HALF,
  GTK_RELIEF_NONE
} GtkReliefStyle;


typedef enum
{
  GTK_RESIZE_PARENT,
  GTK_RESIZE_QUEUE,
  GTK_RESIZE_IMMEDIATE
} GtkResizeMode;



typedef enum
{
  GTK_RUN_FIRST = G_SIGNAL_RUN_FIRST,
  GTK_RUN_LAST = G_SIGNAL_RUN_LAST,
  GTK_RUN_BOTH = (GTK_RUN_FIRST | GTK_RUN_LAST),
  GTK_RUN_NO_RECURSE = G_SIGNAL_NO_RECURSE,
  GTK_RUN_ACTION = G_SIGNAL_ACTION,
  GTK_RUN_NO_HOOKS = G_SIGNAL_NO_HOOKS
} GtkSignalRunType;



typedef enum
{
  GTK_SCROLL_NONE,
  GTK_SCROLL_JUMP,
  GTK_SCROLL_STEP_BACKWARD,
  GTK_SCROLL_STEP_FORWARD,
  GTK_SCROLL_PAGE_BACKWARD,
  GTK_SCROLL_PAGE_FORWARD,
  GTK_SCROLL_STEP_UP,
  GTK_SCROLL_STEP_DOWN,
  GTK_SCROLL_PAGE_UP,
  GTK_SCROLL_PAGE_DOWN,
  GTK_SCROLL_STEP_LEFT,
  GTK_SCROLL_STEP_RIGHT,
  GTK_SCROLL_PAGE_LEFT,
  GTK_SCROLL_PAGE_RIGHT,
  GTK_SCROLL_START,
  GTK_SCROLL_END
} GtkScrollType;


typedef enum
{
  GTK_SELECTION_NONE,
  GTK_SELECTION_SINGLE,
  GTK_SELECTION_BROWSE,
  GTK_SELECTION_MULTIPLE,
  GTK_SELECTION_EXTENDED = GTK_SELECTION_MULTIPLE
} GtkSelectionMode;


typedef enum
{
  GTK_SHADOW_NONE,
  GTK_SHADOW_IN,
  GTK_SHADOW_OUT,
  GTK_SHADOW_ETCHED_IN,
  GTK_SHADOW_ETCHED_OUT
} GtkShadowType;


typedef enum
{
  GTK_STATE_NORMAL,
  GTK_STATE_ACTIVE,
  GTK_STATE_PRELIGHT,
  GTK_STATE_SELECTED,
  GTK_STATE_INSENSITIVE
} GtkStateType;



typedef enum
{
  GTK_DIRECTION_LEFT,
  GTK_DIRECTION_RIGHT
} GtkSubmenuDirection;


typedef enum
{
  GTK_TOP_BOTTOM,
  GTK_LEFT_RIGHT
} GtkSubmenuPlacement;



typedef enum
{
  GTK_TOOLBAR_ICONS,
  GTK_TOOLBAR_TEXT,
  GTK_TOOLBAR_BOTH,
  GTK_TOOLBAR_BOTH_HORIZ
} GtkToolbarStyle;


typedef enum
{
  GTK_UPDATE_CONTINUOUS,
  GTK_UPDATE_DISCONTINUOUS,
  GTK_UPDATE_DELAYED
} GtkUpdateType;


typedef enum
{
  GTK_VISIBILITY_NONE,
  GTK_VISIBILITY_PARTIAL,
  GTK_VISIBILITY_FULL
} GtkVisibility;


typedef enum
{
  GTK_WIN_POS_NONE,
  GTK_WIN_POS_CENTER,
  GTK_WIN_POS_MOUSE,
  GTK_WIN_POS_CENTER_ALWAYS,
  GTK_WIN_POS_CENTER_ON_PARENT
} GtkWindowPosition;


typedef enum
{
  GTK_WINDOW_TOPLEVEL,
  GTK_WINDOW_POPUP
} GtkWindowType;


typedef enum
{
  GTK_WRAP_NONE,
  GTK_WRAP_CHAR,
  GTK_WRAP_WORD
} GtkWrapMode;


typedef enum
{
  GTK_SORT_ASCENDING,
  GTK_SORT_DESCENDING
} GtkSortType;


typedef enum
{
  GTK_IM_PREEDIT_NOTHING,
  GTK_IM_PREEDIT_CALLBACK
} GtkIMPreeditStyle;

typedef enum
{
  GTK_IM_STATUS_NOTHING,
  GTK_IM_STATUS_CALLBACK
} GtkIMStatusStyle;
# 33 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h" 2


# 47 "/usr/include/gtk-2.0/gtk/gtkaccelgroup.h"
typedef enum
{
  GTK_ACCEL_VISIBLE = 1 << 0,
  GTK_ACCEL_LOCKED = 1 << 1,
  GTK_ACCEL_MASK = 0x07
} GtkAccelFlags;



typedef struct _GtkAccelGroup GtkAccelGroup;
typedef struct _GtkAccelGroupClass GtkAccelGroupClass;
typedef struct _GtkAccelKey GtkAccelKey;
typedef struct _GtkAccelGroupEntry GtkAccelGroupEntry;
typedef gboolean (*GtkAccelGroupActivate) (GtkAccelGroup *accel_group,
                                           GObject *acceleratable,
                                           guint keyval,
                                           GdkModifierType modifier);

typedef gboolean (*GtkAccelGroupFindFunc) (GtkAccelKey *key,
                                           GClosure *closure,
                                           gpointer data);

struct _GtkAccelGroup
{
  GObject parent;
  guint lock_count;
  GdkModifierType modifier_mask;
  GSList *acceleratables;
  guint n_accels;
  GtkAccelGroupEntry *priv_accels;
};

struct _GtkAccelGroupClass
{
  GObjectClass parent_class;

  void (*accel_changed) (GtkAccelGroup *accel_group,
                                 guint keyval,
                                 GdkModifierType modifier,
                                 GClosure *accel_closure);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkAccelKey
{
  guint accel_key;
  GdkModifierType accel_mods;
  guint accel_flags : 16;
};



GType gtk_accel_group_get_type (void);
GtkAccelGroup* gtk_accel_group_new (void);
void gtk_accel_group_lock (GtkAccelGroup *accel_group);
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);
void gtk_accel_group_connect (GtkAccelGroup *accel_group,
                                                   guint accel_key,
                                                   GdkModifierType accel_mods,
                                                   GtkAccelFlags accel_flags,
                                                   GClosure *closure);
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group,
                                                   const gchar *accel_path,
                                                   GClosure *closure);
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group,
                                                   GClosure *closure);
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group,
                                                   guint accel_key,
                                                   GdkModifierType accel_mods);



void _gtk_accel_group_attach (GtkAccelGroup *accel_group,
                                                 GObject *object);
void _gtk_accel_group_detach (GtkAccelGroup *accel_group,
                                                 GObject *object);
gboolean gtk_accel_groups_activate (GObject *object,
                                                 guint accel_key,
                                                 GdkModifierType accel_mods);
GSList* gtk_accel_groups_from_object (GObject *object);
GtkAccelKey* gtk_accel_group_find (GtkAccelGroup *accel_group,
                                                 GtkAccelGroupFindFunc find_func,
                                                 gpointer data);
GtkAccelGroup* gtk_accel_group_from_accel_closure (GClosure *closure);



gboolean gtk_accelerator_valid (guint keyval,
                                               GdkModifierType modifiers) ;
void gtk_accelerator_parse (const gchar *accelerator,
                                               guint *accelerator_key,
                                               GdkModifierType *accelerator_mods);
gchar* gtk_accelerator_name (guint accelerator_key,
                                               GdkModifierType accelerator_mods);
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);
guint gtk_accelerator_get_default_mod_mask (void);



GtkAccelGroupEntry* gtk_accel_group_query (GtkAccelGroup *accel_group,
                                                 guint accel_key,
                                                 GdkModifierType accel_mods,
                                                 guint *n_entries);

void _gtk_accel_group_reconnect (GtkAccelGroup *accel_group,
                                                 GQuark accel_path_quark);

struct _GtkAccelGroupEntry
{
  GtkAccelKey key;
  GClosure *closure;
  GQuark accel_path_quark;
};








# 33 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtklabel.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtklabel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkmisc.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkobject.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkobject.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"

# 62 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GType GtkFundamentalType;
# 89 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GType GtkType;



typedef GTypeInstance GtkTypeObject;
typedef GTypeClass GtkTypeClass;
typedef GBaseInitFunc GtkClassInitFunc;
typedef GInstanceInitFunc GtkObjectInitFunc;







# 1 "/usr/include/gtk-2.0/gtk/gtktypebuiltins.h" 1
# 9 "/usr/include/gtk-2.0/gtk/gtktypebuiltins.h"




GType gtk_accel_flags_get_type (void);




GType gtk_calendar_display_options_get_type (void);




GType gtk_cell_type_get_type (void);


GType gtk_clist_drag_pos_get_type (void);


GType gtk_button_action_get_type (void);




GType gtk_ctree_pos_get_type (void);


GType gtk_ctree_line_style_get_type (void);


GType gtk_ctree_expander_style_get_type (void);


GType gtk_ctree_expansion_type_get_type (void);




GType gtk_cell_renderer_state_get_type (void);


GType gtk_cell_renderer_mode_get_type (void);




GType gtk_debug_flag_get_type (void);




GType gtk_dialog_flags_get_type (void);


GType gtk_response_type_get_type (void);




GType gtk_dest_defaults_get_type (void);


GType gtk_target_flags_get_type (void);




GType gtk_anchor_type_get_type (void);


GType gtk_arrow_type_get_type (void);


GType gtk_attach_options_get_type (void);


GType gtk_button_box_style_get_type (void);


GType gtk_curve_type_get_type (void);


GType gtk_delete_type_get_type (void);


GType gtk_direction_type_get_type (void);


GType gtk_expander_style_get_type (void);


GType gtk_icon_size_get_type (void);


GType gtk_side_type_get_type (void);


GType gtk_text_direction_get_type (void);


GType gtk_justification_get_type (void);


GType gtk_match_type_get_type (void);


GType gtk_menu_direction_type_get_type (void);


GType gtk_metric_type_get_type (void);


GType gtk_movement_step_get_type (void);


GType gtk_orientation_get_type (void);


GType gtk_corner_type_get_type (void);


GType gtk_pack_type_get_type (void);


GType gtk_path_priority_type_get_type (void);


GType gtk_path_type_get_type (void);


GType gtk_policy_type_get_type (void);


GType gtk_position_type_get_type (void);


GType gtk_preview_type_get_type (void);


GType gtk_relief_style_get_type (void);


GType gtk_resize_mode_get_type (void);


GType gtk_signal_run_type_get_type (void);


GType gtk_scroll_type_get_type (void);


GType gtk_selection_mode_get_type (void);


GType gtk_shadow_type_get_type (void);


GType gtk_state_type_get_type (void);


GType gtk_submenu_direction_get_type (void);


GType gtk_submenu_placement_get_type (void);


GType gtk_toolbar_style_get_type (void);


GType gtk_update_type_get_type (void);


GType gtk_visibility_get_type (void);


GType gtk_window_position_get_type (void);


GType gtk_window_type_get_type (void);


GType gtk_wrap_mode_get_type (void);


GType gtk_sort_type_get_type (void);


GType gtk_im_preedit_style_get_type (void);


GType gtk_im_status_style_get_type (void);




GType gtk_image_type_get_type (void);




GType gtk_message_type_get_type (void);


GType gtk_buttons_type_get_type (void);




GType gtk_notebook_tab_get_type (void);




GType gtk_object_flags_get_type (void);


GType gtk_arg_flags_get_type (void);




GType gtk_private_flags_get_type (void);




GType gtk_progress_bar_style_get_type (void);


GType gtk_progress_bar_orientation_get_type (void);




GType gtk_rc_flags_get_type (void);


GType gtk_rc_token_type_get_type (void);




GType gtk_size_group_mode_get_type (void);




GType gtk_spin_button_update_policy_get_type (void);


GType gtk_spin_type_get_type (void);




GType gtk_text_search_flags_get_type (void);




GType gtk_text_window_type_get_type (void);




GType gtk_toolbar_child_type_get_type (void);


GType gtk_toolbar_space_style_get_type (void);




GType gtk_tree_view_mode_get_type (void);




GType gtk_tree_model_flags_get_type (void);




GType gtk_tree_view_drop_position_get_type (void);




GType gtk_tree_view_column_sizing_get_type (void);




GType gtk_widget_flags_get_type (void);


GType gtk_widget_help_type_get_type (void);



# 105 "/usr/include/gtk-2.0/gtk/gtktypeutils.h" 2





GType gtk_identifier_get_type (void);





typedef struct _GtkArg GtkArg;
typedef struct _GtkObject GtkObject;
typedef gboolean (*GtkFunction) (gpointer data);
typedef void (*GtkDestroyNotify) (gpointer data);
typedef void (*GtkCallbackMarshal) (GtkObject *object,
                                     gpointer data,
                                     guint n_args,
                                     GtkArg *args);
typedef void (*GtkSignalFunc) (void);



typedef struct _GtkTypeInfo GtkTypeInfo;
typedef GSignalCMarshaller GtkSignalMarshaller;






struct _GtkArg
{
  GtkType type;
  gchar *name;







  union {

    gchar char_data;
    guchar uchar_data;
    gboolean bool_data;
    gint int_data;
    guint uint_data;
    glong long_data;
    gulong ulong_data;
    gfloat float_data;
    gdouble double_data;
    gchar *string_data;
    GtkObject *object_data;
    gpointer pointer_data;


    struct {
      GtkSignalFunc f;
      gpointer d;
    } signal_data;
  } d;
};
# 218 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
struct _GtkTypeInfo
{
  gchar *type_name;
  guint object_size;
  guint class_size;
  GtkClassInitFunc class_init_func;
  GtkObjectInitFunc object_init_func;
  gpointer reserved_1;
  gpointer reserved_2;
  GtkClassInitFunc base_class_init_func;
};



gpointer gtk_type_class (GtkType type);



GtkType gtk_type_unique (GtkType parent_type,
                                 const GtkTypeInfo *gtkinfo);
gpointer gtk_type_new (GtkType type);
# 249 "/usr/include/gtk-2.0/gtk/gtktypeutils.h"
typedef GEnumValue GtkEnumValue;
typedef GFlagsValue GtkFlagValue;
GtkEnumValue* gtk_type_enum_get_values (GtkType enum_type);
GtkFlagValue* gtk_type_flags_get_values (GtkType flags_type);
GtkEnumValue* gtk_type_enum_find_value (GtkType enum_type,
                                                 const gchar *value_name);
GtkFlagValue* gtk_type_flags_find_value (GtkType flags_type,
                                                 const gchar *value_name);





void gtk_type_init (GTypeDebugFlags debug_flags);



# 33 "/usr/include/gtk-2.0/gtk/gtkobject.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkdebug.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkdebug.h"


typedef enum {
  GTK_DEBUG_MISC = 1 << 0,
  GTK_DEBUG_PLUGSOCKET = 1 << 1,
  GTK_DEBUG_TEXT = 1 << 2,
  GTK_DEBUG_TREE = 1 << 3,
  GTK_DEBUG_UPDATES = 1 << 4,
  GTK_DEBUG_KEYBINDINGS = 1 << 5,
  GTK_DEBUG_MULTIHEAD = 1 << 6
} GtkDebugFlag;
# 66 "/usr/include/gtk-2.0/gtk/gtkdebug.h"
extern guint gtk_debug_flags;


# 34 "/usr/include/gtk-2.0/gtk/gtkobject.h" 2


# 58 "/usr/include/gtk-2.0/gtk/gtkobject.h"
typedef enum
{
  GTK_IN_DESTRUCTION = 1 << 0,
  GTK_FLOATING = 1 << 1,
  GTK_RESERVED_1 = 1 << 2,
  GTK_RESERVED_2 = 1 << 3
} GtkObjectFlags;
# 76 "/usr/include/gtk-2.0/gtk/gtkobject.h"
typedef struct _GtkObjectClass GtkObjectClass;


struct _GtkObject
{
  GObject parent_instance;






  guint32 flags;
};

struct _GtkObjectClass
{
  GObjectClass parent_class;


  void (*set_arg) (GtkObject *object,
                   GtkArg *arg,
                   guint arg_id);
  void (*get_arg) (GtkObject *object,
                   GtkArg *arg,
                   guint arg_id);
# 111 "/usr/include/gtk-2.0/gtk/gtkobject.h"
  void (*destroy) (GtkObject *object);
};





GtkType gtk_object_get_type (void) ;

GtkObject* gtk_object_new (GtkType type,
                                           const gchar *first_property_name,
                                           ...);

void gtk_object_sink (GtkObject *object);
void gtk_object_destroy (GtkObject *object);





GtkObject* gtk_object_ref (GtkObject *object);
void gtk_object_unref (GtkObject *object);
void gtk_object_weakref (GtkObject *object,
                           GtkDestroyNotify notify,
                           gpointer data);
void gtk_object_weakunref (GtkObject *object,
                           GtkDestroyNotify notify,
                           gpointer data);
# 152 "/usr/include/gtk-2.0/gtk/gtkobject.h"
void gtk_object_set_data (GtkObject *object,
                                      const gchar *key,
                                      gpointer data);
void gtk_object_set_data_full (GtkObject *object,
                                      const gchar *key,
                                      gpointer data,
                                      GtkDestroyNotify destroy);
void gtk_object_remove_data (GtkObject *object,
                                      const gchar *key);
gpointer gtk_object_get_data (GtkObject *object,
                                      const gchar *key);
void gtk_object_remove_no_notify (GtkObject *object,
                                      const gchar *key);






void gtk_object_set_user_data (GtkObject *object,
                                   gpointer data);
gpointer gtk_object_get_user_data (GtkObject *object);





void gtk_object_set_data_by_id (GtkObject *object,
                                         GQuark data_id,
                                         gpointer data);
void gtk_object_set_data_by_id_full (GtkObject *object,
                                         GQuark data_id,
                                         gpointer data,
                                         GtkDestroyNotify destroy);
gpointer gtk_object_get_data_by_id (GtkObject *object,
                                         GQuark data_id);
void gtk_object_remove_data_by_id (GtkObject *object,
                                         GQuark data_id);
void gtk_object_remove_no_notify_by_id (GtkObject *object,
                                         GQuark key_id);





typedef enum
{
  GTK_ARG_READABLE = G_PARAM_READABLE,
  GTK_ARG_WRITABLE = G_PARAM_WRITABLE,
  GTK_ARG_CONSTRUCT = G_PARAM_CONSTRUCT,
  GTK_ARG_CONSTRUCT_ONLY = G_PARAM_CONSTRUCT_ONLY,
  GTK_ARG_CHILD_ARG = 1 << 4
} GtkArgFlags;

void gtk_object_get (GtkObject *object,
                                 const gchar *first_property_name,
                                 ...);
void gtk_object_set (GtkObject *object,
                                 const gchar *first_property_name,
                                 ...);
void gtk_object_add_arg_type (const gchar *arg_name,
                                         GtkType arg_type,
                                         guint arg_flags,
                                         guint arg_id);




# 33 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkadjustment.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkadjustment.h"
typedef struct _GtkAdjustment GtkAdjustment;
typedef struct _GtkAdjustmentClass GtkAdjustmentClass;

struct _GtkAdjustment
{
  GtkObject parent_instance;

  gdouble lower;
  gdouble upper;
  gdouble value;
  gdouble step_increment;
  gdouble page_increment;
  gdouble page_size;
};

struct _GtkAdjustmentClass
{
  GtkObjectClass parent_class;

  void (* changed) (GtkAdjustment *adjustment);
  void (* value_changed) (GtkAdjustment *adjustment);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_adjustment_get_type (void) ;
GtkObject* gtk_adjustment_new (gdouble value,
                                                 gdouble lower,
                                                 gdouble upper,
                                                 gdouble step_increment,
                                                 gdouble page_increment,
                                                 gdouble page_size);
void gtk_adjustment_changed (GtkAdjustment *adjustment);
void gtk_adjustment_value_changed (GtkAdjustment *adjustment);
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment,
                                                 gdouble lower,
                                                 gdouble upper);
gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);
void gtk_adjustment_set_value (GtkAdjustment *adjustment,
                                                 gdouble value);
# 34 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstyle.h" 1
# 51 "/usr/include/gtk-2.0/gtk/gtkstyle.h"
typedef struct _GtkBorder GtkBorder;
typedef struct _GtkStyle GtkStyle;
typedef struct _GtkStyleClass GtkStyleClass;
typedef struct _GtkThemeEngine GtkThemeEngine;
typedef struct _GtkRcStyle GtkRcStyle;
typedef struct _GtkIconSet GtkIconSet;
typedef struct _GtkIconSource GtkIconSource;
typedef struct _GtkRcProperty GtkRcProperty;
typedef struct _GtkSettings GtkSettings;
typedef gboolean (*GtkRcPropertyParser) (const GParamSpec *pspec,
                                         const GString *rc_string,
                                         GValue *property_value);




typedef struct _GtkWidget GtkWidget;



struct _GtkStyle
{
  GObject parent_instance;



  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor light[5];
  GdkColor dark[5];
  GdkColor mid[5];
  GdkColor text[5];
  GdkColor base[5];
  GdkColor text_aa[5];

  GdkColor black;
  GdkColor white;
  PangoFontDescription *font_desc;

  gint xthickness;
  gint ythickness;

  GdkGC *fg_gc[5];
  GdkGC *bg_gc[5];
  GdkGC *light_gc[5];
  GdkGC *dark_gc[5];
  GdkGC *mid_gc[5];
  GdkGC *text_gc[5];
  GdkGC *base_gc[5];
  GdkGC *text_aa_gc[5];
  GdkGC *black_gc;
  GdkGC *white_gc;

  GdkPixmap *bg_pixmap[5];



  gint attach_count;

  gint depth;
  GdkColormap *colormap;
  GdkFont *private_font;
  PangoFontDescription *private_font_desc;


  GtkRcStyle *rc_style;

  GSList *styles;
  GArray *property_cache;
  GSList *icon_factories;
};

struct _GtkStyleClass
{
  GObjectClass parent_class;





  void (*realize) (GtkStyle *style);




  void (*unrealize) (GtkStyle *style);



  void (*copy) (GtkStyle *style,
                                 GtkStyle *src);






  GtkStyle *(*clone) (GtkStyle *style);




  void (*init_from_rc) (GtkStyle *style,
                                 GtkRcStyle *rc_style);

  void (*set_background) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type);


  GdkPixbuf * (* render_icon) (GtkStyle *style,
                                 const GtkIconSource *source,
                                 GtkTextDirection direction,
                                 GtkStateType state,
                                 GtkIconSize size,
                                 GtkWidget *widget,
                                 const gchar *detail);




  void (*draw_hline) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x1,
                                 gint x2,
                                 gint y);
  void (*draw_vline) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint y1_,
                                 gint y2_,
                                 gint x);
  void (*draw_shadow) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_polygon) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GdkPoint *point,
                                 gint npoints,
                                 gboolean fill);
  void (*draw_arrow) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GtkArrowType arrow_type,
                                 gboolean fill,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_diamond) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_string) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 const gchar *string);
  void (*draw_box) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_flat_box) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_check) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_option) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_tab) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_shadow_gap) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_box_gap) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side,
                                 gint gap_x,
                                 gint gap_width);
  void (*draw_extension) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkPositionType gap_side);
  void (*draw_focus) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);
  void (*draw_slider) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);
  void (*draw_handle) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GtkShadowType shadow_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height,
                                 GtkOrientation orientation);

  void (*draw_expander) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 GtkExpanderStyle expander_style);
  void (*draw_layout) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 gboolean use_text,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 gint x,
                                 gint y,
                                 PangoLayout *layout);
  void (*draw_resize_grip) (GtkStyle *style,
                                 GdkWindow *window,
                                 GtkStateType state_type,
                                 GdkRectangle *area,
                                 GtkWidget *widget,
                                 const gchar *detail,
                                 GdkWindowEdge edge,
                                 gint x,
                                 gint y,
                                 gint width,
                                 gint height);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
  void (*_gtk_reserved9) (void);
  void (*_gtk_reserved10) (void);
  void (*_gtk_reserved11) (void);
  void (*_gtk_reserved12) (void);
};

struct _GtkBorder
{
  gint left;
  gint right;
  gint top;
  gint bottom;
};

GType gtk_style_get_type (void) ;
GtkStyle* gtk_style_new (void);
GtkStyle* gtk_style_copy (GtkStyle *style);
GtkStyle* gtk_style_attach (GtkStyle *style,
                                              GdkWindow *window);
void gtk_style_detach (GtkStyle *style);


GtkStyle* gtk_style_ref (GtkStyle *style);
void gtk_style_unref (GtkStyle *style);

GdkFont * gtk_style_get_font (GtkStyle *style);
void gtk_style_set_font (GtkStyle *style,
                                              GdkFont *font);


void gtk_style_set_background (GtkStyle *style,
                                              GdkWindow *window,
                                              GtkStateType state_type);
void gtk_style_apply_default_background (GtkStyle *style,
                                              GdkWindow *window,
                                              gboolean set_bg,
                                              GtkStateType state_type,
                                              GdkRectangle *area,
                                              gint x,
                                              gint y,
                                              gint width,
                                              gint height);

GtkIconSet* gtk_style_lookup_icon_set (GtkStyle *style,
                                       const gchar *stock_id);
GdkPixbuf* gtk_style_render_icon (GtkStyle *style,
                                       const GtkIconSource *source,
                                       GtkTextDirection direction,
                                       GtkStateType state,
                                       GtkIconSize size,
                                       GtkWidget *widget,
                                       const gchar *detail);

void gtk_draw_hline (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gint x1,
                          gint x2,
                          gint y);
void gtk_draw_vline (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gint y1_,
                          gint y2_,
                          gint x);
void gtk_draw_shadow (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_polygon (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          GdkPoint *points,
                          gint npoints,
                          gboolean fill);
void gtk_draw_arrow (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          GtkArrowType arrow_type,
                          gboolean fill,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_diamond (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_box (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_flat_box (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_check (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_option (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_tab (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_shadow_gap (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          GtkPositionType gap_side,
                          gint gap_x,
                          gint gap_width);
void gtk_draw_box_gap (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          GtkPositionType gap_side,
                          gint gap_x,
                          gint gap_width);
void gtk_draw_extension (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          GtkPositionType gap_side);
void gtk_draw_focus (GtkStyle *style,
                          GdkWindow *window,
                          gint x,
                          gint y,
                          gint width,
                          gint height);
void gtk_draw_slider (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          GtkOrientation orientation);
void gtk_draw_handle (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          GtkShadowType shadow_type,
                          gint x,
                          gint y,
                          gint width,
                          gint height,
                          GtkOrientation orientation);
void gtk_draw_expander (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gint x,
                          gint y,
                          GtkExpanderStyle expander_style);
void gtk_draw_layout (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gboolean use_text,
                          gint x,
                          gint y,
                          PangoLayout *layout);
void gtk_draw_resize_grip (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkWindowEdge edge,
                           gint x,
                           gint y,
                           gint width,
                           gint height);


void gtk_paint_hline (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x1,
                           gint x2,
                           gint y);
void gtk_paint_vline (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint y1_,
                           gint y2_,
                           gint x);
void gtk_paint_shadow (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_polygon (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           GdkPoint *points,
                           gint npoints,
                           gboolean fill);
void gtk_paint_arrow (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           GtkArrowType arrow_type,
                           gboolean fill,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_diamond (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_box (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_flat_box (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_check (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_option (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_tab (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_shadow_gap (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           GtkPositionType gap_side,
                           gint gap_x,
                           gint gap_width);
void gtk_paint_box_gap (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           GtkPositionType gap_side,
                           gint gap_x,
                           gint gap_width);
void gtk_paint_extension (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           GtkPositionType gap_side);
void gtk_paint_focus (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height);
void gtk_paint_slider (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           GtkOrientation orientation);
void gtk_paint_handle (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GtkShadowType shadow_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           gint width,
                           gint height,
                           GtkOrientation orientation);
void gtk_paint_expander (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           GtkExpanderStyle expander_style);
void gtk_paint_layout (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           gboolean use_text,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           PangoLayout *layout);

void gtk_paint_resize_grip (GtkStyle *style,
                            GdkWindow *window,
                            GtkStateType state_type,
                            GdkRectangle *area,
                            GtkWidget *widget,
                            const gchar *detail,
                            GdkWindowEdge edge,
                            gint x,
                            gint y,
                            gint width,
                            gint height);


GType gtk_border_get_type (void);
GtkBorder *gtk_border_copy (const GtkBorder *border_);
void gtk_border_free ( GtkBorder *border_);


const GValue* _gtk_style_peek_property_value (GtkStyle *style,
                                              GType widget_type,
                                              GParamSpec *pspec,
                                              GtkRcPropertyParser parser);

void _gtk_style_init_for_settings (GtkStyle *style,
                                   GtkSettings *settings);




void gtk_draw_string (GtkStyle *style,
                          GdkWindow *window,
                          GtkStateType state_type,
                          gint x,
                          gint y,
                          const gchar *string);
void gtk_paint_string (GtkStyle *style,
                           GdkWindow *window,
                           GtkStateType state_type,
                           GdkRectangle *area,
                           GtkWidget *widget,
                           const gchar *detail,
                           gint x,
                           gint y,
                           const gchar *string);


GdkGC *_gtk_get_insertion_cursor_gc (GtkWidget *widget,
                                     gboolean is_primary);
void _gtk_draw_insertion_cursor (GtkWidget *widget,
                                     GdkDrawable *drawable,
                                     GdkGC *gc,
                                     GdkRectangle *location,
                                     GtkTextDirection direction,
                                     gboolean draw_arrow);
# 35 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtksettings.h" 1
# 21 "/usr/include/gtk-2.0/gtk/gtksettings.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrc.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkrc.h"
typedef struct _GtkIconFactory GtkIconFactory;
typedef struct _GtkRcContext GtkRcContext;

typedef struct _GtkRcStyleClass GtkRcStyleClass;
# 50 "/usr/include/gtk-2.0/gtk/gtkrc.h"
typedef enum
{
  GTK_RC_FG = 1 << 0,
  GTK_RC_BG = 1 << 1,
  GTK_RC_TEXT = 1 << 2,
  GTK_RC_BASE = 1 << 3
} GtkRcFlags;

struct _GtkRcStyle
{
  GObject parent_instance;



  gchar *name;
  gchar *bg_pixmap_name[5];
  PangoFontDescription *font_desc;

  GtkRcFlags color_flags[5];
  GdkColor fg[5];
  GdkColor bg[5];
  GdkColor text[5];
  GdkColor base[5];

  gint xthickness;
  gint ythickness;


  GArray *rc_properties;


  GSList *rc_style_lists;

  GSList *icon_factories;

  guint engine_specified : 1;
};

struct _GtkRcStyleClass
{
  GObjectClass parent_class;






  GtkRcStyle * (*create_rc_style) (GtkRcStyle *rc_style);





  guint (*parse) (GtkRcStyle *rc_style,
                       GtkSettings *settings,
                       GScanner *scanner);




  void (*merge) (GtkRcStyle *dest,
                       GtkRcStyle *src);



  GtkStyle * (*create_style) (GtkRcStyle *rc_style);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

void _gtk_rc_init (void);
void gtk_rc_add_default_file (const gchar *filename);
void gtk_rc_set_default_files (gchar **filenames);
gchar** gtk_rc_get_default_files (void);
GtkStyle* gtk_rc_get_style (GtkWidget *widget);
GtkStyle* gtk_rc_get_style_by_paths (GtkSettings *settings,
                                         const char *widget_path,
                                         const char *class_path,
                                         GType type);

gboolean gtk_rc_reparse_all_for_settings (GtkSettings *settings,
                                          gboolean force_load);
gchar* gtk_rc_find_pixmap_in_path (GtkSettings *settings,
                                     GScanner *scanner,
                                     const gchar *pixmap_file);

void gtk_rc_parse (const gchar *filename);
void gtk_rc_parse_string (const gchar *rc_string);
gboolean gtk_rc_reparse_all (void);


void gtk_rc_add_widget_name_style (GtkRcStyle *rc_style,
                                         const gchar *pattern);
void gtk_rc_add_widget_class_style (GtkRcStyle *rc_style,
                                         const gchar *pattern);
void gtk_rc_add_class_style (GtkRcStyle *rc_style,
                                         const gchar *pattern);



GType gtk_rc_style_get_type (void) ;
GtkRcStyle* gtk_rc_style_new (void);
GtkRcStyle* gtk_rc_style_copy (GtkRcStyle *orig);
void gtk_rc_style_ref (GtkRcStyle *rc_style);
void gtk_rc_style_unref (GtkRcStyle *rc_style);

gchar* gtk_rc_find_module_in_path (const gchar *module_file);
gchar* gtk_rc_get_theme_dir (void);
gchar* gtk_rc_get_module_dir (void);
gchar* gtk_rc_get_im_module_path (void);
gchar* gtk_rc_get_im_module_file (void);


typedef enum {
  GTK_RC_TOKEN_INVALID = G_TOKEN_LAST,
  GTK_RC_TOKEN_INCLUDE,
  GTK_RC_TOKEN_NORMAL,
  GTK_RC_TOKEN_ACTIVE,
  GTK_RC_TOKEN_PRELIGHT,
  GTK_RC_TOKEN_SELECTED,
  GTK_RC_TOKEN_INSENSITIVE,
  GTK_RC_TOKEN_FG,
  GTK_RC_TOKEN_BG,
  GTK_RC_TOKEN_TEXT,
  GTK_RC_TOKEN_BASE,
  GTK_RC_TOKEN_XTHICKNESS,
  GTK_RC_TOKEN_YTHICKNESS,
  GTK_RC_TOKEN_FONT,
  GTK_RC_TOKEN_FONTSET,
  GTK_RC_TOKEN_FONT_NAME,
  GTK_RC_TOKEN_BG_PIXMAP,
  GTK_RC_TOKEN_PIXMAP_PATH,
  GTK_RC_TOKEN_STYLE,
  GTK_RC_TOKEN_BINDING,
  GTK_RC_TOKEN_BIND,
  GTK_RC_TOKEN_WIDGET,
  GTK_RC_TOKEN_WIDGET_CLASS,
  GTK_RC_TOKEN_CLASS,
  GTK_RC_TOKEN_LOWEST,
  GTK_RC_TOKEN_GTK,
  GTK_RC_TOKEN_APPLICATION,
  GTK_RC_TOKEN_THEME,
  GTK_RC_TOKEN_RC,
  GTK_RC_TOKEN_HIGHEST,
  GTK_RC_TOKEN_ENGINE,
  GTK_RC_TOKEN_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_PATH,
  GTK_RC_TOKEN_IM_MODULE_FILE,
  GTK_RC_TOKEN_STOCK,
  GTK_RC_TOKEN_LTR,
  GTK_RC_TOKEN_RTL,
  GTK_RC_TOKEN_LAST
} GtkRcTokenType;

GScanner* gtk_rc_scanner_new (void);
guint gtk_rc_parse_color (GScanner *scanner,
                                 GdkColor *color);
guint gtk_rc_parse_state (GScanner *scanner,
                                 GtkStateType *state);
guint gtk_rc_parse_priority (GScanner *scanner,
                                 GtkPathPriorityType *priority);





struct _GtkRcProperty
{

  GQuark type_name;
  GQuark property_name;


  gchar *origin;
  GValue value;
};
const GtkRcProperty* _gtk_rc_style_lookup_rc_property (GtkRcStyle *rc_style,
                                                       GQuark type_name,
                                                       GQuark property_name);

const gchar* _gtk_rc_context_get_default_font_name (GtkSettings *settings);
void _gtk_rc_reset_styles (GtkSettings *settings);
# 22 "/usr/include/gtk-2.0/gtk/gtksettings.h" 2


# 36 "/usr/include/gtk-2.0/gtk/gtksettings.h"
typedef struct _GtkSettingsClass GtkSettingsClass;
typedef struct _GtkSettingsValue GtkSettingsValue;
typedef struct _GtkSettingsPropertyValue GtkSettingsPropertyValue;



struct _GtkSettings
{
  GObject parent_instance;

  GData *queued_settings;
  GtkSettingsPropertyValue *property_values;

  GtkRcContext *rc_context;
  GdkScreen *screen;
};
struct _GtkSettingsClass
{
  GObjectClass parent_class;

};
struct _GtkSettingsValue
{



  gchar *origin;




  GValue value;
};



GType gtk_settings_get_type (void);

GtkSettings* gtk_settings_get_default (void);

GtkSettings* gtk_settings_get_for_screen (GdkScreen *screen);

void gtk_settings_install_property (GParamSpec *pspec);
void gtk_settings_install_property_parser (GParamSpec *pspec,
                                                      GtkRcPropertyParser parser);


gboolean gtk_rc_property_parse_color (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);
gboolean gtk_rc_property_parse_border (const GParamSpec *pspec,
                                            const GString *gstring,
                                            GValue *property_value);


void gtk_settings_set_property_value (GtkSettings *settings,
                                                  const gchar *name,
                                                  const GtkSettingsValue *svalue);
void gtk_settings_set_string_property (GtkSettings *settings,
                                                  const gchar *name,
                                                  const gchar *v_string,
                                                  const gchar *origin);
void gtk_settings_set_long_property (GtkSettings *settings,
                                                  const gchar *name,
                                                  glong v_long,
                                                  const gchar *origin);
void gtk_settings_set_double_property (GtkSettings *settings,
                                                  const gchar *name,
                                                  gdouble v_double,
                                                  const gchar *origin);



void _gtk_settings_set_property_value_from_rc (GtkSettings *settings,
                                               const gchar *name,
                                               const GtkSettingsValue *svalue);
void _gtk_settings_reset_rc_values (GtkSettings *settings);

void _gtk_settings_handle_event (GdkEventSetting *event);
GtkRcPropertyParser _gtk_rc_property_parser_from_type (GType type);
gboolean _gtk_settings_parse_convert (GtkRcPropertyParser parser,
                                                       const GValue *src_value,
                                                       GParamSpec *pspec,
                                                       GValue *dest_value);



# 36 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 1 "/usr/include/atk-1.0/atk/atkobject.h" 1
# 28 "/usr/include/atk-1.0/atk/atkobject.h"
# 1 "/usr/include/atk-1.0/atk/atkstate.h" 1
# 67 "/usr/include/atk-1.0/atk/atkstate.h"
typedef enum
{
  ATK_STATE_INVALID,
  ATK_STATE_ACTIVE,
  ATK_STATE_ARMED,
  ATK_STATE_BUSY,
  ATK_STATE_CHECKED,
  ATK_STATE_DEFUNCT,
  ATK_STATE_EDITABLE,
  ATK_STATE_ENABLED,
  ATK_STATE_EXPANDABLE,
  ATK_STATE_EXPANDED,
  ATK_STATE_FOCUSABLE,
  ATK_STATE_FOCUSED,
  ATK_STATE_HORIZONTAL,
  ATK_STATE_ICONIFIED,
  ATK_STATE_MODAL,
  ATK_STATE_MULTI_LINE,
  ATK_STATE_MULTISELECTABLE,
  ATK_STATE_OPAQUE,
  ATK_STATE_PRESSED,
  ATK_STATE_RESIZABLE,
  ATK_STATE_SELECTABLE,
  ATK_STATE_SELECTED,
  ATK_STATE_SENSITIVE,
  ATK_STATE_SHOWING,
  ATK_STATE_SINGLE_LINE,
  ATK_STATE_STALE,
  ATK_STATE_TRANSIENT,
  ATK_STATE_VERTICAL,
  ATK_STATE_VISIBLE,
  ATK_STATE_MANAGES_DESCENDANTS,
  ATK_STATE_LAST_DEFINED
} AtkStateType;

typedef guint64 AtkState;

AtkStateType atk_state_type_register (const gchar *name);

const gchar* atk_state_type_get_name (AtkStateType type);
AtkStateType atk_state_type_for_name (const gchar *name);
# 29 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationtype.h" 1
# 50 "/usr/include/atk-1.0/atk/atkrelationtype.h"
typedef enum
{
  ATK_RELATION_NULL = 0,
  ATK_RELATION_CONTROLLED_BY,
  ATK_RELATION_CONTROLLER_FOR,
  ATK_RELATION_LABEL_FOR,
  ATK_RELATION_LABELLED_BY,
  ATK_RELATION_MEMBER_OF,
  ATK_RELATION_NODE_CHILD_OF,
  ATK_RELATION_FLOWS_TO,
  ATK_RELATION_FLOWS_FROM,
  ATK_RELATION_SUBWINDOW_OF,
  ATK_RELATION_EMBEDS,
  ATK_RELATION_EMBEDDED_BY,
  ATK_RELATION_LAST_DEFINED
} AtkRelationType;
# 30 "/usr/include/atk-1.0/atk/atkobject.h" 2
# 121 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_ROLE_INVALID = 0,
  ATK_ROLE_ACCEL_LABEL,
  ATK_ROLE_ALERT,
  ATK_ROLE_ANIMATION,
  ATK_ROLE_ARROW,
  ATK_ROLE_CALENDAR,
  ATK_ROLE_CANVAS,
  ATK_ROLE_CHECK_BOX,
  ATK_ROLE_CHECK_MENU_ITEM,
  ATK_ROLE_COLOR_CHOOSER,
  ATK_ROLE_COLUMN_HEADER,
  ATK_ROLE_COMBO_BOX,
  ATK_ROLE_DATE_EDITOR,
  ATK_ROLE_DESKTOP_ICON,
  ATK_ROLE_DESKTOP_FRAME,
  ATK_ROLE_DIAL,
  ATK_ROLE_DIALOG,
  ATK_ROLE_DIRECTORY_PANE,
  ATK_ROLE_DRAWING_AREA,
  ATK_ROLE_FILE_CHOOSER,
  ATK_ROLE_FILLER,
  ATK_ROLE_FONT_CHOOSER,
  ATK_ROLE_FRAME,
  ATK_ROLE_GLASS_PANE,
  ATK_ROLE_HTML_CONTAINER,
  ATK_ROLE_ICON,
  ATK_ROLE_IMAGE,
  ATK_ROLE_INTERNAL_FRAME,
  ATK_ROLE_LABEL,
  ATK_ROLE_LAYERED_PANE,
  ATK_ROLE_LIST,
  ATK_ROLE_LIST_ITEM,
  ATK_ROLE_MENU,
  ATK_ROLE_MENU_BAR,
  ATK_ROLE_MENU_ITEM,
  ATK_ROLE_OPTION_PANE,
  ATK_ROLE_PAGE_TAB,
  ATK_ROLE_PAGE_TAB_LIST,
  ATK_ROLE_PANEL,
  ATK_ROLE_PASSWORD_TEXT,
  ATK_ROLE_POPUP_MENU,
  ATK_ROLE_PROGRESS_BAR,
  ATK_ROLE_PUSH_BUTTON,
  ATK_ROLE_RADIO_BUTTON,
  ATK_ROLE_RADIO_MENU_ITEM,
  ATK_ROLE_ROOT_PANE,
  ATK_ROLE_ROW_HEADER,
  ATK_ROLE_SCROLL_BAR,
  ATK_ROLE_SCROLL_PANE,
  ATK_ROLE_SEPARATOR,
  ATK_ROLE_SLIDER,
  ATK_ROLE_SPLIT_PANE,
  ATK_ROLE_SPIN_BUTTON,
  ATK_ROLE_STATUSBAR,
  ATK_ROLE_TABLE,
  ATK_ROLE_TABLE_CELL,
  ATK_ROLE_TABLE_COLUMN_HEADER,
  ATK_ROLE_TABLE_ROW_HEADER,
  ATK_ROLE_TEAR_OFF_MENU_ITEM,
  ATK_ROLE_TERMINAL,
  ATK_ROLE_TEXT,
  ATK_ROLE_TOGGLE_BUTTON,
  ATK_ROLE_TOOL_BAR,
  ATK_ROLE_TOOL_TIP,
  ATK_ROLE_TREE,
  ATK_ROLE_TREE_TABLE,
  ATK_ROLE_UNKNOWN,
  ATK_ROLE_VIEWPORT,
  ATK_ROLE_WINDOW,
  ATK_ROLE_HEADER,
  ATK_ROLE_FOOTER,
  ATK_ROLE_PARAGRAPH,
  ATK_ROLE_RULER,
  ATK_ROLE_APPLICATION,
  ATK_ROLE_LAST_DEFINED
} AtkRole;

AtkRole atk_role_register (const gchar *name);
# 215 "/usr/include/atk-1.0/atk/atkobject.h"
typedef enum
{
  ATK_LAYER_INVALID,
  ATK_LAYER_BACKGROUND,
  ATK_LAYER_CANVAS,
  ATK_LAYER_WIDGET,
  ATK_LAYER_MDI,
  ATK_LAYER_POPUP,
  ATK_LAYER_OVERLAY,
  ATK_LAYER_WINDOW
} AtkLayer;
# 240 "/usr/include/atk-1.0/atk/atkobject.h"
typedef struct _AtkImplementor AtkImplementor;
typedef struct _AtkImplementorIface AtkImplementorIface;


typedef struct _AtkObject AtkObject;
typedef struct _AtkObjectClass AtkObjectClass;
typedef struct _AtkRelationSet AtkRelationSet;
typedef struct _AtkStateSet AtkStateSet;

struct _AtkPropertyValues
{
  const gchar *property_name;
  GValue old_value;
  GValue new_value;
};

typedef struct _AtkPropertyValues AtkPropertyValues;

typedef gboolean (*AtkFunction) (gpointer data);
# 271 "/usr/include/atk-1.0/atk/atkobject.h"
typedef void (*AtkPropertyChangeHandler) (AtkObject*, AtkPropertyValues*);


struct _AtkObject
{
  GObject parent;

  gchar *description;
  gchar *name;
  AtkObject *accessible_parent;
  AtkRole role;
  AtkRelationSet *relation_set;
  AtkLayer layer;
};

struct _AtkObjectClass
{
  GObjectClass parent;




  const gchar* (* get_name) (AtkObject *accessible);



  const gchar* (* get_description) (AtkObject *accessible);



  AtkObject* (*get_parent) (AtkObject *accessible);




  gint (* get_n_children) (AtkObject *accessible);





  AtkObject* (* ref_child) (AtkObject *accessible,
                                                    gint i);




  gint (* get_index_in_parent) (AtkObject *accessible);



  AtkRelationSet* (* ref_relation_set) (AtkObject *accessible);



  AtkRole (* get_role) (AtkObject *accessible);
  AtkLayer (* get_layer) (AtkObject *accessible);
  gint (* get_mdi_zorder) (AtkObject *accessible);



  AtkStateSet* (* ref_state_set) (AtkObject *accessible);



  void (* set_name) (AtkObject *accessible,
                                                   const gchar *name);



  void (* set_description) (AtkObject *accessible,
                                                   const gchar *description);



  void (* set_parent) (AtkObject *accessible,
                                                   AtkObject *parent);



  void (* set_role) (AtkObject *accessible,
                                                   AtkRole role);



guint (* connect_property_change_handler) (AtkObject
                 *accessible,
                                                                  AtkPropertyChangeHandler *handler);




void (* remove_property_change_handler) (AtkObject
                *accessible,
                                                                  guint
                handler_id);
void (* initialize) (AtkObject *accessible,
                                                                  gpointer data);




  void (* children_changed) (AtkObject *accessible,
                                                   guint change_index,
                                                   gpointer changed_child);




  void (* focus_event) (AtkObject *accessible,
                                                   gboolean focus_in);




  void (* property_change) (AtkObject *accessible,
                                                   AtkPropertyValues *values);




  void (* state_change) (AtkObject *accessible,
                                                   const gchar *name,
                                                   gboolean state_set);




  void (*visible_data_changed) (AtkObject *accessible);







  void (*active_descendant_changed) (AtkObject *accessible,
                                                        gpointer *child);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;

};

GType atk_object_get_type (void);

struct _AtkImplementorIface
{
  GTypeInterface parent;

  AtkObject* (*ref_accessible) (AtkImplementor *implementor);
};
GType atk_implementor_get_type (void);
# 438 "/usr/include/atk-1.0/atk/atkobject.h"
AtkObject* atk_implementor_ref_accessible (AtkImplementor *implementor);





const gchar* atk_object_get_name (AtkObject *accessible);
const gchar* atk_object_get_description (AtkObject *accessible);
AtkObject* atk_object_get_parent (AtkObject *accessible);
gint atk_object_get_n_accessible_children (AtkObject *accessible);
AtkObject* atk_object_ref_accessible_child (AtkObject *accessible,
                                                                   gint i);
AtkRelationSet* atk_object_ref_relation_set (AtkObject *accessible);
AtkRole atk_object_get_role (AtkObject *accessible);
AtkLayer atk_object_get_layer (AtkObject *accessible);
gint atk_object_get_mdi_zorder (AtkObject *accessible);
AtkStateSet* atk_object_ref_state_set (AtkObject *accessible);
gint atk_object_get_index_in_parent (AtkObject *accessible);
void atk_object_set_name (AtkObject *accessible,
                                                                   const gchar *name);
void atk_object_set_description (AtkObject *accessible,
                                                                   const gchar *description);
void atk_object_set_parent (AtkObject *accessible,
                                                                   AtkObject *parent);
void atk_object_set_role (AtkObject *accessible,
                                                                   AtkRole role);


guint atk_object_connect_property_change_handler (AtkObject *accessible,
                                                                  AtkPropertyChangeHandler *handler);
void atk_object_remove_property_change_handler (AtkObject *accessible,
                                                                  guint handler_id);

void atk_object_notify_state_change (AtkObject *accessible,
                                                                  AtkState state,
                                                                  gboolean value);
void atk_object_initialize (AtkObject *accessible,
                                                                  gpointer data);

const gchar* atk_role_get_name (AtkRole role);
AtkRole atk_role_for_name (const gchar *name);



gboolean atk_object_add_relationship (AtkObject *object,
                                                                AtkRelationType relationship,
                                                                AtkObject *target);
gboolean atk_object_remove_relationship (AtkObject *object,
                                                                AtkRelationType relationship,
                                                                AtkObject *target);
const gchar* atk_role_get_localized_name (AtkRole role);
# 37 "/usr/include/gtk-2.0/gtk/gtkwidget.h" 2
# 46 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
typedef enum
{
  GTK_TOPLEVEL = 1 << 4,
  GTK_NO_WINDOW = 1 << 5,
  GTK_REALIZED = 1 << 6,
  GTK_MAPPED = 1 << 7,
  GTK_VISIBLE = 1 << 8,
  GTK_SENSITIVE = 1 << 9,
  GTK_PARENT_SENSITIVE = 1 << 10,
  GTK_CAN_FOCUS = 1 << 11,
  GTK_HAS_FOCUS = 1 << 12,




  GTK_CAN_DEFAULT = 1 << 13,




  GTK_HAS_DEFAULT = 1 << 14,

  GTK_HAS_GRAB = 1 << 15,
  GTK_RC_STYLE = 1 << 16,
  GTK_COMPOSITE_CHILD = 1 << 17,
  GTK_NO_REPARENT = 1 << 18,
  GTK_APP_PAINTABLE = 1 << 19,




  GTK_RECEIVES_DEFAULT = 1 << 20,

  GTK_DOUBLE_BUFFERED = 1 << 21
} GtkWidgetFlags;


typedef enum
{
  GTK_WIDGET_HELP_TOOLTIP,
  GTK_WIDGET_HELP_WHATS_THIS
} GtkWidgetHelpType;
# 138 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
typedef struct _GtkRequisition GtkRequisition;
typedef GdkRectangle GtkAllocation;
typedef struct _GtkSelectionData GtkSelectionData;
typedef struct _GtkWidgetClass GtkWidgetClass;
typedef struct _GtkWidgetAuxInfo GtkWidgetAuxInfo;
typedef struct _GtkWidgetShapeInfo GtkWidgetShapeInfo;
typedef struct _GtkClipboard GtkClipboard;
typedef void (*GtkCallback) (GtkWidget *widget,
                                        gpointer data);




struct _GtkRequisition
{
  gint width;
  gint height;
};






struct _GtkWidget
{






  GtkObject object;






  guint16 private_flags;




  guint8 state;







  guint8 saved_state;







  gchar *name;
# 207 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
  GtkStyle *style;



  GtkRequisition requisition;



  GtkAllocation allocation;





  GdkWindow *window;



  GtkWidget *parent;
};

struct _GtkWidgetClass
{






  GtkObjectClass parent_class;



  guint activate_signal;

  guint set_scroll_adjustments_signal;




  void (*dispatch_child_properties_changed) (GtkWidget *widget,
                                             guint n_pspecs,
                                             GParamSpec **pspecs);


  void (* show) (GtkWidget *widget);
  void (* show_all) (GtkWidget *widget);
  void (* hide) (GtkWidget *widget);
  void (* hide_all) (GtkWidget *widget);
  void (* map) (GtkWidget *widget);
  void (* unmap) (GtkWidget *widget);
  void (* realize) (GtkWidget *widget);
  void (* unrealize) (GtkWidget *widget);
  void (* size_request) (GtkWidget *widget,
                                GtkRequisition *requisition);
  void (* size_allocate) (GtkWidget *widget,
                                GtkAllocation *allocation);
  void (* state_changed) (GtkWidget *widget,
                                GtkStateType previous_state);
  void (* parent_set) (GtkWidget *widget,
                                GtkWidget *previous_parent);
  void (* hierarchy_changed) (GtkWidget *widget,
                                GtkWidget *previous_toplevel);
  void (* style_set) (GtkWidget *widget,
                                GtkStyle *previous_style);
  void (* direction_changed) (GtkWidget *widget,
                                GtkTextDirection previous_direction);
  void (* grab_notify) (GtkWidget *widget,
                                gboolean was_grabbed);
  void (* child_notify) (GtkWidget *widget,
                                GParamSpec *pspec);


  gboolean (* mnemonic_activate) (GtkWidget *widget,
                                  gboolean group_cycling);


  void (* grab_focus) (GtkWidget *widget);
  gboolean (* focus) (GtkWidget *widget,
                                GtkDirectionType direction);


  gboolean (* event) (GtkWidget *widget,
                                         GdkEvent *event);
  gboolean (* button_press_event) (GtkWidget *widget,
                                         GdkEventButton *event);
  gboolean (* button_release_event) (GtkWidget *widget,
                                         GdkEventButton *event);
  gboolean (* scroll_event) (GtkWidget *widget,
                                         GdkEventScroll *event);
  gboolean (* motion_notify_event) (GtkWidget *widget,
                                         GdkEventMotion *event);
  gboolean (* delete_event) (GtkWidget *widget,
                                         GdkEventAny *event);
  gboolean (* destroy_event) (GtkWidget *widget,
                                         GdkEventAny *event);
  gboolean (* expose_event) (GtkWidget *widget,
                                         GdkEventExpose *event);
  gboolean (* key_press_event) (GtkWidget *widget,
                                         GdkEventKey *event);
  gboolean (* key_release_event) (GtkWidget *widget,
                                         GdkEventKey *event);
  gboolean (* enter_notify_event) (GtkWidget *widget,
                                         GdkEventCrossing *event);
  gboolean (* leave_notify_event) (GtkWidget *widget,
                                         GdkEventCrossing *event);
  gboolean (* configure_event) (GtkWidget *widget,
                                         GdkEventConfigure *event);
  gboolean (* focus_in_event) (GtkWidget *widget,
                                         GdkEventFocus *event);
  gboolean (* focus_out_event) (GtkWidget *widget,
                                         GdkEventFocus *event);
  gboolean (* map_event) (GtkWidget *widget,
                                         GdkEventAny *event);
  gboolean (* unmap_event) (GtkWidget *widget,
                                         GdkEventAny *event);
  gboolean (* property_notify_event) (GtkWidget *widget,
                                         GdkEventProperty *event);
  gboolean (* selection_clear_event) (GtkWidget *widget,
                                         GdkEventSelection *event);
  gboolean (* selection_request_event) (GtkWidget *widget,
                                         GdkEventSelection *event);
  gboolean (* selection_notify_event) (GtkWidget *widget,
                                         GdkEventSelection *event);
  gboolean (* proximity_in_event) (GtkWidget *widget,
                                         GdkEventProximity *event);
  gboolean (* proximity_out_event) (GtkWidget *widget,
                                         GdkEventProximity *event);
  gboolean (* visibility_notify_event) (GtkWidget *widget,
                                         GdkEventVisibility *event);
  gboolean (* client_event) (GtkWidget *widget,
                                         GdkEventClient *event);
  gboolean (* no_expose_event) (GtkWidget *widget,
                                         GdkEventAny *event);
  gboolean (* window_state_event) (GtkWidget *widget,
                                         GdkEventWindowState *event);


  void (* selection_get) (GtkWidget *widget,
                                    GtkSelectionData *selection_data,
                                    guint info,
                                    guint time_);
  void (* selection_received) (GtkWidget *widget,
                                    GtkSelectionData *selection_data,
                                    guint time_);


  void (* drag_begin) (GtkWidget *widget,
                                    GdkDragContext *context);
  void (* drag_end) (GtkWidget *widget,
                                    GdkDragContext *context);
  void (* drag_data_get) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    GtkSelectionData *selection_data,
                                    guint info,
                                    guint time_);
  void (* drag_data_delete) (GtkWidget *widget,
                                    GdkDragContext *context);


  void (* drag_leave) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    guint time_);
  gboolean (* drag_motion) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    gint x,
                                    gint y,
                                    guint time_);
  gboolean (* drag_drop) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    gint x,
                                    gint y,
                                    guint time_);
  void (* drag_data_received) (GtkWidget *widget,
                                    GdkDragContext *context,
                                    gint x,
                                    gint y,
                                    GtkSelectionData *selection_data,
                                    guint info,
                                    guint time_);


  gboolean (* popup_menu) (GtkWidget *widget);






  gboolean (* show_help) (GtkWidget *widget,
                                    GtkWidgetHelpType help_type);



  AtkObject* (* get_accessible) (GtkWidget *widget);

  void (* screen_changed) (GtkWidget *widget,
                           GdkScreen *previous_screen);

  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
};

struct _GtkWidgetAuxInfo
{
  gint x;
  gint y;
  gint width;
  gint height;
  guint x_set : 1;
  guint y_set : 1;
};

struct _GtkWidgetShapeInfo
{
  gint16 offset_x;
  gint16 offset_y;
  GdkBitmap *shape_mask;
};

GType gtk_widget_get_type (void) ;
GtkWidget* gtk_widget_new (GType type,
                                           const gchar *first_property_name,
                                           ...);
GtkWidget* gtk_widget_ref (GtkWidget *widget);
void gtk_widget_unref (GtkWidget *widget);
void gtk_widget_destroy (GtkWidget *widget);
void gtk_widget_destroyed (GtkWidget *widget,
                                           GtkWidget **widget_pointer);

void gtk_widget_set (GtkWidget *widget,
                                           const gchar *first_property_name,
                                           ...);

void gtk_widget_unparent (GtkWidget *widget);
void gtk_widget_show (GtkWidget *widget);
void gtk_widget_show_now (GtkWidget *widget);
void gtk_widget_hide (GtkWidget *widget);
void gtk_widget_show_all (GtkWidget *widget);
void gtk_widget_hide_all (GtkWidget *widget);
void gtk_widget_map (GtkWidget *widget);
void gtk_widget_unmap (GtkWidget *widget);
void gtk_widget_realize (GtkWidget *widget);
void gtk_widget_unrealize (GtkWidget *widget);


void gtk_widget_queue_draw (GtkWidget *widget);
void gtk_widget_queue_draw_area (GtkWidget *widget,
                                           gint x,
                                           gint y,
                                           gint width,
                                           gint height);

void gtk_widget_queue_clear (GtkWidget *widget);
void gtk_widget_queue_clear_area (GtkWidget *widget,
                                           gint x,
                                           gint y,
                                           gint width,
                                           gint height);



void gtk_widget_queue_resize (GtkWidget *widget);

void gtk_widget_draw (GtkWidget *widget,
                                           GdkRectangle *area);

void gtk_widget_size_request (GtkWidget *widget,
                                           GtkRequisition *requisition);
void gtk_widget_size_allocate (GtkWidget *widget,
                                           GtkAllocation *allocation);
void gtk_widget_get_child_requisition (GtkWidget *widget,
                                             GtkRequisition *requisition);
void gtk_widget_add_accelerator (GtkWidget *widget,
                                           const gchar *accel_signal,
                                           GtkAccelGroup *accel_group,
                                           guint accel_key,
                                           GdkModifierType accel_mods,
                                           GtkAccelFlags accel_flags);
gboolean gtk_widget_remove_accelerator (GtkWidget *widget,
                                           GtkAccelGroup *accel_group,
                                           guint accel_key,
                                           GdkModifierType accel_mods);
void gtk_widget_set_accel_path (GtkWidget *widget,
                                           const gchar *accel_path,
                                           GtkAccelGroup *accel_group);
const gchar* _gtk_widget_get_accel_path (GtkWidget *widget,
                                           gboolean *locked);
GList* gtk_widget_list_accel_closures (GtkWidget *widget);
gboolean gtk_widget_mnemonic_activate (GtkWidget *widget,
                                           gboolean group_cycling);
gboolean gtk_widget_event (GtkWidget *widget,
                                           GdkEvent *event);
gint gtk_widget_send_expose (GtkWidget *widget,
                                           GdkEvent *event);

gboolean gtk_widget_activate (GtkWidget *widget);
gboolean gtk_widget_set_scroll_adjustments (GtkWidget *widget,
                                              GtkAdjustment *hadjustment,
                                              GtkAdjustment *vadjustment);

void gtk_widget_reparent (GtkWidget *widget,
                                           GtkWidget *new_parent);
gboolean gtk_widget_intersect (GtkWidget *widget,
                                           GdkRectangle *area,
                                           GdkRectangle *intersection);
GdkRegion *gtk_widget_region_intersect (GtkWidget *widget,
                                           GdkRegion *region);

void gtk_widget_freeze_child_notify (GtkWidget *widget);
void gtk_widget_child_notify (GtkWidget *widget,
                                           const gchar *child_property);
void gtk_widget_thaw_child_notify (GtkWidget *widget);

gboolean gtk_widget_is_focus (GtkWidget *widget);
void gtk_widget_grab_focus (GtkWidget *widget);
void gtk_widget_grab_default (GtkWidget *widget);

void gtk_widget_set_name (GtkWidget *widget,
                                                         const gchar *name);
const gchar* gtk_widget_get_name (GtkWidget *widget);
void gtk_widget_set_state (GtkWidget *widget,
                                                         GtkStateType state);
void gtk_widget_set_sensitive (GtkWidget *widget,
                                                         gboolean sensitive);
void gtk_widget_set_app_paintable (GtkWidget *widget,
                                                         gboolean app_paintable);
void gtk_widget_set_double_buffered (GtkWidget *widget,
                                                         gboolean double_buffered);
void gtk_widget_set_redraw_on_allocate (GtkWidget *widget,
                                                         gboolean redraw_on_allocate);
void gtk_widget_set_parent (GtkWidget *widget,
                                                         GtkWidget *parent);
void gtk_widget_set_parent_window (GtkWidget *widget,
                                                         GdkWindow *parent_window);
void gtk_widget_set_child_visible (GtkWidget *widget,
                                                         gboolean is_visible);
gboolean gtk_widget_get_child_visible (GtkWidget *widget);

GtkWidget *gtk_widget_get_parent (GtkWidget *widget);
GdkWindow *gtk_widget_get_parent_window (GtkWidget *widget);

gboolean gtk_widget_child_focus (GtkWidget *widget,
                                           GtkDirectionType direction);

void gtk_widget_set_size_request (GtkWidget *widget,
                                           gint width,
                                           gint height);
void gtk_widget_get_size_request (GtkWidget *widget,
                                           gint *width,
                                           gint *height);

void gtk_widget_set_uposition (GtkWidget *widget,
                                           gint x,
                                           gint y);
void gtk_widget_set_usize (GtkWidget *widget,
                                           gint width,
                                           gint height);


void gtk_widget_set_events (GtkWidget *widget,
                                           gint events);
void gtk_widget_add_events (GtkWidget *widget,
                                           gint events);
void gtk_widget_set_extension_events (GtkWidget *widget,
                                            GdkExtensionMode mode);

GdkExtensionMode gtk_widget_get_extension_events (GtkWidget *widget);
GtkWidget* gtk_widget_get_toplevel (GtkWidget *widget);
GtkWidget* gtk_widget_get_ancestor (GtkWidget *widget,
                                         GType widget_type);
GdkColormap* gtk_widget_get_colormap (GtkWidget *widget);
GdkVisual* gtk_widget_get_visual (GtkWidget *widget);

GdkScreen * gtk_widget_get_screen (GtkWidget *widget);
gboolean gtk_widget_has_screen (GtkWidget *widget);
GdkDisplay * gtk_widget_get_display (GtkWidget *widget);
GdkWindow * gtk_widget_get_root_window (GtkWidget *widget);
GtkSettings* gtk_widget_get_settings (GtkWidget *widget);
GtkClipboard *gtk_widget_get_clipboard (GtkWidget *widget,
                                          GdkAtom selection);
# 602 "/usr/include/gtk-2.0/gtk/gtkwidget.h"
AtkObject* gtk_widget_get_accessible (GtkWidget *widget);







void gtk_widget_set_colormap (GtkWidget *widget,
                                         GdkColormap *colormap);

gint gtk_widget_get_events (GtkWidget *widget);
void gtk_widget_get_pointer (GtkWidget *widget,
                                         gint *x,
                                         gint *y);

gboolean gtk_widget_is_ancestor (GtkWidget *widget,
                                         GtkWidget *ancestor);

gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget,
                                               GtkWidget *dest_widget,
                                               gint src_x,
                                               gint src_y,
                                               gint *dest_x,
                                               gint *dest_y);



gboolean gtk_widget_hide_on_delete (GtkWidget *widget);



void gtk_widget_set_style (GtkWidget *widget,
                                         GtkStyle *style);
void gtk_widget_ensure_style (GtkWidget *widget);
GtkStyle* gtk_widget_get_style (GtkWidget *widget);

void gtk_widget_modify_style (GtkWidget *widget,
                                           GtkRcStyle *style);
GtkRcStyle *gtk_widget_get_modifier_style (GtkWidget *widget);
void gtk_widget_modify_fg (GtkWidget *widget,
                                           GtkStateType state,
                                           GdkColor *color);
void gtk_widget_modify_bg (GtkWidget *widget,
                                           GtkStateType state,
                                           GdkColor *color);
void gtk_widget_modify_text (GtkWidget *widget,
                                           GtkStateType state,
                                           GdkColor *color);
void gtk_widget_modify_base (GtkWidget *widget,
                                           GtkStateType state,
                                           GdkColor *color);
void gtk_widget_modify_font (GtkWidget *widget,
                                           PangoFontDescription *font_desc);






PangoContext *gtk_widget_create_pango_context (GtkWidget *widget);
PangoContext *gtk_widget_get_pango_context (GtkWidget *widget);
PangoLayout *gtk_widget_create_pango_layout (GtkWidget *widget,
                                               const gchar *text);

GdkPixbuf *gtk_widget_render_icon (GtkWidget *widget,
                                               const gchar *stock_id,
                                               GtkIconSize size,
                                               const gchar *detail);




void gtk_widget_set_composite_name (GtkWidget *widget,
                                         const gchar *name);
gchar* gtk_widget_get_composite_name (GtkWidget *widget);


void gtk_widget_reset_rc_styles (GtkWidget *widget);





void gtk_widget_push_colormap (GdkColormap *cmap);
void gtk_widget_push_composite_child (void);
void gtk_widget_pop_composite_child (void);
void gtk_widget_pop_colormap (void);



void gtk_widget_class_install_style_property (GtkWidgetClass *klass,
                                                     GParamSpec *pspec);
void gtk_widget_class_install_style_property_parser (GtkWidgetClass *klass,
                                                     GParamSpec *pspec,
                                                     GtkRcPropertyParser parser);
GParamSpec* gtk_widget_class_find_style_property (GtkWidgetClass *klass,
                                                     const gchar *property_name);
GParamSpec** gtk_widget_class_list_style_properties (GtkWidgetClass *klass,
                                                     guint *n_properties);
void gtk_widget_style_get_property (GtkWidget *widget,
                                    const gchar *property_name,
                                    GValue *value);
void gtk_widget_style_get_valist (GtkWidget *widget,
                                    const gchar *first_property_name,
                                    va_list var_args);
void gtk_widget_style_get (GtkWidget *widget,
                                    const gchar *first_property_name,
                                    ...);




void gtk_widget_set_default_colormap (GdkColormap *colormap);
GtkStyle* gtk_widget_get_default_style (void);

GdkColormap* gtk_widget_get_default_colormap (void);
GdkVisual* gtk_widget_get_default_visual (void);





void gtk_widget_set_direction (GtkWidget *widget,
                                                   GtkTextDirection dir);
GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);

void gtk_widget_set_default_direction (GtkTextDirection dir);
GtkTextDirection gtk_widget_get_default_direction (void);



void gtk_widget_shape_combine_mask (GtkWidget *widget,
                                            GdkBitmap *shape_mask,
                                            gint offset_x,
                                            gint offset_y);


void gtk_widget_reset_shapes (GtkWidget *widget);




void gtk_widget_path (GtkWidget *widget,
                                            guint *path_length,
                                            gchar **path,
                                            gchar **path_reversed);
void gtk_widget_class_path (GtkWidget *widget,
                                            guint *path_length,
                                            gchar **path,
                                            gchar **path_reversed);

GType gtk_requisition_get_type (void);
GtkRequisition *gtk_requisition_copy (const GtkRequisition *requisition);
void gtk_requisition_free (GtkRequisition *requisition);






GtkWidgetAuxInfo *_gtk_widget_get_aux_info (GtkWidget *widget,
                                                           gboolean create);
void _gtk_widget_propagate_hierarchy_changed (GtkWidget *widget,
                                                           GtkWidget *previous_toplevel);
void _gtk_widget_propagate_screen_changed (GtkWidget *widget,
                                                           GdkScreen *previous_screen);

GdkColormap* _gtk_widget_peek_colormap (void);
# 33 "/usr/include/gtk-2.0/gtk/gtkmisc.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkmisc.h"
typedef struct _GtkMisc GtkMisc;
typedef struct _GtkMiscClass GtkMiscClass;

struct _GtkMisc
{
  GtkWidget widget;

  gfloat xalign;
  gfloat yalign;

  guint16 xpad;
  guint16 ypad;
};

struct _GtkMiscClass
{
  GtkWidgetClass parent_class;
};


GType gtk_misc_get_type (void) ;
void gtk_misc_set_alignment (GtkMisc *misc,
                                gfloat xalign,
                                gfloat yalign);
void gtk_misc_get_alignment (GtkMisc *misc,
                                gfloat *xalign,
                                gfloat *yalign);
void gtk_misc_set_padding (GtkMisc *misc,
                                gint xpad,
                                gint ypad);
void gtk_misc_get_padding (GtkMisc *misc,
                                gint *xpad,
                                gint *ypad);
# 32 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkbin.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkbin.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcontainer.h" 1
# 52 "/usr/include/gtk-2.0/gtk/gtkcontainer.h"
typedef struct _GtkContainer GtkContainer;
typedef struct _GtkContainerClass GtkContainerClass;

struct _GtkContainer
{
  GtkWidget widget;

  GtkWidget *focus_child;

  guint border_width : 16;
  guint need_resize : 1;
  guint resize_mode : 2;
  guint reallocate_redraws : 1;
  guint has_focus_chain : 1;
};

struct _GtkContainerClass
{
  GtkWidgetClass parent_class;

  void (*add) (GtkContainer *container,
                                 GtkWidget *widget);
  void (*remove) (GtkContainer *container,
                                 GtkWidget *widget);
  void (*check_resize) (GtkContainer *container);
  void (*forall) (GtkContainer *container,
                                 gboolean include_internals,
                                 GtkCallback callback,
                                 gpointer callback_data);
  void (*set_focus_child) (GtkContainer *container,
                                 GtkWidget *widget);
  GType (*child_type) (GtkContainer *container);
  gchar* (*composite_name) (GtkContainer *container,
                                 GtkWidget *child);
  void (*set_child_property) (GtkContainer *container,
                                 GtkWidget *child,
                                 guint property_id,
                                 const GValue *value,
                                 GParamSpec *pspec);
  void (*get_child_property) (GtkContainer *container,
                                 GtkWidget *child,
                                 guint property_id,
                                 GValue *value,
                                 GParamSpec *pspec);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GType gtk_container_get_type (void) ;
void gtk_container_set_border_width (GtkContainer *container,
                                          guint border_width);
guint gtk_container_get_border_width (GtkContainer *container);
void gtk_container_add (GtkContainer *container,
                                          GtkWidget *widget);
void gtk_container_remove (GtkContainer *container,
                                          GtkWidget *widget);

void gtk_container_set_resize_mode (GtkContainer *container,
                                          GtkResizeMode resize_mode);
GtkResizeMode gtk_container_get_resize_mode (GtkContainer *container);

void gtk_container_check_resize (GtkContainer *container);

void gtk_container_foreach (GtkContainer *container,
                                     GtkCallback callback,
                                     gpointer callback_data);

void gtk_container_foreach_full (GtkContainer *container,
                                     GtkCallback callback,
                                     GtkCallbackMarshal marshal,
                                     gpointer callback_data,
                                     GtkDestroyNotify notify);

GList* gtk_container_get_children (GtkContainer *container);





void gtk_container_propagate_expose (GtkContainer *container,
                                         GtkWidget *child,
                                         GdkEventExpose *event);

void gtk_container_set_focus_chain (GtkContainer *container,
                                         GList *focusable_widgets);
gboolean gtk_container_get_focus_chain (GtkContainer *container,
                                         GList **focusable_widgets);
void gtk_container_unset_focus_chain (GtkContainer *container);



void gtk_container_set_reallocate_redraws (GtkContainer *container,
                                             gboolean needs_redraws);
void gtk_container_set_focus_child (GtkContainer *container,
                                            GtkWidget *child);
void gtk_container_set_focus_vadjustment (GtkContainer *container,
                                            GtkAdjustment *adjustment);
GtkAdjustment *gtk_container_get_focus_vadjustment (GtkContainer *container);
void gtk_container_set_focus_hadjustment (GtkContainer *container,
                                            GtkAdjustment *adjustment);
GtkAdjustment *gtk_container_get_focus_hadjustment (GtkContainer *container);

void gtk_container_resize_children (GtkContainer *container);

GType gtk_container_child_type (GtkContainer *container);


void gtk_container_class_install_child_property (GtkContainerClass *cclass,
                                                         guint property_id,
                                                         GParamSpec *pspec);
GParamSpec* gtk_container_class_find_child_property (GObjectClass *cclass,
                                                         const gchar *property_name);
GParamSpec** gtk_container_class_list_child_properties (GObjectClass *cclass,
                                                         guint *n_properties);
void gtk_container_add_with_properties (GtkContainer *container,
                                                         GtkWidget *widget,
                                                         const gchar *first_prop_name,
                                                         ...);
void gtk_container_child_set (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *first_prop_name,
                                                         ...);
void gtk_container_child_get (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *first_prop_name,
                                                         ...);
void gtk_container_child_set_valist (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *first_property_name,
                                                         va_list var_args);
void gtk_container_child_get_valist (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *first_property_name,
                                                         va_list var_args);
void gtk_container_child_set_property (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *property_name,
                                                         const GValue *value);
void gtk_container_child_get_property (GtkContainer *container,
                                                         GtkWidget *child,
                                                         const gchar *property_name,
                                                         GValue *value);





void gtk_container_forall (GtkContainer *container,
                                              GtkCallback callback,
                                              gpointer callback_data);


void _gtk_container_queue_resize (GtkContainer *container);
void _gtk_container_clear_resize_widgets (GtkContainer *container);
gchar* _gtk_container_child_composite_name (GtkContainer *container,
                                              GtkWidget *child);
void _gtk_container_dequeue_resize_handler (GtkContainer *container);
GList *_gtk_container_focus_sort (GtkContainer *container,
                                              GList *children,
                                              GtkDirectionType direction,
                                              GtkWidget *old_focus);
# 33 "/usr/include/gtk-2.0/gtk/gtkbin.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkbin.h"
typedef struct _GtkBin GtkBin;
typedef struct _GtkBinClass GtkBinClass;

struct _GtkBin
{
  GtkContainer container;

  GtkWidget *child;
};

struct _GtkBinClass
{
  GtkContainerClass parent_class;
};


GType gtk_bin_get_type (void) ;

GtkWidget *gtk_bin_get_child (GtkBin *bin);
# 34 "/usr/include/gtk-2.0/gtk/gtkwindow.h" 2
# 50 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
typedef struct _GtkWindow GtkWindow;
typedef struct _GtkWindowClass GtkWindowClass;
typedef struct _GtkWindowGeometryInfo GtkWindowGeometryInfo;
typedef struct _GtkWindowGroup GtkWindowGroup;
typedef struct _GtkWindowGroupClass GtkWindowGroupClass;

struct _GtkWindow
{
  GtkBin bin;

  gchar *title;
  gchar *wmclass_name;
  gchar *wmclass_class;
  gchar *wm_role;

  GtkWidget *focus_widget;
  GtkWidget *default_widget;
  GtkWindow *transient_parent;
  GtkWindowGeometryInfo *geometry_info;
  GdkWindow *frame;
  GtkWindowGroup *group;

  guint16 configure_request_count;
  guint allow_shrink : 1;
  guint allow_grow : 1;
  guint configure_notify_received : 1;






  guint need_default_position : 1;
  guint need_default_size : 1;
  guint position : 3;
  guint type : 4;
  guint has_user_ref_count : 1;
  guint has_focus : 1;

  guint modal : 1;
  guint destroy_with_parent : 1;

  guint has_frame : 1;


  guint iconify_initially : 1;
  guint stick_initially : 1;
  guint maximize_initially : 1;
  guint decorated : 1;

  guint type_hint : 3;
  guint gravity : 5;

  guint is_active : 1;
  guint has_toplevel_focus : 1;

  guint frame_left;
  guint frame_top;
  guint frame_right;
  guint frame_bottom;

  guint keys_changed_handler;

  GdkModifierType mnemonic_modifier;
  GdkScreen *screen;
};

struct _GtkWindowClass
{
  GtkBinClass parent_class;

  void (* set_focus) (GtkWindow *window,
                            GtkWidget *focus);
  gboolean (* frame_event) (GtkWindow *window,
                            GdkEvent *event);



  void (* activate_focus) (GtkWindow *window);
  void (* activate_default) (GtkWindow *window);
  void (* move_focus) (GtkWindow *window,
                                        GtkDirectionType direction);

  void (*keys_changed) (GtkWindow *window);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 149 "/usr/include/gtk-2.0/gtk/gtkwindow.h"
struct _GtkWindowGroup
{
  GObject parent_instance;

  GSList *grabs;
};

struct _GtkWindowGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_window_get_type (void) ;
GtkWidget* gtk_window_new (GtkWindowType type);
void gtk_window_set_title (GtkWindow *window,
                                                const gchar *title);
const gchar *gtk_window_get_title (GtkWindow *window);
void gtk_window_set_wmclass (GtkWindow *window,
                                                const gchar *wmclass_name,
                                                const gchar *wmclass_class);
void gtk_window_set_role (GtkWindow *window,
                                                const gchar *role);
const gchar *gtk_window_get_role (GtkWindow *window);
void gtk_window_add_accel_group (GtkWindow *window,
                                                GtkAccelGroup *accel_group);
void gtk_window_remove_accel_group (GtkWindow *window,
                                                GtkAccelGroup *accel_group);
void gtk_window_set_position (GtkWindow *window,
                                                GtkWindowPosition position);
gboolean gtk_window_activate_focus (GtkWindow *window);
void gtk_window_set_focus (GtkWindow *window,
                                                GtkWidget *focus);
GtkWidget *gtk_window_get_focus (GtkWindow *window);
void gtk_window_set_default (GtkWindow *window,
                                                GtkWidget *default_widget);
gboolean gtk_window_activate_default (GtkWindow *window);

void gtk_window_set_transient_for (GtkWindow *window,
                                                GtkWindow *parent);
GtkWindow *gtk_window_get_transient_for (GtkWindow *window);
void gtk_window_set_type_hint (GtkWindow *window,
                                                GdkWindowTypeHint hint);
GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);
void gtk_window_set_skip_taskbar_hint (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);
void gtk_window_set_skip_pager_hint (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);
void gtk_window_set_destroy_with_parent (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);

void gtk_window_set_resizable (GtkWindow *window,
                                                gboolean resizable);
gboolean gtk_window_get_resizable (GtkWindow *window);

void gtk_window_set_gravity (GtkWindow *window,
                                                GdkGravity gravity);
GdkGravity gtk_window_get_gravity (GtkWindow *window);


void gtk_window_set_geometry_hints (GtkWindow *window,
                                                GtkWidget *geometry_widget,
                                                GdkGeometry *geometry,
                                                GdkWindowHints geom_mask);

void gtk_window_set_screen (GtkWindow *window,
                                                GdkScreen *screen);
GdkScreen* gtk_window_get_screen (GtkWindow *window);


void gtk_window_set_has_frame (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_has_frame (GtkWindow *window);
void gtk_window_set_frame_dimensions (GtkWindow *window,
                                                gint left,
                                                gint top,
                                                gint right,
                                                gint bottom);
void gtk_window_get_frame_dimensions (GtkWindow *window,
                                                gint *left,
                                                gint *top,
                                                gint *right,
                                                gint *bottom);
void gtk_window_set_decorated (GtkWindow *window,
                                                gboolean setting);
gboolean gtk_window_get_decorated (GtkWindow *window);

void gtk_window_set_icon_list (GtkWindow *window,
                                                    GList *list);
GList* gtk_window_get_icon_list (GtkWindow *window);
void gtk_window_set_icon (GtkWindow *window,
                                                    GdkPixbuf *icon);
gboolean gtk_window_set_icon_from_file (GtkWindow *window,
                                                    const gchar *filename,
                                                    GError **err);
GdkPixbuf* gtk_window_get_icon (GtkWindow *window);
void gtk_window_set_default_icon_list (GList *list);
GList* gtk_window_get_default_icon_list (void);
gboolean gtk_window_set_default_icon_from_file (const gchar *filename,
                                                    GError **err);

void gtk_window_set_auto_startup_notification (gboolean setting);


void gtk_window_set_modal (GtkWindow *window,
                                      gboolean modal);
gboolean gtk_window_get_modal (GtkWindow *window);
GList* gtk_window_list_toplevels (void);

void gtk_window_add_mnemonic (GtkWindow *window,
                                           guint keyval,
                                           GtkWidget *target);
void gtk_window_remove_mnemonic (GtkWindow *window,
                                           guint keyval,
                                           GtkWidget *target);
gboolean gtk_window_mnemonic_activate (GtkWindow *window,
                                           guint keyval,
                                           GdkModifierType modifier);
void gtk_window_set_mnemonic_modifier (GtkWindow *window,
                                           GdkModifierType modifier);
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);

void gtk_window_present (GtkWindow *window);
void gtk_window_iconify (GtkWindow *window);
void gtk_window_deiconify (GtkWindow *window);
void gtk_window_stick (GtkWindow *window);
void gtk_window_unstick (GtkWindow *window);
void gtk_window_maximize (GtkWindow *window);
void gtk_window_unmaximize (GtkWindow *window);
void gtk_window_fullscreen (GtkWindow *window);
void gtk_window_unfullscreen (GtkWindow *window);

void gtk_window_begin_resize_drag (GtkWindow *window,
                                   GdkWindowEdge edge,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);
void gtk_window_begin_move_drag (GtkWindow *window,
                                   gint button,
                                   gint root_x,
                                   gint root_y,
                                   guint32 timestamp);


void gtk_window_set_policy (GtkWindow *window,
                                                gint allow_shrink,
                                                gint allow_grow,
                                                gint auto_shrink);






void gtk_window_set_default_size (GtkWindow *window,
                                      gint width,
                                      gint height);
void gtk_window_get_default_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
void gtk_window_resize (GtkWindow *window,
                                      gint width,
                                      gint height);
void gtk_window_get_size (GtkWindow *window,
                                      gint *width,
                                      gint *height);
void gtk_window_move (GtkWindow *window,
                                      gint x,
                                      gint y);
void gtk_window_get_position (GtkWindow *window,
                                      gint *root_x,
                                      gint *root_y);
gboolean gtk_window_parse_geometry (GtkWindow *window,
                                      const gchar *geometry);


void gtk_window_reshow_with_initial_size (GtkWindow *window);



GType gtk_window_group_get_type (void) ;

GtkWindowGroup * gtk_window_group_new (void);
void gtk_window_group_add_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);
void gtk_window_group_remove_window (GtkWindowGroup *window_group,
                                                 GtkWindow *window);


void _gtk_window_internal_set_focus (GtkWindow *window,
                                                GtkWidget *focus);
void gtk_window_remove_embedded_xid (GtkWindow *window,
                                                guint xid);
void gtk_window_add_embedded_xid (GtkWindow *window,
                                                guint xid);
void _gtk_window_reposition (GtkWindow *window,
                                                gint x,
                                                gint y);
void _gtk_window_constrain_size (GtkWindow *window,
                                                gint width,
                                                gint height,
                                                gint *new_width,
                                                gint *new_height);
GtkWindowGroup *_gtk_window_get_group (GtkWindow *window);
gboolean _gtk_window_activate_key (GtkWindow *window,
                                                GdkEventKey *event);

void _gtk_window_set_has_toplevel_focus (GtkWindow *window,
                                                    gboolean has_toplevel_focus);
void _gtk_window_unset_focus_and_default (GtkWindow *window,
                                                     GtkWidget *widget);

void _gtk_window_set_is_active (GtkWindow *window,
                                                    gboolean is_active);

typedef void (*GtkWindowKeysForeachFunc) (GtkWindow *window,
                                          guint keyval,
                                          GdkModifierType modifiers,
                                          gboolean is_mnemonic,
                                          gpointer data);

void _gtk_window_keys_foreach (GtkWindow *window,
                               GtkWindowKeysForeachFunc func,
                               gpointer func_data);


gboolean _gtk_window_query_nonaccels (GtkWindow *window,
                                                 guint accel_key,
                                                 GdkModifierType accel_mods);
# 33 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkmenu.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenushell.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkmenushell.h"
typedef struct _GtkMenuShell GtkMenuShell;
typedef struct _GtkMenuShellClass GtkMenuShellClass;

struct _GtkMenuShell
{
  GtkContainer container;

  GList *children;
  GtkWidget *active_menu_item;
  GtkWidget *parent_menu_shell;

  guint button;
  guint32 activate_time;

  guint active : 1;
  guint have_grab : 1;
  guint have_xgrab : 1;
  guint ignore_leave : 1;
  guint menu_flag : 1;
  guint ignore_enter : 1;
};

struct _GtkMenuShellClass
{
  GtkContainerClass parent_class;

  guint submenu_placement : 1;

  void (*deactivate) (GtkMenuShell *menu_shell);
  void (*selection_done) (GtkMenuShell *menu_shell);

  void (*move_current) (GtkMenuShell *menu_shell,
                            GtkMenuDirectionType direction);
  void (*activate_current) (GtkMenuShell *menu_shell,
                            gboolean force_hide);
  void (*cancel) (GtkMenuShell *menu_shell);
  void (*select_item) (GtkMenuShell *menu_shell,
                            GtkWidget *menu_item);
  void (*insert) (GtkMenuShell *menu_shell,
                            GtkWidget *child,
                            gint position);
  gint (*get_popup_delay) (GtkMenuShell *menu_shell);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
};


GType gtk_menu_shell_get_type (void) ;
void gtk_menu_shell_append (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
void gtk_menu_shell_prepend (GtkMenuShell *menu_shell,
                                        GtkWidget *child);
void gtk_menu_shell_insert (GtkMenuShell *menu_shell,
                                        GtkWidget *child,
                                        gint position);
void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);
void gtk_menu_shell_select_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item);
void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);
void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell,
                                        GtkWidget *menu_item,
                                        gboolean force_deactivate);
void gtk_menu_shell_select_first (GtkMenuShell *menu_shell,
                                        gboolean search_sensitive);
void _gtk_menu_shell_select_last (GtkMenuShell *menu_shell,
                                        gboolean search_sensitive);
void _gtk_menu_shell_activate (GtkMenuShell *menu_shell);
gint _gtk_menu_shell_get_popup_delay (GtkMenuShell *menu_shell);
# 34 "/usr/include/gtk-2.0/gtk/gtkmenu.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkmenu.h"
typedef struct _GtkMenu GtkMenu;
typedef struct _GtkMenuClass GtkMenuClass;

typedef void (*GtkMenuPositionFunc) (GtkMenu *menu,
                                     gint *x,
                                     gint *y,
                                     gboolean *push_in,
                                     gpointer user_data);
typedef void (*GtkMenuDetachFunc) (GtkWidget *attach_widget,
                                     GtkMenu *menu);

struct _GtkMenu
{
  GtkMenuShell menu_shell;

  GtkWidget *parent_menu_item;
  GtkWidget *old_active_menu_item;

  GtkAccelGroup *accel_group;
  gchar *accel_path;
  GtkMenuPositionFunc position_func;
  gpointer position_func_data;

  guint toggle_size;




  GtkWidget *toplevel;

  GtkWidget *tearoff_window;
  GtkWidget *tearoff_hbox;
  GtkWidget *tearoff_scrollbar;
  GtkAdjustment *tearoff_adjustment;

  GdkWindow *view_window;
  GdkWindow *bin_window;

  gint scroll_offset;
  gint saved_scroll_offset;
  gint scroll_step;
  guint timeout_id;




  GdkRegion *navigation_region;
  guint navigation_timeout;

  guint needs_destruction_ref_count : 1;
  guint torn_off : 1;



  guint tearoff_active : 1;

  guint scroll_fast : 1;

  guint upper_arrow_visible : 1;
  guint lower_arrow_visible : 1;
  guint upper_arrow_prelight : 1;
  guint lower_arrow_prelight : 1;
};

struct _GtkMenuClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_menu_get_type (void) ;
GtkWidget* gtk_menu_new (void);


void gtk_menu_popup (GtkMenu *menu,
                                           GtkWidget *parent_menu_shell,
                                           GtkWidget *parent_menu_item,
                                           GtkMenuPositionFunc func,
                                           gpointer data,
                                           guint button,
                                           guint32 activate_time);




void gtk_menu_reposition (GtkMenu *menu);

void gtk_menu_popdown (GtkMenu *menu);




GtkWidget* gtk_menu_get_active (GtkMenu *menu);
void gtk_menu_set_active (GtkMenu *menu,
                                           guint index_);




void gtk_menu_set_accel_group (GtkMenu *menu,
                                           GtkAccelGroup *accel_group);
GtkAccelGroup* gtk_menu_get_accel_group (GtkMenu *menu);
void gtk_menu_set_accel_path (GtkMenu *menu,
                                           const gchar *accel_path);





void gtk_menu_attach_to_widget (GtkMenu *menu,
                                           GtkWidget *attach_widget,
                                           GtkMenuDetachFunc detacher);
void gtk_menu_detach (GtkMenu *menu);





GtkWidget* gtk_menu_get_attach_widget (GtkMenu *menu);

void gtk_menu_set_tearoff_state (GtkMenu *menu,
                                           gboolean torn_off);
gboolean gtk_menu_get_tearoff_state (GtkMenu *menu);




void gtk_menu_set_title (GtkMenu *menu,
                                           const gchar *title);
const gchar *gtk_menu_get_title (GtkMenu *menu);

void gtk_menu_reorder_child (GtkMenu *menu,
                                           GtkWidget *child,
                                           gint position);

void gtk_menu_set_screen (GtkMenu *menu,
                                           GdkScreen *screen);
# 34 "/usr/include/gtk-2.0/gtk/gtklabel.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtklabel.h"
typedef struct _GtkLabel GtkLabel;
typedef struct _GtkLabelClass GtkLabelClass;

typedef struct _GtkLabelSelectionInfo GtkLabelSelectionInfo;

struct _GtkLabel
{
  GtkMisc misc;


  gchar *label;
  guint jtype : 2;
  guint wrap : 1;
  guint use_underline : 1;
  guint use_markup : 1;

  guint mnemonic_keyval;

  gchar *text;
  PangoAttrList *attrs;
  PangoAttrList *effective_attrs;

  PangoLayout *layout;

  GtkWidget *mnemonic_widget;
  GtkWindow *mnemonic_window;

  GtkLabelSelectionInfo *select_info;
};

struct _GtkLabelClass
{
  GtkMiscClass parent_class;

  void (* move_cursor) (GtkLabel *label,
                            GtkMovementStep step,
                            gint count,
                            gboolean extend_selection);
  void (* copy_clipboard) (GtkLabel *label);


  void (* populate_popup) (GtkLabel *label,
                             GtkMenu *menu);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_label_get_type (void) ;
GtkWidget* gtk_label_new (const char *str);
GtkWidget* gtk_label_new_with_mnemonic (const char *str);
void gtk_label_set_text (GtkLabel *label,
                                                   const char *str);
const gchar* gtk_label_get_text (GtkLabel *label);
void gtk_label_set_attributes (GtkLabel *label,
                                                   PangoAttrList *attrs);
PangoAttrList *gtk_label_get_attributes (GtkLabel *label);
void gtk_label_set_label (GtkLabel *label,
                                                   const gchar *str);
const gchar *gtk_label_get_label (GtkLabel *label);
void gtk_label_set_markup (GtkLabel *label,
                                                   const gchar *str);
void gtk_label_set_use_markup (GtkLabel *label,
                                                   gboolean setting);
gboolean gtk_label_get_use_markup (GtkLabel *label);
void gtk_label_set_use_underline (GtkLabel *label,
                                                   gboolean setting);
gboolean gtk_label_get_use_underline (GtkLabel *label);

void gtk_label_set_markup_with_mnemonic (GtkLabel *label,
                                                   const gchar *str);
guint gtk_label_get_mnemonic_keyval (GtkLabel *label);
void gtk_label_set_mnemonic_widget (GtkLabel *label,
                                                   GtkWidget *widget);
GtkWidget *gtk_label_get_mnemonic_widget (GtkLabel *label);
void gtk_label_set_text_with_mnemonic (GtkLabel *label,
                                                   const gchar *str);
void gtk_label_set_justify (GtkLabel *label,
                                                   GtkJustification jtype);
GtkJustification gtk_label_get_justify (GtkLabel *label);
void gtk_label_set_pattern (GtkLabel *label,
                                                   const gchar *pattern);
void gtk_label_set_line_wrap (GtkLabel *label,
                                                   gboolean wrap);
gboolean gtk_label_get_line_wrap (GtkLabel *label);
void gtk_label_set_selectable (GtkLabel *label,
                                                   gboolean setting);
gboolean gtk_label_get_selectable (GtkLabel *label);
void gtk_label_select_region (GtkLabel *label,
                                                   gint start_offset,
                                                   gint end_offset);
gboolean gtk_label_get_selection_bounds (GtkLabel *label,
                                                   gint *start,
                                                   gint *end);

PangoLayout *gtk_label_get_layout (GtkLabel *label);
void gtk_label_get_layout_offsets (GtkLabel *label,
                                           gint *x,
                                           gint *y);





void gtk_label_get (GtkLabel *label,
                                    char **str);





guint gtk_label_parse_uline (GtkLabel *label,
                                        const gchar *string);
# 35 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h" 2
# 50 "/usr/include/gtk-2.0/gtk/gtkaccellabel.h"
typedef struct _GtkAccelLabel GtkAccelLabel;
typedef struct _GtkAccelLabelClass GtkAccelLabelClass;

struct _GtkAccelLabel
{
  GtkLabel label;

  guint gtk_reserved;
  guint accel_padding;
  GtkWidget *accel_widget;
  GClosure *accel_closure;
  GtkAccelGroup *accel_group;
  gchar *accel_string;
  guint16 accel_string_width;
};

struct _GtkAccelLabelClass
{
  GtkLabelClass parent_class;

  gchar *signal_quote1;
  gchar *signal_quote2;
  gchar *mod_name_shift;
  gchar *mod_name_control;
  gchar *mod_name_alt;
  gchar *mod_separator;
  gchar *accel_seperator;
  guint latin1_to_char : 1;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};





GType gtk_accel_label_get_type (void) ;
GtkWidget* gtk_accel_label_new (const gchar *string);
GtkWidget* gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);
guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);
void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label,
                                              GtkWidget *accel_widget);
void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label,
                                              GClosure *accel_closure);
gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);
# 34 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h" 1
# 25 "/usr/include/gtk-2.0/gtk/gtkaccelmap.h"




typedef void (*GtkAccelMapForeach) (gpointer data,
                                                 const gchar *accel_path,
                                                 guint accel_key,
                                                 GdkModifierType accel_mods,
                                                 gboolean changed);



void gtk_accel_map_add_entry (const gchar *accel_path,
                                         guint accel_key,
                                         GdkModifierType accel_mods);
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path,
                                         GtkAccelKey *key);
gboolean gtk_accel_map_change_entry (const gchar *accel_path,
                                         guint accel_key,
                                         GdkModifierType accel_mods,
                                         gboolean replace);
void gtk_accel_map_load (const gchar *file_name);
void gtk_accel_map_save (const gchar *file_name);
void gtk_accel_map_foreach (gpointer data,
                                         GtkAccelMapForeach foreach_func);
void gtk_accel_map_load_fd (gint fd);
void gtk_accel_map_load_scanner (GScanner *scanner);
void gtk_accel_map_save_fd (gint fd);



void gtk_accel_map_add_filter (const gchar *filter_pattern);
void gtk_accel_map_foreach_unfiltered (gpointer data,
                                          GtkAccelMapForeach foreach_func);



void _gtk_accel_map_init (void);

void _gtk_accel_map_add_group (const gchar *accel_path,
                                                  GtkAccelGroup *accel_group);
void _gtk_accel_map_remove_group (const gchar *accel_path,
                                                  GtkAccelGroup *accel_group);
gboolean _gtk_accel_path_is_valid (const gchar *accel_path);



# 35 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaccessible.h" 1
# 23 "/usr/include/gtk-2.0/gtk/gtkaccessible.h"
# 1 "/usr/include/atk-1.0/atk/atk.h" 1
# 24 "/usr/include/atk-1.0/atk/atk.h"
# 1 "/usr/include/atk-1.0/atk/atkaction.h" 1
# 45 "/usr/include/atk-1.0/atk/atkaction.h"
typedef struct _AtkAction AtkAction;

typedef struct _AtkActionIface AtkActionIface;

struct _AtkActionIface
{
  GTypeInterface parent;

  gboolean (*do_action) (AtkAction *action,
                                                gint i);
  gint (*get_n_actions) (AtkAction *action);
  const gchar* (*get_description) (AtkAction *action,
                                                gint i);
  const gchar* (*get_name) (AtkAction *action,
                                                gint i);
  const gchar* (*get_keybinding) (AtkAction *action,
                                                gint i);
  gboolean (*set_description) (AtkAction *action,
                                                gint i,
                                                const gchar *desc);
  const gchar* (*get_localized_name)(AtkAction *action,
                                                gint i);
  AtkFunction pad2;
};

GType atk_action_get_type (void);
# 83 "/usr/include/atk-1.0/atk/atkaction.h"
gboolean atk_action_do_action (AtkAction *action,
                                            gint i);
gint atk_action_get_n_actions (AtkAction *action);
const gchar* atk_action_get_description (AtkAction *action,
                                                   gint i);
const gchar* atk_action_get_name (AtkAction *action,
                                                   gint i);
const gchar* atk_action_get_keybinding (AtkAction *action,
                                                   gint i);
gboolean atk_action_set_description (AtkAction *action,
                                                   gint i,
                                                   const gchar *desc);



const gchar* atk_action_get_localized_name (AtkAction *action,
                                                     gint i);
# 25 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkcomponent.h" 1
# 24 "/usr/include/atk-1.0/atk/atkcomponent.h"
# 1 "/usr/include/atk-1.0/atk/atkutil.h" 1
# 39 "/usr/include/atk-1.0/atk/atkutil.h"
typedef struct _AtkUtil AtkUtil;
typedef struct _AtkUtilClass AtkUtilClass;
typedef struct _AtkKeyEventStruct AtkKeyEventStruct;






typedef void (*AtkEventListener) (AtkObject*);
typedef void (*AtkEventListenerInit) (void);
typedef gint (*AtkKeySnoopFunc) (AtkKeyEventStruct *event,
                                   gpointer func_data);

struct _AtkKeyEventStruct {
  gint type;
  guint state;
  guint keyval;
  gint length;
  gchar *string;
  guint16 keycode;
  guint32 timestamp;
};
# 71 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum
{
  ATK_KEY_EVENT_PRESS,
  ATK_KEY_EVENT_RELEASE,
  ATK_KEY_EVENT_LAST_DEFINED
} AtkKeyEventType;

struct _AtkUtil
{
  GObject parent;
};

struct _AtkUtilClass
{
   GObjectClass parent;
   guint (* add_global_event_listener) (GSignalEmissionHook listener,
                                                  const gchar *event_type);
   void (* remove_global_event_listener) (guint listener_id);
   guint (* add_key_event_listener) (AtkKeySnoopFunc listener,
                                                  gpointer data);
   void (* remove_key_event_listener) (guint listener_id);
   AtkObject* (* get_root) (void);
   const gchar* (* get_toolkit_name) (void);
   const gchar* (* get_toolkit_version) (void);
};
GType atk_util_get_type (void);
# 107 "/usr/include/atk-1.0/atk/atkutil.h"
typedef enum {
  ATK_XY_SCREEN,
  ATK_XY_WINDOW
}AtkCoordType;





guint atk_add_focus_tracker (AtkEventListener focus_tracker);





void atk_remove_focus_tracker (guint tracker_id);







void atk_focus_tracker_init (AtkEventListenerInit add_function);





void atk_focus_tracker_notify (AtkObject *object);





guint atk_add_global_event_listener (GSignalEmissionHook listener,
                                       const gchar *event_type);




void atk_remove_global_event_listener (guint listener_id);





guint atk_add_key_event_listener (AtkKeySnoopFunc listener, gpointer data);




void atk_remove_key_event_listener (guint listener_id);




AtkObject* atk_get_root(void);




const gchar *atk_get_toolkit_name (void);




const gchar *atk_get_toolkit_version (void);
# 25 "/usr/include/atk-1.0/atk/atkcomponent.h" 2
# 44 "/usr/include/atk-1.0/atk/atkcomponent.h"
typedef struct _AtkComponent AtkComponent;

typedef struct _AtkComponentIface AtkComponentIface;

typedef void (*AtkFocusHandler) (AtkObject*, gboolean);


struct _AtkComponentIface
{
  GTypeInterface parent;

  guint (* add_focus_handler) (AtkComponent *component,
                                         AtkFocusHandler handler);

  gboolean (* contains) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);

  AtkObject* (* ref_accessible_at_point) (AtkComponent *component,
                                         gint x,
                                         gint y,
                                         AtkCoordType coord_type);
  void (* get_extents) (AtkComponent *component,
                                         gint *x,
                                         gint *y,
                                         gint *width,
                                         gint *height,
                                         AtkCoordType coord_type);
  void (* get_position) (AtkComponent *component,
                                                 gint *x,
                                                 gint *y,
                                                 AtkCoordType coord_type);
  void (* get_size) (AtkComponent *component,
                                                         gint *width,
                                                         gint *height);
  gboolean (* grab_focus) (AtkComponent *component);
  void (* remove_focus_handler) (AtkComponent *component,
                                                          guint handler_id);
  gboolean (* set_extents) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 gint width,
                                                 gint height,
                                                 AtkCoordType coord_type);
  gboolean (* set_position) (AtkComponent *component,
                                                 gint x,
                                                 gint y,
                                                 AtkCoordType coord_type);
  gboolean (* set_size) (AtkComponent *component,
                                                 gint width,
                                                 gint height);

  AtkLayer (* get_layer) (AtkComponent *component);
  gint (* get_mdi_zorder) (AtkComponent *component);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_component_get_type (void);



guint atk_component_add_focus_handler (AtkComponent *component,
                                                           AtkFocusHandler handler);
gboolean atk_component_contains (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
AtkObject* atk_component_ref_accessible_at_point(AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
void atk_component_get_extents (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            gint *width,
                                                            gint *height,
                                                            AtkCoordType coord_type);
void atk_component_get_position (AtkComponent *component,
                                                            gint *x,
                                                            gint *y,
                                                            AtkCoordType coord_type);
void atk_component_get_size (AtkComponent *component,
                                                            gint *width,
                                                            gint *height);
AtkLayer atk_component_get_layer (AtkComponent *component);
gint atk_component_get_mdi_zorder (AtkComponent *component);
gboolean atk_component_grab_focus (AtkComponent *component);
void atk_component_remove_focus_handler (AtkComponent *component,
                                                            guint handler_id);
gboolean atk_component_set_extents (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            gint width,
                                                            gint height,
                                                            AtkCoordType coord_type);
gboolean atk_component_set_position (AtkComponent *component,
                                                            gint x,
                                                            gint y,
                                                            AtkCoordType coord_type);
gboolean atk_component_set_size (AtkComponent *component,
                                                            gint width,
                                                            gint height);
# 26 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkdocument.h" 1
# 43 "/usr/include/atk-1.0/atk/atkdocument.h"
typedef struct _AtkDocument AtkDocument;

typedef struct _AtkDocumentIface AtkDocumentIface;

struct _AtkDocumentIface
{
  GTypeInterface parent;
  const gchar* ( *get_document_type) (AtkDocument *document);
  gpointer ( *get_document) (AtkDocument *document);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
  AtkFunction pad5;
  AtkFunction pad6;
  AtkFunction pad7;
  AtkFunction pad8;
};

GType atk_document_get_type (void);

const gchar* atk_document_get_document_type (AtkDocument *document);
gpointer atk_document_get_document (AtkDocument *document);
# 27 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkeditabletext.h" 1
# 24 "/usr/include/atk-1.0/atk/atkeditabletext.h"
# 1 "/usr/include/atk-1.0/atk/atktext.h" 1
# 39 "/usr/include/atk-1.0/atk/atktext.h"
typedef GSList AtkAttributeSet;
# 51 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkAttribute AtkAttribute;

struct _AtkAttribute {
  gchar* name;
  gchar* value;
};
# 92 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum
{
  ATK_TEXT_ATTR_INVALID = 0,
  ATK_TEXT_ATTR_LEFT_MARGIN,
  ATK_TEXT_ATTR_RIGHT_MARGIN,
  ATK_TEXT_ATTR_INDENT,
  ATK_TEXT_ATTR_INVISIBLE,
  ATK_TEXT_ATTR_EDITABLE,
  ATK_TEXT_ATTR_PIXELS_ABOVE_LINES,
  ATK_TEXT_ATTR_PIXELS_BELOW_LINES,
  ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP,
  ATK_TEXT_ATTR_BG_FULL_HEIGHT,
  ATK_TEXT_ATTR_RISE,
  ATK_TEXT_ATTR_UNDERLINE,
  ATK_TEXT_ATTR_STRIKETHROUGH,
  ATK_TEXT_ATTR_SIZE,
  ATK_TEXT_ATTR_SCALE,
  ATK_TEXT_ATTR_WEIGHT,
  ATK_TEXT_ATTR_LANGUAGE,
  ATK_TEXT_ATTR_FAMILY_NAME,
  ATK_TEXT_ATTR_BG_COLOR,
  ATK_TEXT_ATTR_FG_COLOR,
  ATK_TEXT_ATTR_BG_STIPPLE,
  ATK_TEXT_ATTR_FG_STIPPLE,
  ATK_TEXT_ATTR_WRAP_MODE,
  ATK_TEXT_ATTR_DIRECTION,
  ATK_TEXT_ATTR_JUSTIFICATION,
  ATK_TEXT_ATTR_STRETCH,
  ATK_TEXT_ATTR_VARIANT,
  ATK_TEXT_ATTR_STYLE,
  ATK_TEXT_ATTR_LAST_DEFINED
} AtkTextAttribute;

AtkTextAttribute atk_text_attribute_register (const gchar *name);
# 135 "/usr/include/atk-1.0/atk/atktext.h"
typedef struct _AtkText AtkText;

typedef struct _AtkTextIface AtkTextIface;
# 151 "/usr/include/atk-1.0/atk/atktext.h"
typedef enum {
  ATK_TEXT_BOUNDARY_CHAR,
  ATK_TEXT_BOUNDARY_WORD_START,
  ATK_TEXT_BOUNDARY_WORD_END,
  ATK_TEXT_BOUNDARY_SENTENCE_START,
  ATK_TEXT_BOUNDARY_SENTENCE_END,
  ATK_TEXT_BOUNDARY_LINE_START,
  ATK_TEXT_BOUNDARY_LINE_END
} AtkTextBoundary;

struct _AtkTextIface
{
  GTypeInterface parent;

  gchar* (* get_text) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset);
  gchar* (* get_text_after_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
                                                   gint *start_offset,
                                                   gint *end_offset);
  gchar* (* get_text_at_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
                                                   gint *start_offset,
                                                   gint *end_offset);
  gunichar (* get_character_at_offset) (AtkText *text,
                                                   gint offset);
  gchar* (* get_text_before_offset) (AtkText *text,
                                                   gint offset,
                                                   AtkTextBoundary boundary_type,
                                                   gint *start_offset,
                                                   gint *end_offset);
  gint (* get_caret_offset) (AtkText *text);
  AtkAttributeSet* (* get_run_attributes) (AtkText *text,
                                                   gint offset,
                                                   gint *start_offset,
                                                   gint *end_offset);
  AtkAttributeSet* (* get_default_attributes) (AtkText *text);
  void (* get_character_extents) (AtkText *text,
                                                   gint offset,
                                                   gint *x,
                                                   gint *y,
                                                   gint *width,
                                                   gint *height,
                                                   AtkCoordType coords);
  gint (* get_character_count) (AtkText *text);
  gint (* get_offset_at_point) (AtkText *text,
                                                   gint x,
                                                   gint y,
                                                   AtkCoordType coords);
  gint (* get_n_selections) (AtkText *text);
  gchar* (* get_selection) (AtkText *text,
                                                   gint selection_num,
                                                   gint *start_offset,
                                                   gint *end_offset);
  gboolean (* add_selection) (AtkText *text,
                                                   gint start_offset,
                                                   gint end_offset);
  gboolean (* remove_selection) (AtkText *text,
                                                   gint selection_num);
  gboolean (* set_selection) (AtkText *text,
                                                   gint selection_num,
                                                   gint start_offset,
                                                   gint end_offset);
  gboolean (* set_caret_offset) (AtkText *text,
                                                   gint offset);




  void (* text_changed) (AtkText *text,
                                                   gint position,
                                                   gint length);
  void (* text_caret_moved) (AtkText *text,
                                                   gint location);
  void (* text_selection_changed) (AtkText *text);

  void (* text_attributes_changed) (AtkText *text);

  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};

GType atk_text_get_type (void);
# 247 "/usr/include/atk-1.0/atk/atktext.h"
gchar* atk_text_get_text (AtkText *text,
                                                           gint start_offset,
                                                           gint end_offset);
gunichar atk_text_get_character_at_offset (AtkText *text,
                                                           gint offset);
gchar* atk_text_get_text_after_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
                                                           gint *start_offset,
                                                           gint *end_offset);
gchar* atk_text_get_text_at_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
                                                           gint *start_offset,
                                                           gint *end_offset);
gchar* atk_text_get_text_before_offset (AtkText *text,
                                                           gint offset,
                                                           AtkTextBoundary boundary_type,
                                                           gint *start_offset,
                                                           gint *end_offset);
gint atk_text_get_caret_offset (AtkText *text);
void atk_text_get_character_extents (AtkText *text,
                                                           gint offset,
                                                           gint *x,
                                                           gint *y,
                                                           gint *width,
                                                           gint *height,
                                                           AtkCoordType coords);
AtkAttributeSet* atk_text_get_run_attributes (AtkText *text,
                                                           gint offset,
                                                           gint *start_offset,
                                                           gint *end_offset);
AtkAttributeSet* atk_text_get_default_attributes (AtkText *text);
gint atk_text_get_character_count (AtkText *text);
gint atk_text_get_offset_at_point (AtkText *text,
                                                           gint x,
                                                           gint y,
                                                           AtkCoordType coords);
gint atk_text_get_n_selections (AtkText *text);
gchar* atk_text_get_selection (AtkText *text,
                                                           gint selection_num,
                                                           gint *start_offset,
                                                           gint *end_offset);
gboolean atk_text_add_selection (AtkText *text,
                                                           gint start_offset,
                                                           gint end_offset);
gboolean atk_text_remove_selection (AtkText *text,
                                                           gint selection_num);
gboolean atk_text_set_selection (AtkText *text,
                                                           gint selection_num,
                                                           gint start_offset,
                                                           gint end_offset);
gboolean atk_text_set_caret_offset (AtkText *text,
                                                           gint offset);
void atk_attribute_set_free (AtkAttributeSet *attrib_set);
const gchar* atk_text_attribute_get_name (AtkTextAttribute attr);
AtkTextAttribute atk_text_attribute_for_name (const gchar *name);
const gchar* atk_text_attribute_get_value (AtkTextAttribute attr,
                                                           gint index_);
# 25 "/usr/include/atk-1.0/atk/atkeditabletext.h" 2
# 42 "/usr/include/atk-1.0/atk/atkeditabletext.h"
typedef struct _AtkEditableText AtkEditableText;

typedef struct _AtkEditableTextIface AtkEditableTextIface;

struct _AtkEditableTextIface
{
  GTypeInterface parent_interface;

  gboolean (* set_run_attributes) (AtkEditableText *text,
                                   AtkAttributeSet *attrib_set,
                                   gint start_offset,
                                   gint end_offset);
  void (* set_text_contents) (AtkEditableText *text,
                                   const gchar *string);
  void (* insert_text) (AtkEditableText *text,
                                   const gchar *string,
                                   gint length,
                                   gint *position);
  void (* copy_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* cut_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* delete_text) (AtkEditableText *text,
                                   gint start_pos,
                                   gint end_pos);
  void (* paste_text) (AtkEditableText *text,
                                   gint position);

  AtkFunction pad1;
  AtkFunction pad2;
};
GType atk_editable_text_get_type (void);


gboolean atk_editable_text_set_run_attributes (AtkEditableText *text,
                                               AtkAttributeSet *attrib_set,
                                               gint start_offset,
                                               gint end_offset);
void atk_editable_text_set_text_contents (AtkEditableText *text,
                                             const gchar *string);
void atk_editable_text_insert_text (AtkEditableText *text,
                                             const gchar *string,
                                             gint length,
                                             gint *position);
void atk_editable_text_copy_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_cut_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_delete_text (AtkEditableText *text,
                                             gint start_pos,
                                             gint end_pos);
void atk_editable_text_paste_text (AtkEditableText *text,
                                             gint position);
# 28 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h" 1
# 23 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h"
# 1 "/usr/include/atk-1.0/atk/atk.h" 1
# 24 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h" 2
# 41 "/usr/include/atk-1.0/atk/atkgobjectaccessible.h"
typedef struct _AtkGObjectAccessible AtkGObjectAccessible;
typedef struct _AtkGObjectAccessibleClass AtkGObjectAccessibleClass;

struct _AtkGObjectAccessible
{
  AtkObject parent;
};

GType atk_gobject_accessible_get_type (void);

struct _AtkGObjectAccessibleClass
{
  AtkObjectClass parent_class;

  AtkFunction pad1;
  AtkFunction pad2;
};

AtkObject *atk_gobject_accessible_for_object (GObject *obj);
GObject *atk_gobject_accessible_get_object (AtkGObjectAccessible *obj);
# 29 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhyperlink.h" 1
# 41 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef enum
{
  ATK_HYPERLINK_IS_INLINE = 1 << 0
} AtkHyperlinkStateFlags;
# 53 "/usr/include/atk-1.0/atk/atkhyperlink.h"
typedef struct _AtkHyperlink AtkHyperlink;
typedef struct _AtkHyperlinkClass AtkHyperlinkClass;

struct _AtkHyperlink
{
  GObject parent;
};

struct _AtkHyperlinkClass
{
  GObjectClass parent;





  gchar* (* get_uri) (AtkHyperlink *link_,
                                            gint i);




  AtkObject* (* get_object) (AtkHyperlink *link_,
                                            gint i);



  gint (* get_end_index) (AtkHyperlink *link_);




  gint (* get_start_index) (AtkHyperlink *link_);






  gboolean (* is_valid) (AtkHyperlink *link_);




  gint (* get_n_anchors) (AtkHyperlink *link_);







  guint (* link_state) (AtkHyperlink *link_);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
};

GType atk_hyperlink_get_type (void);

gchar* atk_hyperlink_get_uri (AtkHyperlink *link_,
                                                     gint i);

AtkObject* atk_hyperlink_get_object (AtkHyperlink *link_,
                                                     gint i);

gint atk_hyperlink_get_end_index (AtkHyperlink *link_);

gint atk_hyperlink_get_start_index (AtkHyperlink *link_);

gboolean atk_hyperlink_is_valid (AtkHyperlink *link_);

gboolean atk_hyperlink_is_inline (AtkHyperlink *link_);

gint atk_hyperlink_get_n_anchors (AtkHyperlink *link_);
# 30 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkhypertext.h" 1
# 42 "/usr/include/atk-1.0/atk/atkhypertext.h"
typedef struct _AtkHypertext AtkHypertext;

typedef struct _AtkHypertextIface AtkHypertextIface;

struct _AtkHypertextIface
{
  GTypeInterface parent;

  AtkHyperlink*(* get_link) (AtkHypertext *hypertext,
                                             gint link_index);
  gint (* get_n_links) (AtkHypertext *hypertext);
  gint (* get_link_index) (AtkHypertext *hypertext,
                                             gint char_index);
  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};
GType atk_hypertext_get_type (void);

AtkHyperlink* atk_hypertext_get_link (AtkHypertext *hypertext,
                                            gint link_index);
gint atk_hypertext_get_n_links (AtkHypertext *hypertext);
gint atk_hypertext_get_link_index (AtkHypertext *hypertext,
                                            gint char_index);
# 31 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkimage.h" 1
# 43 "/usr/include/atk-1.0/atk/atkimage.h"
typedef struct _AtkImage AtkImage;

typedef struct _AtkImageIface AtkImageIface;

struct _AtkImageIface
{
  GTypeInterface parent;
  void ( *get_image_position) (AtkImage *image,
                                                   gint *x,
                                                   gint *y,
                                                   AtkCoordType coord_type);
  const gchar* ( *get_image_description) (AtkImage *image);
  void ( *get_image_size) (AtkImage *image,
                                                   gint *width,
                                                   gint *height);
  gboolean ( *set_image_description) (AtkImage *image,
                                                   const gchar *description);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_image_get_type (void);

const gchar* atk_image_get_image_description (AtkImage *image);

void atk_image_get_image_size (AtkImage *image,
                                          gint *width,
                                          gint *height);

gboolean atk_image_set_image_description (AtkImage *image,
                                          const gchar *description);
void atk_image_get_image_position (AtkImage *image,
                                          gint *x,
                                          gint *y,
                                          AtkCoordType coord_type);
# 32 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobject.h" 1
# 23 "/usr/include/atk-1.0/atk/atknoopobject.h"

# 32 "/usr/include/atk-1.0/atk/atknoopobject.h"
typedef struct _AtkNoOpObject AtkNoOpObject;
typedef struct _AtkNoOpObjectClass AtkNoOpObjectClass;

struct _AtkNoOpObject
{
  AtkObject parent;
};

GType atk_no_op_object_get_type (void);

struct _AtkNoOpObjectClass
{
  AtkObjectClass parent_class;
};

AtkObject *atk_no_op_object_new (GObject *obj);


# 33 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 1
# 23 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
# 1 "/usr/include/atk-1.0/atk/atkobjectfactory.h" 1
# 37 "/usr/include/atk-1.0/atk/atkobjectfactory.h"
typedef struct _AtkObjectFactory AtkObjectFactory;
typedef struct _AtkObjectFactoryClass AtkObjectFactoryClass;

struct _AtkObjectFactory
{
  GObject parent;
};

struct _AtkObjectFactoryClass
{
  GObjectClass parent_class;

  AtkObject* (* create_accessible) (GObject *obj);
  void (* invalidate) (AtkObjectFactory *factory);
  GType (* get_accessible_type) (void);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_object_factory_get_type(void);

AtkObject* atk_object_factory_create_accessible (AtkObjectFactory *factory, GObject *obj);
void atk_object_factory_invalidate (AtkObjectFactory *factory);
GType atk_object_factory_get_accessible_type (AtkObjectFactory *factory);
# 24 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h" 2
# 36 "/usr/include/atk-1.0/atk/atknoopobjectfactory.h"
typedef struct _AtkNoOpObjectFactory AtkNoOpObjectFactory;
typedef struct _AtkNoOpObjectFactoryClass AtkNoOpObjectFactoryClass;

struct _AtkNoOpObjectFactory
{
  AtkObjectFactory parent;
};

struct _AtkNoOpObjectFactoryClass
{
  AtkObjectFactoryClass parent_class;
};

GType atk_no_op_object_factory_get_type(void);

AtkObjectFactory *atk_no_op_object_factory_new(void);
# 34 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atkregistry.h" 1
# 37 "/usr/include/atk-1.0/atk/atkregistry.h"
struct _AtkRegistry
{
  GObject parent;
  GHashTable *factory_type_registry;
  GHashTable *factory_singleton_cache;
};

struct _AtkRegistryClass
{
  GObjectClass parent_class;
};

typedef struct _AtkRegistry AtkRegistry;
typedef struct _AtkRegistryClass AtkRegistryClass;


GType atk_registry_get_type (void);
void atk_registry_set_factory_type (AtkRegistry *registry,
                                                 GType type,
                                                 GType factory_type);
GType atk_registry_get_factory_type (AtkRegistry *registry,
                                                 GType type);
AtkObjectFactory* atk_registry_get_factory (AtkRegistry *registry,
                                                 GType type);

AtkRegistry* atk_get_default_registry (void);
# 36 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelation.h" 1
# 43 "/usr/include/atk-1.0/atk/atkrelation.h"
typedef struct _AtkRelation AtkRelation;
typedef struct _AtkRelationClass AtkRelationClass;

struct _AtkRelation
{
  GObject parent;

  GPtrArray *target;
  AtkRelationType relationship;
};

struct _AtkRelationClass
{
  GObjectClass parent;
};

GType atk_relation_get_type (void);

AtkRelationType atk_relation_type_register (const gchar *name);
const gchar* atk_relation_type_get_name (AtkRelationType type);
AtkRelationType atk_relation_type_for_name (const gchar *name);





AtkRelation* atk_relation_new (AtkObject **targets,
                                                       gint n_targets,
                                                       AtkRelationType relationship);



AtkRelationType atk_relation_get_relation_type (AtkRelation *relation);



GPtrArray* atk_relation_get_target (AtkRelation *relation);
# 37 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkrelationset.h" 1
# 38 "/usr/include/atk-1.0/atk/atkrelationset.h"
typedef struct _AtkRelationSetClass AtkRelationSetClass;


struct _AtkRelationSet
{
  GObject parent;

  GPtrArray *relations;
};

struct _AtkRelationSetClass
{
  GObjectClass parent;

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_relation_set_get_type (void);

AtkRelationSet* atk_relation_set_new (void);
gboolean atk_relation_set_contains (AtkRelationSet *set,
                                                       AtkRelationType relationship);
void atk_relation_set_remove (AtkRelationSet *set,
                                                       AtkRelation *relation);
void atk_relation_set_add (AtkRelationSet *set,
                                                       AtkRelation *relation);
gint atk_relation_set_get_n_relations (AtkRelationSet *set);
AtkRelation* atk_relation_set_get_relation (AtkRelationSet *set,
                                                       gint i);
AtkRelation* atk_relation_set_get_relation_by_type (AtkRelationSet *set,
                                                       AtkRelationType relationship);
# 38 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atkselection.h" 1
# 43 "/usr/include/atk-1.0/atk/atkselection.h"
typedef struct _AtkSelection AtkSelection;

typedef struct _AtkSelectionIface AtkSelectionIface;

struct _AtkSelectionIface
{
  GTypeInterface parent;

  gboolean (* add_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* clear_selection) (AtkSelection *selection);
  AtkObject* (* ref_selection) (AtkSelection *selection,
                                         gint i);
  gint (* get_selection_count) (AtkSelection *selection);
  gboolean (* is_child_selected) (AtkSelection *selection,
                                         gint i);
  gboolean (* remove_selection) (AtkSelection *selection,
                                         gint i);
  gboolean (* select_all_selection) (AtkSelection *selection);



  void (*selection_changed) (AtkSelection *selection);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_selection_get_type (void);

gboolean atk_selection_add_selection (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_clear_selection (AtkSelection *selection);

AtkObject* atk_selection_ref_selection (AtkSelection *selection,
                                                 gint i);

gint atk_selection_get_selection_count (AtkSelection *selection);

gboolean atk_selection_is_child_selected (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_remove_selection (AtkSelection *selection,
                                                 gint i);

gboolean atk_selection_select_all_selection (AtkSelection *selection);
# 40 "/usr/include/atk-1.0/atk/atk.h" 2

# 1 "/usr/include/atk-1.0/atk/atkstateset.h" 1
# 38 "/usr/include/atk-1.0/atk/atkstateset.h"
typedef struct _AtkStateSetClass AtkStateSetClass;


struct _AtkStateSet
{
  GObject parent;

};

struct _AtkStateSetClass
{
  GObjectClass parent;
};

GType atk_state_set_get_type (void);

AtkStateSet* atk_state_set_new (void);
gboolean atk_state_set_is_empty (AtkStateSet *set);
gboolean atk_state_set_add_state (AtkStateSet *set,
                                                 AtkStateType type);
void atk_state_set_add_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
void atk_state_set_clear_states (AtkStateSet *set);
gboolean atk_state_set_contains_state (AtkStateSet *set,
                                                 AtkStateType type);
gboolean atk_state_set_contains_states (AtkStateSet *set,
                                                 AtkStateType *types,
                                                 gint n_types);
gboolean atk_state_set_remove_state (AtkStateSet *set,
                                                 AtkStateType type);
AtkStateSet* atk_state_set_and_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
AtkStateSet* atk_state_set_or_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
AtkStateSet* atk_state_set_xor_sets (AtkStateSet *set,
                                                 AtkStateSet *compare_set);
# 42 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atkstreamablecontent.h" 1
# 36 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
typedef struct _AtkStreamableContent AtkStreamableContent;

typedef struct _AtkStreamableContentIface AtkStreamableContentIface;

struct _AtkStreamableContentIface
{
  GTypeInterface parent;




  gint (* get_n_mime_types) (AtkStreamableContent *streamable);
# 58 "/usr/include/atk-1.0/atk/atkstreamablecontent.h"
  const gchar* (* get_mime_type) (AtkStreamableContent *streamable,
                                                   gint i);






  GIOChannel* (* get_stream) (AtkStreamableContent *streamable,
                                                   const gchar *mime_type);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};
GType atk_streamable_content_get_type (void);

gint atk_streamable_content_get_n_mime_types (AtkStreamableContent *streamable);

const gchar* atk_streamable_content_get_mime_type (AtkStreamableContent *streamable,
                                                                gint i);
GIOChannel* atk_streamable_content_get_stream (AtkStreamableContent *streamable,
                                                                 const gchar *mime_type);
# 43 "/usr/include/atk-1.0/atk/atk.h" 2
# 1 "/usr/include/atk-1.0/atk/atktable.h" 1
# 42 "/usr/include/atk-1.0/atk/atktable.h"
typedef struct _AtkTable AtkTable;

typedef struct _AtkTableIface AtkTableIface;

struct _AtkTableIface
{
  GTypeInterface parent;

  AtkObject* (* ref_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_index_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_column_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_row_at_index) (AtkTable *table,
                                                  gint index_);
  gint (* get_n_columns) (AtkTable *table);
  gint (* get_n_rows) (AtkTable *table);
  gint (* get_column_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gint (* get_row_extent_at) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  AtkObject*
                    (* get_caption) (AtkTable *table);
  const gchar*
                    (* get_column_description) (AtkTable *table,
                                                  gint column);
  AtkObject* (* get_column_header) (AtkTable *table,
                                                  gint column);
  const gchar*
                    (* get_row_description) (AtkTable *table,
                                                  gint row);
  AtkObject* (* get_row_header) (AtkTable *table,
                                                  gint row);
  AtkObject* (* get_summary) (AtkTable *table);
  void (* set_caption) (AtkTable *table,
                                                  AtkObject *caption);
  void (* set_column_description) (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
  void (* set_column_header) (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
  void (* set_row_description) (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
  void (* set_row_header) (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
  void (* set_summary) (AtkTable *table,
                                                  AtkObject *accessible);
  gint (* get_selected_columns) (AtkTable *table,
                                                  gint **selected);
  gint (* get_selected_rows) (AtkTable *table,
                                                  gint **selected);
  gboolean (* is_column_selected) (AtkTable *table,
                                                  gint column);
  gboolean (* is_row_selected) (AtkTable *table,
                                                  gint row);
  gboolean (* is_selected) (AtkTable *table,
                                                  gint row,
                                                  gint column);
  gboolean (* add_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* remove_row_selection) (AtkTable *table,
                                                  gint row);
  gboolean (* add_column_selection) (AtkTable *table,
                                                  gint column);
  gboolean (* remove_column_selection) (AtkTable *table,
                                                  gint column);




  void (* row_inserted) (AtkTable *table,
                                                  gint row,
                                                  gint num_inserted);
  void (* column_inserted) (AtkTable *table,
                                                  gint column,
                                                  gint num_inserted);
  void (* row_deleted) (AtkTable *table,
                                                  gint row,
                                                  gint num_deleted);
  void (* column_deleted) (AtkTable *table,
                                                  gint column,
                                                  gint num_deleted);
  void (* row_reordered) (AtkTable *table);
  void (* column_reordered) (AtkTable *table);
  void (* model_changed) (AtkTable *table);

  AtkFunction pad1;
  AtkFunction pad2;
  AtkFunction pad3;
  AtkFunction pad4;
};

GType atk_table_get_type (void);

AtkObject* atk_table_ref_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_index_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_column_at_index (AtkTable *table,
                                                  gint index_);
gint atk_table_get_row_at_index (AtkTable *table,
                                                  gint index_);
gint atk_table_get_n_columns (AtkTable *table);
gint atk_table_get_n_rows (AtkTable *table);
gint atk_table_get_column_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
gint atk_table_get_row_extent_at (AtkTable *table,
                                                  gint row,
                                                  gint column);
AtkObject*
                  atk_table_get_caption (AtkTable *table);
const gchar*
                  atk_table_get_column_description (AtkTable *table,
                                                  gint column);
AtkObject* atk_table_get_column_header (AtkTable *table,
                                                  gint column);
const gchar*
                  atk_table_get_row_description (AtkTable *table,
                                                  gint row);
AtkObject* atk_table_get_row_header (AtkTable *table,
                                                  gint row);
AtkObject* atk_table_get_summary (AtkTable *table);
void atk_table_set_caption (AtkTable *table,
                                                  AtkObject *caption);
void atk_table_set_column_description
                                                 (AtkTable *table,
                                                  gint column,
                                                  const gchar *description);
void atk_table_set_column_header (AtkTable *table,
                                                  gint column,
                                                  AtkObject *header);
void atk_table_set_row_description (AtkTable *table,
                                                  gint row,
                                                  const gchar *description);
void atk_table_set_row_header (AtkTable *table,
                                                  gint row,
                                                  AtkObject *header);
void atk_table_set_summary (AtkTable *table,
                                                  AtkObject *accessible);
gint atk_table_get_selected_columns (AtkTable *table,
                                                  gint **selected);
gint atk_table_get_selected_rows (AtkTable *table,
                                                  gint **selected);
gboolean atk_table_is_column_selected (AtkTable *table,
                                                  gint column);
gboolean atk_table_is_row_selected (AtkTable *table,
                                                  gint row);
gboolean atk_table_is_selected (AtkTable *table,
                                                  gint row,
                                                  gint column);
gboolean atk_table_add_row_selection (AtkTable *table,
                                                  gint row);
gboolean atk_table_remove_row_selection (AtkTable *table,
                                                  gint row);
gboolean atk_table_add_column_selection (AtkTable *table,
                                                  gint column);
gboolean atk_table_remove_column_selection
                                                 (AtkTable *table,
                                                  gint column);
# 44 "/usr/include/atk-1.0/atk/atk.h" 2


# 1 "/usr/include/atk-1.0/atk/atkvalue.h" 1
# 44 "/usr/include/atk-1.0/atk/atkvalue.h"
typedef struct _AtkValue AtkValue;

typedef struct _AtkValueIface AtkValueIface;

struct _AtkValueIface
{
  GTypeInterface parent;

  void (* get_current_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_maximum_value) (AtkValue *obj,
                                  GValue *value);
  void (* get_minimum_value) (AtkValue *obj,
                                  GValue *value);
  gboolean (* set_current_value) (AtkValue *obj,
                                  const GValue *value);

  AtkFunction pad1;
  AtkFunction pad2;
};

GType atk_value_get_type (void);

void atk_value_get_current_value (AtkValue *obj,
                                       GValue *value);


void atk_value_get_maximum_value (AtkValue *obj,
                                       GValue *value);

void atk_value_get_minimum_value (AtkValue *obj,
                                       GValue *value);

gboolean atk_value_set_current_value (AtkValue *obj,
                                       const GValue *value);
# 47 "/usr/include/atk-1.0/atk/atk.h" 2
# 24 "/usr/include/gtk-2.0/gtk/gtkaccessible.h" 2
# 37 "/usr/include/gtk-2.0/gtk/gtkaccessible.h"
typedef struct _GtkAccessible GtkAccessible;
typedef struct _GtkAccessibleClass GtkAccessibleClass;





struct _GtkAccessible
{
  AtkObject parent;





  GtkWidget *widget;
};

struct _GtkAccessibleClass
{
  AtkObjectClass parent_class;

  void (*connect_widget_destroyed) (GtkAccessible *accessible);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_accessible_get_type (void);

void gtk_accessible_connect_widget_destroyed (GtkAccessible *accessible);
# 36 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkalignment.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkalignment.h"
typedef struct _GtkAlignment GtkAlignment;
typedef struct _GtkAlignmentClass GtkAlignmentClass;

struct _GtkAlignment
{
  GtkBin bin;

  gfloat xalign;
  gfloat yalign;
  gfloat xscale;
  gfloat yscale;
};

struct _GtkAlignmentClass
{
  GtkBinClass parent_class;
};


GType gtk_alignment_get_type (void) ;
GtkWidget* gtk_alignment_new (gfloat xalign,
                                     gfloat yalign,
                                     gfloat xscale,
                                     gfloat yscale);
void gtk_alignment_set (GtkAlignment *alignment,
                                     gfloat xalign,
                                     gfloat yalign,
                                     gfloat xscale,
                                     gfloat yscale);
# 38 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkframe.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkframe.h"
typedef struct _GtkFrame GtkFrame;
typedef struct _GtkFrameClass GtkFrameClass;

struct _GtkFrame
{
  GtkBin bin;

  GtkWidget *label_widget;
  gint16 shadow_type;
  gfloat label_xalign;
  gfloat label_yalign;

  GtkAllocation child_allocation;
};

struct _GtkFrameClass
{
  GtkBinClass parent_class;

  void (*compute_child_allocation) (GtkFrame *frame, GtkAllocation *allocation);
};


GType gtk_frame_get_type (void) ;
GtkWidget* gtk_frame_new (const gchar *label);

void gtk_frame_set_label (GtkFrame *frame,
                                           const gchar *label);
const gchar *gtk_frame_get_label (GtkFrame *frame);

void gtk_frame_set_label_widget (GtkFrame *frame,
                                       GtkWidget *label_widget);
GtkWidget *gtk_frame_get_label_widget (GtkFrame *frame);
void gtk_frame_set_label_align (GtkFrame *frame,
                                       gfloat xalign,
                                       gfloat yalign);
void gtk_frame_get_label_align (GtkFrame *frame,
                                       gfloat *xalign,
                                       gfloat *yalign);
void gtk_frame_set_shadow_type (GtkFrame *frame,
                                       GtkShadowType type);
GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);
# 34 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkaspectframe.h"
typedef struct _GtkAspectFrame GtkAspectFrame;
typedef struct _GtkAspectFrameClass GtkAspectFrameClass;

struct _GtkAspectFrame
{
  GtkFrame frame;

  gfloat xalign;
  gfloat yalign;
  gfloat ratio;
  gboolean obey_child;

  GtkAllocation center_allocation;
};

struct _GtkAspectFrameClass
{
  GtkFrameClass parent_class;
};


GType gtk_aspect_frame_get_type (void) ;
GtkWidget* gtk_aspect_frame_new (const gchar *label,
                                        gfloat xalign,
                                        gfloat yalign,
                                        gfloat ratio,
                                        gboolean obey_child);
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame,
                                        gfloat xalign,
                                        gfloat yalign,
                                        gfloat ratio,
                                        gboolean obey_child);
# 39 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkarrow.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkarrow.h"
typedef struct _GtkArrow GtkArrow;
typedef struct _GtkArrowClass GtkArrowClass;

struct _GtkArrow
{
  GtkMisc misc;

  gint16 arrow_type;
  gint16 shadow_type;
};

struct _GtkArrowClass
{
  GtkMiscClass parent_class;
};


GType gtk_arrow_get_type (void) ;
GtkWidget* gtk_arrow_new (GtkArrowType arrow_type,
                                 GtkShadowType shadow_type);
void gtk_arrow_set (GtkArrow *arrow,
                                 GtkArrowType arrow_type,
                                 GtkShadowType shadow_type);
# 40 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkbindings.h" 1
# 47 "/usr/include/gtk-2.0/gtk/gtkbindings.h"
typedef struct _GtkBindingSet GtkBindingSet;
typedef struct _GtkBindingEntry GtkBindingEntry;
typedef struct _GtkBindingSignal GtkBindingSignal;
typedef struct _GtkBindingArg GtkBindingArg;

struct _GtkBindingSet
{
  gchar *set_name;
  gint priority;
  GSList *widget_path_pspecs;
  GSList *widget_class_pspecs;
  GSList *class_branch_pspecs;
  GtkBindingEntry *entries;
  GtkBindingEntry *current;
  guint parsed : 1;
};

struct _GtkBindingEntry
{


  guint keyval;
  GdkModifierType modifiers;

  GtkBindingSet *binding_set;
  guint destroyed : 1;
  guint in_emission : 1;
  GtkBindingEntry *set_next;
  GtkBindingEntry *hash_next;
  GtkBindingSignal *signals;
};

struct _GtkBindingSignal
{
  GtkBindingSignal *next;
  gchar *signal_name;
  guint n_args;
  GtkBindingArg *args;
};

struct _GtkBindingArg
{
  GType arg_type;
  union {
    glong long_data;
    gdouble double_data;
    gchar *string_data;
  } d;
};




GtkBindingSet* gtk_binding_set_new (const gchar *set_name);
GtkBindingSet* gtk_binding_set_by_class(gpointer object_class);
GtkBindingSet* gtk_binding_set_find (const gchar *set_name);
gboolean gtk_bindings_activate (GtkObject *object,
                                         guint keyval,
                                         GdkModifierType modifiers);
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers,
                                         GtkObject *object);

void gtk_binding_entry_clear (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers);
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers,
                                         const gchar *signal_name,
                                         guint n_args,
                                         ...);
void gtk_binding_set_add_path (GtkBindingSet *binding_set,
                                         GtkPathType path_type,
                                         const gchar *path_pattern,
                                         GtkPathPriorityType priority);




void gtk_binding_entry_remove (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers);
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set,
                                         guint keyval,
                                         GdkModifierType modifiers,
                                         const gchar *signal_name,
                                         GSList *binding_args);
guint gtk_binding_parse_binding (GScanner *scanner);


gboolean _gtk_bindings_activate_event (GtkObject *object,
                                       GdkEventKey *event);
void _gtk_binding_reset_parsed (void);




guint _gtk_binding_signal_new (const gchar *signal_name,
                               GType itype,
                               GSignalFlags signal_flags,
                               GCallback handler,
                               GSignalAccumulator accumulator,
                               gpointer accu_data,
                               GSignalCMarshaller c_marshaller,
                               GType return_type,
                               guint n_params,
                               ...);
# 42 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbox.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkbox.h"
typedef struct _GtkBox GtkBox;
typedef struct _GtkBoxClass GtkBoxClass;
typedef struct _GtkBoxChild GtkBoxChild;

struct _GtkBox
{
  GtkContainer container;


  GList *children;
  gint16 spacing;
  guint homogeneous : 1;
};

struct _GtkBoxClass
{
  GtkContainerClass parent_class;
};

struct _GtkBoxChild
{
  GtkWidget *widget;
  guint16 padding;
  guint expand : 1;
  guint fill : 1;
  guint pack : 1;
  guint is_secondary : 1;
};


GType gtk_box_get_type (void) ;
void gtk_box_pack_start (GtkBox *box,
                                        GtkWidget *child,
                                        gboolean expand,
                                        gboolean fill,
                                        guint padding);
void gtk_box_pack_end (GtkBox *box,
                                        GtkWidget *child,
                                        gboolean expand,
                                        gboolean fill,
                                        guint padding);
void gtk_box_pack_start_defaults (GtkBox *box,
                                        GtkWidget *widget);
void gtk_box_pack_end_defaults (GtkBox *box,
                                        GtkWidget *widget);
void gtk_box_set_homogeneous (GtkBox *box,
                                        gboolean homogeneous);
gboolean gtk_box_get_homogeneous (GtkBox *box);
void gtk_box_set_spacing (GtkBox *box,
                                        gint spacing);
gint gtk_box_get_spacing (GtkBox *box);
void gtk_box_reorder_child (GtkBox *box,
                                        GtkWidget *child,
                                        gint position);
void gtk_box_query_child_packing (GtkBox *box,
                                        GtkWidget *child,
                                        gboolean *expand,
                                        gboolean *fill,
                                        guint *padding,
                                        GtkPackType *pack_type);
void gtk_box_set_child_packing (GtkBox *box,
                                        GtkWidget *child,
                                        gboolean expand,
                                        gboolean fill,
                                        guint padding,
                                        GtkPackType pack_type);
# 43 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbbox.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkbbox.h"
typedef struct _GtkButtonBox GtkButtonBox;
typedef struct _GtkButtonBoxClass GtkButtonBoxClass;

struct _GtkButtonBox
{
  GtkBox box;
  gint child_min_width;
  gint child_min_height;
  gint child_ipad_x;
  gint child_ipad_y;
  GtkButtonBoxStyle layout_style;
};

struct _GtkButtonBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_button_box_get_type (void) ;

GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);
void gtk_button_box_set_layout (GtkButtonBox *widget,
                                                      GtkButtonBoxStyle layout_style);
void gtk_button_box_set_child_secondary (GtkButtonBox *widget,
                                                      GtkWidget *child,
                                                      gboolean is_secondary);





void gtk_button_box_set_child_size (GtkButtonBox *widget,
                                        gint min_width,
                                        gint min_height);
void gtk_button_box_set_child_ipadding (GtkButtonBox *widget,
                                        gint ipad_x,
                                        gint ipad_y);
void gtk_button_box_get_child_size (GtkButtonBox *widget,
                                        gint *min_width,
                                        gint *min_height);
void gtk_button_box_get_child_ipadding (GtkButtonBox *widget,
                                        gint *ipad_x,
                                        gint *ipad_y);



void _gtk_button_box_child_requisition (GtkWidget *widget,
                                        int *nvis_children,
                                        int *nvis_secondaries,
                                        int *width,
                                        int *height);
# 44 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkbutton.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkbutton.h"
typedef struct _GtkButton GtkButton;
typedef struct _GtkButtonClass GtkButtonClass;

struct _GtkButton
{
  GtkBin bin;

  GdkWindow *event_window;

  gchar *label_text;

  guint activate_timeout;

  guint constructed : 1;
  guint in_button : 1;
  guint button_down : 1;
  guint relief : 2;
  guint use_underline : 1;
  guint use_stock : 1;
  guint depressed : 1;
  guint depress_on_activate : 1;
};

struct _GtkButtonClass
{
  GtkBinClass parent_class;

  void (* pressed) (GtkButton *button);
  void (* released) (GtkButton *button);
  void (* clicked) (GtkButton *button);
  void (* enter) (GtkButton *button);
  void (* leave) (GtkButton *button);
  void (* activate) (GtkButton *button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_button_get_type (void) ;
GtkWidget* gtk_button_new (void);
GtkWidget* gtk_button_new_with_label (const gchar *label);
GtkWidget* gtk_button_new_from_stock (const gchar *stock_id);
GtkWidget* gtk_button_new_with_mnemonic (const gchar *label);
void gtk_button_pressed (GtkButton *button);
void gtk_button_released (GtkButton *button);
void gtk_button_clicked (GtkButton *button);
void gtk_button_enter (GtkButton *button);
void gtk_button_leave (GtkButton *button);
void gtk_button_set_relief (GtkButton *button,
                                             GtkReliefStyle newstyle);
GtkReliefStyle gtk_button_get_relief (GtkButton *button);

void gtk_button_set_label (GtkButton *button,
                                                    const gchar *label);
const gchar *gtk_button_get_label (GtkButton *button);
void gtk_button_set_use_underline (GtkButton *button,
                                                    gboolean use_underline);
gboolean gtk_button_get_use_underline (GtkButton *button);
void gtk_button_set_use_stock (GtkButton *button,
                                                    gboolean use_stock);
gboolean gtk_button_get_use_stock (GtkButton *button);

void _gtk_button_set_depressed (GtkButton *button,
                                gboolean depressed);
void _gtk_button_paint (GtkButton *button,
                                GdkRectangle *area,
                                GtkStateType state_type,
                                GtkShadowType shadow_type,
                                const gchar *main_detail,
                                const gchar *default_detail);
# 45 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcalendar.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtksignal.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtksignal.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmarshal.h" 1










extern void gtk_marshal_BOOLEAN__VOID (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT (GClosure *closure,
                                                          GValue *return_value,
                                                          guint n_param_values,
                                                          const GValue *param_values,
                                                          gpointer invocation_hint,
                                                          gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_INT_INT (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);



extern void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER (GClosure *closure,
                                                                GValue *return_value,
                                                                guint n_param_values,
                                                                const GValue *param_values,
                                                                gpointer invocation_hint,
                                                                gpointer marshal_data);



extern void gtk_marshal_ENUM__ENUM (GClosure *closure,
                                    GValue *return_value,
                                    guint n_param_values,
                                    const GValue *param_values,
                                    gpointer invocation_hint,
                                    gpointer marshal_data);


extern void gtk_marshal_INT__POINTER (GClosure *closure,
                                      GValue *return_value,
                                      guint n_param_values,
                                      const GValue *param_values,
                                      gpointer invocation_hint,
                                      gpointer marshal_data);


extern void gtk_marshal_INT__POINTER_CHAR_CHAR (GClosure *closure,
                                                GValue *return_value,
                                                guint n_param_values,
                                                const GValue *param_values,
                                                gpointer invocation_hint,
                                                gpointer marshal_data);
# 101 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__ENUM_FLOAT (GClosure *closure,
                                          GValue *return_value,
                                          guint n_param_values,
                                          const GValue *param_values,
                                          gpointer invocation_hint,
                                          gpointer marshal_data);



extern void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);







extern void gtk_marshal_VOID__INT_INT (GClosure *closure,
                                       GValue *return_value,
                                       guint n_param_values,
                                       const GValue *param_values,
                                       gpointer invocation_hint,
                                       gpointer marshal_data);



extern void gtk_marshal_VOID__INT_INT_POINTER (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);
# 153 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__POINTER_INT (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER (GClosure *closure,
                                               GValue *return_value,
                                               guint n_param_values,
                                               const GValue *param_values,
                                               gpointer invocation_hint,
                                               gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER_POINTER (GClosure *closure,
                                                       GValue *return_value,
                                                       guint n_param_values,
                                                       const GValue *param_values,
                                                       gpointer invocation_hint,
                                                       gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_STRING_STRING (GClosure *closure,
                                                     GValue *return_value,
                                                     guint n_param_values,
                                                     const GValue *param_values,
                                                     gpointer invocation_hint,
                                                     gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT (GClosure *closure,
                                            GValue *return_value,
                                            guint n_param_values,
                                            const GValue *param_values,
                                            gpointer invocation_hint,
                                            gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT_ENUM (GClosure *closure,
                                                 GValue *return_value,
                                                 guint n_param_values,
                                                 const GValue *param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT (GClosure *closure,
                                                         GValue *return_value,
                                                         guint n_param_values,
                                                         const GValue *param_values,
                                                         gpointer invocation_hint,
                                                         gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT (GClosure *closure,
                                                                 GValue *return_value,
                                                                 guint n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer invocation_hint,
                                                                 gpointer marshal_data);



extern void gtk_marshal_VOID__POINTER_UINT_UINT (GClosure *closure,
                                                 GValue *return_value,
                                                 guint n_param_values,
                                                 const GValue *param_values,
                                                 gpointer invocation_hint,
                                                 gpointer marshal_data);
# 240 "/usr/include/gtk-2.0/gtk/gtkmarshal.h"
extern void gtk_marshal_VOID__STRING_INT_POINTER (GClosure *closure,
                                                  GValue *return_value,
                                                  guint n_param_values,
                                                  const GValue *param_values,
                                                  gpointer invocation_hint,
                                                  gpointer marshal_data);







extern void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER (GClosure *closure,
                                                                   GValue *return_value,
                                                                   guint n_param_values,
                                                                   const GValue *param_values,
                                                                   gpointer invocation_hint,
                                                                   gpointer marshal_data);



extern void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM (GClosure *closure,
                                                           GValue *return_value,
                                                           guint n_param_values,
                                                           const GValue *param_values,
                                                           gpointer invocation_hint,
                                                           gpointer marshal_data);



extern void gtk_marshal_VOID__UINT_STRING (GClosure *closure,
                                           GValue *return_value,
                                           guint n_param_values,
                                           const GValue *param_values,
                                           gpointer invocation_hint,
                                           gpointer marshal_data);



# 34 "/usr/include/gtk-2.0/gtk/gtksignal.h" 2


# 94 "/usr/include/gtk-2.0/gtk/gtksignal.h"
guint gtk_signal_newv (const gchar *name,
                                                 GtkSignalRunType signal_flags,
                                                 GtkType object_type,
                                                 guint function_offset,
                                                 GtkSignalMarshaller marshaller,
                                                 GtkType return_val,
                                                 guint n_args,
                                                 GtkType *args);
guint gtk_signal_new (const gchar *name,
                                                 GtkSignalRunType signal_flags,
                                                 GtkType object_type,
                                                 guint function_offset,
                                                 GtkSignalMarshaller marshaller,
                                                 GtkType return_val,
                                                 guint n_args,
                                                 ...);
void gtk_signal_emit_stop_by_name (GtkObject *object,
                                                 const gchar *name);
void gtk_signal_connect_object_while_alive (GtkObject *object,
                                                 const gchar *name,
                                                 GtkSignalFunc func,
                                                 GtkObject *alive_object);
void gtk_signal_connect_while_alive (GtkObject *object,
                                                 const gchar *name,
                                                 GtkSignalFunc func,
                                                 gpointer func_data,
                                                 GtkObject *alive_object);
gulong gtk_signal_connect_full (GtkObject *object,
                                                 const gchar *name,
                                                 GtkSignalFunc func,
                                                 GtkCallbackMarshal unsupported,
                                                 gpointer data,
                                                 GtkDestroyNotify destroy_func,
                                                 gint object_signal,
                                                 gint after);
void gtk_signal_emitv (GtkObject *object,
                                                 guint signal_id,
                                                 GtkArg *args);
void gtk_signal_emit (GtkObject *object,
                                                 guint signal_id,
                                                 ...);
void gtk_signal_emit_by_name (GtkObject *object,
                                                 const gchar *name,
                                                 ...);
void gtk_signal_emitv_by_name (GtkObject *object,
                                                 const gchar *name,
                                                 GtkArg *args);
void gtk_signal_compat_matched (GtkObject *object,
                                                 GtkSignalFunc func,
                                                 gpointer data,
                                                 GSignalMatchType match,
                                                 guint action);




# 37 "/usr/include/gtk-2.0/gtk/gtkcalendar.h" 2
# 52 "/usr/include/gtk-2.0/gtk/gtkcalendar.h"
typedef struct _GtkCalendar GtkCalendar;
typedef struct _GtkCalendarClass GtkCalendarClass;

typedef enum
{
  GTK_CALENDAR_SHOW_HEADING = 1 << 0,
  GTK_CALENDAR_SHOW_DAY_NAMES = 1 << 1,
  GTK_CALENDAR_NO_MONTH_CHANGE = 1 << 2,
  GTK_CALENDAR_SHOW_WEEK_NUMBERS = 1 << 3,
  GTK_CALENDAR_WEEK_START_MONDAY = 1 << 4
} GtkCalendarDisplayOptions;

struct _GtkCalendar
{
  GtkWidget widget;

  GtkStyle *header_style;
  GtkStyle *label_style;

  gint month;
  gint year;
  gint selected_day;

  gint day_month[6][7];
  gint day[6][7];

  gint num_marked_dates;
  gint marked_date[31];
  GtkCalendarDisplayOptions display_flags;
  GdkColor marked_date_color[31];

  GdkGC *gc;
  GdkGC *xor_gc;

  gint focus_row;
  gint focus_col;

  gint highlight_row;
  gint highlight_col;

  gpointer private_data;
  gchar grow_space [32];


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkCalendarClass
{
  GtkWidgetClass parent_class;


  void (* month_changed) (GtkCalendar *calendar);
  void (* day_selected) (GtkCalendar *calendar);
  void (* day_selected_double_click) (GtkCalendar *calendar);
  void (* prev_month) (GtkCalendar *calendar);
  void (* next_month) (GtkCalendar *calendar);
  void (* prev_year) (GtkCalendar *calendar);
  void (* next_year) (GtkCalendar *calendar);

};


GType gtk_calendar_get_type (void) ;
GtkWidget* gtk_calendar_new (void);

gboolean gtk_calendar_select_month (GtkCalendar *calendar,
                                         guint month,
                                         guint year);
void gtk_calendar_select_day (GtkCalendar *calendar,
                                         guint day);

gboolean gtk_calendar_mark_day (GtkCalendar *calendar,
                                         guint day);
gboolean gtk_calendar_unmark_day (GtkCalendar *calendar,
                                         guint day);
void gtk_calendar_clear_marks (GtkCalendar *calendar);


void gtk_calendar_display_options (GtkCalendar *calendar,
                                         GtkCalendarDisplayOptions flags);

void gtk_calendar_get_date (GtkCalendar *calendar,
                                         guint *year,
                                         guint *month,
                                         guint *day);
void gtk_calendar_freeze (GtkCalendar *calendar);
void gtk_calendar_thaw (GtkCalendar *calendar);
# 46 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 1
# 25 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h" 1
# 25 "/usr/include/gtk-2.0/gtk/gtkcelleditable.h"








typedef struct _GtkCellEditable GtkCellEditable;
typedef struct _GtkCellEditableIface GtkCellEditableIface;

struct _GtkCellEditableIface
{
  GTypeInterface g_iface;


  void (* editing_done) (GtkCellEditable *cell_editable);
  void (* remove_widget) (GtkCellEditable *cell_editable);


  void (* start_editing) (GtkCellEditable *cell_editable,
                          GdkEvent *event);
};


GType gtk_cell_editable_get_type (void) ;

void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable,
                                       GdkEvent *event);
void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);
void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);



# 26 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h" 2



typedef enum
{
  GTK_CELL_RENDERER_SELECTED = 1 << 0,
  GTK_CELL_RENDERER_PRELIT = 1 << 1,
  GTK_CELL_RENDERER_INSENSITIVE = 1 << 2,

  GTK_CELL_RENDERER_SORTED = 1 << 3,
  GTK_CELL_RENDERER_FOCUSED = 1 << 4
} GtkCellRendererState;

typedef enum
{
  GTK_CELL_RENDERER_MODE_INERT,
  GTK_CELL_RENDERER_MODE_ACTIVATABLE,
  GTK_CELL_RENDERER_MODE_EDITABLE
} GtkCellRendererMode;
# 53 "/usr/include/gtk-2.0/gtk/gtkcellrenderer.h"
typedef struct _GtkCellRenderer GtkCellRenderer;
typedef struct _GtkCellRendererClass GtkCellRendererClass;

struct _GtkCellRenderer
{
  GtkObject parent;

  gfloat xalign;
  gfloat yalign;

  gint width;
  gint height;

  guint16 xpad;
  guint16 ypad;

  guint mode : 2;
  guint visible : 1;
  guint is_expander : 1;
  guint is_expanded : 1;
  guint cell_background_set : 1;
};

struct _GtkCellRendererClass
{
  GtkObjectClass parent_class;


  void (* get_size) (GtkCellRenderer *cell,
                                      GtkWidget *widget,
                                      GdkRectangle *cell_area,
                                      gint *x_offset,
                                      gint *y_offset,
                                      gint *width,
                                      gint *height);
  void (* render) (GtkCellRenderer *cell,
                                      GdkWindow *window,
                                      GtkWidget *widget,
                                      GdkRectangle *background_area,
                                      GdkRectangle *cell_area,
                                      GdkRectangle *expose_area,
                                      GtkCellRendererState flags);
  gboolean (* activate) (GtkCellRenderer *cell,
                                      GdkEvent *event,
                                      GtkWidget *widget,
                                      const gchar *path,
                                      GdkRectangle *background_area,
                                      GdkRectangle *cell_area,
                                      GtkCellRendererState flags);
  GtkCellEditable *(* start_editing) (GtkCellRenderer *cell,
                                      GdkEvent *event,
                                      GtkWidget *widget,
                                      const gchar *path,
                                      GdkRectangle *background_area,
                                      GdkRectangle *cell_area,
                                      GtkCellRendererState flags);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_get_type (void) ;

void gtk_cell_renderer_get_size (GtkCellRenderer *cell,
                                                   GtkWidget *widget,
                                                   GdkRectangle *cell_area,
                                                   gint *x_offset,
                                                   gint *y_offset,
                                                   gint *width,
                                                   gint *height);
void gtk_cell_renderer_render (GtkCellRenderer *cell,
                                                   GdkWindow *window,
                                                   GtkWidget *widget,
                                                   GdkRectangle *background_area,
                                                   GdkRectangle *cell_area,
                                                   GdkRectangle *expose_area,
                                                   GtkCellRendererState flags);
gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell,
                                                   GdkEvent *event,
                                                   GtkWidget *widget,
                                                   const gchar *path,
                                                   GdkRectangle *background_area,
                                                   GdkRectangle *cell_area,
                                                   GtkCellRendererState flags);
GtkCellEditable *gtk_cell_renderer_start_editing (GtkCellRenderer *cell,
                                                   GdkEvent *event,
                                                   GtkWidget *widget,
                                                   const gchar *path,
                                                   GdkRectangle *background_area,
                                                   GdkRectangle *cell_area,
                                                   GtkCellRendererState flags);
void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell,
                                                   gint width,
                                                   gint height);
void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell,
                                                   gint *width,
                                                   gint *height);




# 47 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkcellrenderertext.h"
typedef struct _GtkCellRendererText GtkCellRendererText;
typedef struct _GtkCellRendererTextClass GtkCellRendererTextClass;

struct _GtkCellRendererText
{
  GtkCellRenderer parent;


  gchar *text;
  PangoFontDescription *font;
  gdouble font_scale;
  PangoColor foreground;
  PangoColor background;

  PangoAttrList *extra_attrs;

  PangoUnderline underline_style;

  gint rise;
  gint fixed_height_rows;

  guint strikethrough : 1;

  guint editable : 1;

  guint scale_set : 1;

  guint foreground_set : 1;
  guint background_set : 1;

  guint underline_set : 1;

  guint rise_set : 1;

  guint strikethrough_set : 1;

  guint editable_set : 1;
  guint calc_fixed_height : 1;
};

struct _GtkCellRendererTextClass
{
  GtkCellRendererClass parent_class;

  void (* edited) (GtkCellRendererText *cell_renderer_text,
                   const gchar *path,
                   const gchar *new_text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_text_get_type (void);
GtkCellRenderer *gtk_cell_renderer_text_new (void);

void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer,
                                                                    gint number_of_rows);
# 48 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkcellrenderertoggle.h"
typedef struct _GtkCellRendererToggle GtkCellRendererToggle;
typedef struct _GtkCellRendererToggleClass GtkCellRendererToggleClass;

struct _GtkCellRendererToggle
{
  GtkCellRenderer parent;


  guint active : 1;
  guint activatable : 1;
  guint radio : 1;
};

struct _GtkCellRendererToggleClass
{
  GtkCellRendererClass parent_class;

  void (* toggled) (GtkCellRendererToggle *cell_renderer_toggle,
                    const gchar *path);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_toggle_get_type (void);
GtkCellRenderer *gtk_cell_renderer_toggle_new (void);

gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);
void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle,
                                                     gboolean radio);

gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);
void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle,
                                                     gboolean setting);
# 49 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkcellrendererpixbuf.h"
typedef struct _GtkCellRendererPixbuf GtkCellRendererPixbuf;
typedef struct _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;

struct _GtkCellRendererPixbuf
{
  GtkCellRenderer parent;


  GdkPixbuf *pixbuf;
  GdkPixbuf *pixbuf_expander_open;
  GdkPixbuf *pixbuf_expander_closed;
};

struct _GtkCellRendererPixbufClass
{
  GtkCellRendererClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_cell_renderer_pixbuf_get_type (void);
GtkCellRenderer *gtk_cell_renderer_pixbuf_new (void);
# 50 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtktogglebutton.h"
typedef struct _GtkToggleButton GtkToggleButton;
typedef struct _GtkToggleButtonClass GtkToggleButtonClass;

struct _GtkToggleButton
{
  GtkButton button;

  guint active : 1;
  guint draw_indicator : 1;
  guint inconsistent : 1;
};

struct _GtkToggleButtonClass
{
  GtkButtonClass parent_class;

  void (* toggled) (GtkToggleButton *toggle_button);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_toggle_button_get_type (void) ;

GtkWidget* gtk_toggle_button_new (void);
GtkWidget* gtk_toggle_button_new_with_label (const gchar *label);
GtkWidget* gtk_toggle_button_new_with_mnemonic (const gchar *label);
void gtk_toggle_button_set_mode (GtkToggleButton *toggle_button,
                                                gboolean draw_indicator);
gboolean gtk_toggle_button_get_mode (GtkToggleButton *toggle_button);
void gtk_toggle_button_set_active (GtkToggleButton *toggle_button,
                                                gboolean is_active);
gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);
void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);
void gtk_toggle_button_set_inconsistent (GtkToggleButton *toggle_button,
                                                gboolean setting);
gboolean gtk_toggle_button_get_inconsistent (GtkToggleButton *toggle_button);
# 33 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkcheckbutton.h"
typedef struct _GtkCheckButton GtkCheckButton;
typedef struct _GtkCheckButtonClass GtkCheckButtonClass;

struct _GtkCheckButton
{
  GtkToggleButton toggle_button;
};

struct _GtkCheckButtonClass
{
  GtkToggleButtonClass parent_class;

  void (* draw_indicator) (GtkCheckButton *check_button,
                           GdkRectangle *area);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_check_button_get_type (void) ;
GtkWidget* gtk_check_button_new (void);
GtkWidget* gtk_check_button_new_with_label (const gchar *label);
GtkWidget* gtk_check_button_new_with_mnemonic (const gchar *label);

void _gtk_check_button_get_props (GtkCheckButton *check_button,
                                  gint *indicator_size,
                                  gint *indicator_spacing);
# 51 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkitem.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkitem.h"
typedef struct _GtkItem GtkItem;
typedef struct _GtkItemClass GtkItemClass;

struct _GtkItem
{
  GtkBin bin;
};

struct _GtkItemClass
{
  GtkBinClass parent_class;

  void (* select) (GtkItem *item);
  void (* deselect) (GtkItem *item);
  void (* toggle) (GtkItem *item);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_item_get_type (void) ;
void gtk_item_select (GtkItem *item);
void gtk_item_deselect (GtkItem *item);
void gtk_item_toggle (GtkItem *item);
# 33 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkmenuitem.h"
typedef struct _GtkMenuItem GtkMenuItem;
typedef struct _GtkMenuItemClass GtkMenuItemClass;

struct _GtkMenuItem
{
  GtkItem item;

  GtkWidget *submenu;
  GdkWindow *event_window;

  guint16 toggle_size;
  guint16 accelerator_width;
  gchar *accel_path;

  guint show_submenu_indicator : 1;
  guint submenu_placement : 1;
  guint submenu_direction : 1;
  guint right_justify: 1;
  guint timer_from_keypress : 1;
  guint timer;
};

struct _GtkMenuItemClass
{
  GtkItemClass parent_class;







  guint hide_on_activate : 1;

  void (* activate) (GtkMenuItem *menu_item);
  void (* activate_item) (GtkMenuItem *menu_item);
  void (* toggle_size_request) (GtkMenuItem *menu_item,
                                 gint *requisition);
  void (* toggle_size_allocate) (GtkMenuItem *menu_item,
                                 gint allocation);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_menu_item_get_type (void) ;
GtkWidget* gtk_menu_item_new (void);
GtkWidget* gtk_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_menu_item_new_with_mnemonic (const gchar *label);
void gtk_menu_item_set_submenu (GtkMenuItem *menu_item,
                                               GtkWidget *submenu);
GtkWidget* gtk_menu_item_get_submenu (GtkMenuItem *menu_item);
void gtk_menu_item_remove_submenu (GtkMenuItem *menu_item);
void gtk_menu_item_select (GtkMenuItem *menu_item);
void gtk_menu_item_deselect (GtkMenuItem *menu_item);
void gtk_menu_item_activate (GtkMenuItem *menu_item);
void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item,
                                               gint *requisition);
void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item,
                                               gint allocation);
void gtk_menu_item_set_right_justified (GtkMenuItem *menu_item,
                                               gboolean right_justified);
gboolean gtk_menu_item_get_right_justified (GtkMenuItem *menu_item);
void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item,
                                               const gchar *accel_path);


void _gtk_menu_item_refresh_accel_path (GtkMenuItem *menu_item,
                                               const gchar *prefix,
                                               GtkAccelGroup *accel_group,
                                               gboolean group_changed);
gboolean _gtk_menu_item_is_selectable (GtkWidget *menu_item);
# 33 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkcheckmenuitem.h"
typedef struct _GtkCheckMenuItem GtkCheckMenuItem;
typedef struct _GtkCheckMenuItemClass GtkCheckMenuItemClass;

struct _GtkCheckMenuItem
{
  GtkMenuItem menu_item;

  guint active : 1;
  guint always_show_toggle : 1;
  guint inconsistent : 1;
};

struct _GtkCheckMenuItemClass
{
  GtkMenuItemClass parent_class;

  void (* toggled) (GtkCheckMenuItem *check_menu_item);
  void (* draw_indicator) (GtkCheckMenuItem *check_menu_item,
                           GdkRectangle *area);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_check_menu_item_get_type (void) ;
GtkWidget* gtk_check_menu_item_new (void);
GtkWidget* gtk_check_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_check_menu_item_new_with_mnemonic (const gchar *label);
void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item,
                                                  gboolean is_active);
gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);
void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);
void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item,
                                                  gboolean setting);
gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);



void gtk_check_menu_item_set_show_toggle (GtkCheckMenuItem *menu_item,
                                                gboolean always);
# 52 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkclipboard.h" 1
# 29 "/usr/include/gtk-2.0/gtk/gtkclipboard.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkselection.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkselection.h"
typedef struct _GtkTargetList GtkTargetList;
typedef struct _GtkTargetEntry GtkTargetEntry;
# 55 "/usr/include/gtk-2.0/gtk/gtkselection.h"
struct _GtkSelectionData
{
  GdkAtom selection;
  GdkAtom target;
  GdkAtom type;
  gint format;
  guchar *data;
  gint length;
  GdkDisplay *display;
};

struct _GtkTargetEntry {
  gchar *target;
  guint flags;
  guint info;
};





typedef struct _GtkTargetPair GtkTargetPair;


struct _GtkTargetList {
  GList *list;
  guint ref_count;
};

struct _GtkTargetPair {
  GdkAtom target;
  guint flags;
  guint info;
};

GtkTargetList *gtk_target_list_new (const GtkTargetEntry *targets,
                                          guint ntargets);
void gtk_target_list_ref (GtkTargetList *list);
void gtk_target_list_unref (GtkTargetList *list);
void gtk_target_list_add (GtkTargetList *list,
                                          GdkAtom target,
                                          guint flags,
                                          guint info);
void gtk_target_list_add_table (GtkTargetList *list,
                                          const GtkTargetEntry *targets,
                                          guint ntargets);
void gtk_target_list_remove (GtkTargetList *list,
                                          GdkAtom target);
gboolean gtk_target_list_find (GtkTargetList *list,
                                          GdkAtom target,
                                          guint *info);



gboolean gtk_selection_owner_set (GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display,
                                              GtkWidget *widget,
                                              GdkAtom selection,
                                              guint32 time_);

void gtk_selection_add_target (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint info);
void gtk_selection_add_targets (GtkWidget *widget,
                                      GdkAtom selection,
                                      const GtkTargetEntry *targets,
                                      guint ntargets);
void gtk_selection_clear_targets (GtkWidget *widget,
                                      GdkAtom selection);
gboolean gtk_selection_convert (GtkWidget *widget,
                                      GdkAtom selection,
                                      GdkAtom target,
                                      guint32 time_);
void gtk_selection_data_set (GtkSelectionData *selection_data,
                                      GdkAtom type,
                                      gint format,
                                      const guchar *data,
                                      gint length);
gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data,
                                      const gchar *str,
                                      gint len);
guchar * gtk_selection_data_get_text (GtkSelectionData *selection_data);

gboolean gtk_selection_data_get_targets (GtkSelectionData *selection_data,
                                                  GdkAtom **targets,
                                                  gint *n_atoms);
gboolean gtk_selection_data_targets_include_text (GtkSelectionData *selection_data);



void gtk_selection_remove_all (GtkWidget *widget);



gboolean gtk_selection_clear (GtkWidget *widget,
                                           GdkEventSelection *event);
gboolean _gtk_selection_request (GtkWidget *widget,
                                           GdkEventSelection *event);
gboolean _gtk_selection_incr_event (GdkWindow *window,
                                           GdkEventProperty *event);
gboolean _gtk_selection_notify (GtkWidget *widget,
                                           GdkEventSelection *event);
gboolean _gtk_selection_property_notify (GtkWidget *widget,
                                           GdkEventProperty *event);

GType gtk_selection_data_get_type (void);
GtkSelectionData *gtk_selection_data_copy (GtkSelectionData *data);
void gtk_selection_data_free (GtkSelectionData *data);
# 30 "/usr/include/gtk-2.0/gtk/gtkclipboard.h" 2





typedef void (* GtkClipboardReceivedFunc) (GtkClipboard *clipboard,
                                                  GtkSelectionData *selection_data,
                                                  gpointer data);
typedef void (* GtkClipboardTextReceivedFunc) (GtkClipboard *clipboard,
                                                  const gchar *text,
                                                  gpointer data);





typedef void (* GtkClipboardGetFunc) (GtkClipboard *clipboard,
                                               GtkSelectionData *selection_data,
                                               guint info,
                                               gpointer user_data_or_owner);
typedef void (* GtkClipboardClearFunc) (GtkClipboard *clipboard,
                                               gpointer user_data_or_owner);

GType gtk_clipboard_get_type (void);

GtkClipboard *gtk_clipboard_get_for_display (GdkDisplay *display,
                                             GdkAtom selection);

GtkClipboard *gtk_clipboard_get (GdkAtom selection);


GdkDisplay *gtk_clipboard_get_display (GtkClipboard *clipboard);


gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard,
                                       const GtkTargetEntry *targets,
                                       guint n_targets,
                                       GtkClipboardGetFunc get_func,
                                       GtkClipboardClearFunc clear_func,
                                       gpointer user_data);
gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard,
                                       const GtkTargetEntry *targets,
                                       guint n_targets,
                                       GtkClipboardGetFunc get_func,
                                       GtkClipboardClearFunc clear_func,
                                       GObject *owner);
GObject *gtk_clipboard_get_owner (GtkClipboard *clipboard);
void gtk_clipboard_clear (GtkClipboard *clipboard);
void gtk_clipboard_set_text (GtkClipboard *clipboard,
                                       const gchar *text,
                                       gint len);

void gtk_clipboard_request_contents (GtkClipboard *clipboard,
                                     GdkAtom target,
                                     GtkClipboardReceivedFunc callback,
                                     gpointer user_data);
void gtk_clipboard_request_text (GtkClipboard *clipboard,
                                     GtkClipboardTextReceivedFunc callback,
                                     gpointer user_data);

GtkSelectionData *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard,
                                                   GdkAtom target);
gchar * gtk_clipboard_wait_for_text (GtkClipboard *clipboard);

gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);
# 53 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkclist.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkclist.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkrange.h" 1
# 49 "/usr/include/gtk-2.0/gtk/gtkrange.h"
typedef struct _GtkRangeLayout GtkRangeLayout;
typedef struct _GtkRangeStepTimer GtkRangeStepTimer;

typedef struct _GtkRange GtkRange;
typedef struct _GtkRangeClass GtkRangeClass;

struct _GtkRange
{
  GtkWidget widget;

  GtkAdjustment *adjustment;
  GtkUpdateType update_policy;
  guint inverted : 1;



  guint flippable : 1;





  guint has_stepper_a : 1;
  guint has_stepper_b : 1;
  guint has_stepper_c : 1;
  guint has_stepper_d : 1;

  guint need_recalc : 1;

  guint slider_size_fixed : 1;

  gint min_slider_size;

  GtkOrientation orientation;


  GdkRectangle range_rect;

  gint slider_start, slider_end;


  gint round_digits;


  guint trough_click_forward : 1;
  guint update_pending : 1;
  GtkRangeLayout *layout;
  GtkRangeStepTimer *timer;
  gint slide_initial_slider_position;
  gint slide_initial_coordinate;
  guint update_timeout_id;
  GdkWindow *event_window;
};

struct _GtkRangeClass
{
  GtkWidgetClass parent_class;


  gchar *slider_detail;
  gchar *stepper_detail;

  void (* value_changed) (GtkRange *range);
  void (* adjust_bounds) (GtkRange *range,
                             gdouble new_value);


  void (* move_slider) (GtkRange *range,
                             GtkScrollType scroll);


  void (* get_range_border) (GtkRange *range,
                             GtkBorder *border_);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_range_get_type (void) ;

void gtk_range_set_update_policy (GtkRange *range,
                                            GtkUpdateType policy);
GtkUpdateType gtk_range_get_update_policy (GtkRange *range);
void gtk_range_set_adjustment (GtkRange *range,
                                            GtkAdjustment *adjustment);
GtkAdjustment* gtk_range_get_adjustment (GtkRange *range);
void gtk_range_set_inverted (GtkRange *range,
                                            gboolean setting);
gboolean gtk_range_get_inverted (GtkRange *range);
void gtk_range_set_increments (GtkRange *range,
                                            gdouble step,
                                            gdouble page);
void gtk_range_set_range (GtkRange *range,
                                            gdouble min,
                                            gdouble max);
void gtk_range_set_value (GtkRange *range,
                                            gdouble value);
gdouble gtk_range_get_value (GtkRange *range);
# 33 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkscrollbar.h"
typedef struct _GtkScrollbar GtkScrollbar;
typedef struct _GtkScrollbarClass GtkScrollbarClass;

struct _GtkScrollbar
{
  GtkRange range;
};

struct _GtkScrollbarClass
{
  GtkRangeClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_scrollbar_get_type (void) ;
# 33 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkhscrollbar.h"
typedef struct _GtkHScrollbar GtkHScrollbar;
typedef struct _GtkHScrollbarClass GtkHScrollbarClass;

struct _GtkHScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkHScrollbarClass
{
  GtkScrollbarClass parent_class;
};


GType gtk_hscrollbar_get_type (void) ;
GtkWidget* gtk_hscrollbar_new (GtkAdjustment *adjustment);
# 39 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h" 1
# 43 "/usr/include/gtk-2.0/gtk/gtkvscrollbar.h"
typedef struct _GtkVScrollbar GtkVScrollbar;
typedef struct _GtkVScrollbarClass GtkVScrollbarClass;

struct _GtkVScrollbar
{
  GtkScrollbar scrollbar;
};

struct _GtkVScrollbarClass
{
  GtkScrollbarClass parent_class;
};







GType gtk_vscrollbar_get_type (void) ;
GtkWidget* gtk_vscrollbar_new (GtkAdjustment *adjustment);
# 40 "/usr/include/gtk-2.0/gtk/gtkclist.h" 2







enum {
  GTK_CLIST_IN_DRAG = 1 << 0,
  GTK_CLIST_ROW_HEIGHT_SET = 1 << 1,
  GTK_CLIST_SHOW_TITLES = 1 << 2,

  GTK_CLIST_ADD_MODE = 1 << 4,
  GTK_CLIST_AUTO_SORT = 1 << 5,
  GTK_CLIST_AUTO_RESIZE_BLOCKED = 1 << 6,
  GTK_CLIST_REORDERABLE = 1 << 7,
  GTK_CLIST_USE_DRAG_ICONS = 1 << 8,
  GTK_CLIST_DRAW_DRAG_LINE = 1 << 9,
  GTK_CLIST_DRAW_DRAG_RECT = 1 << 10
};


typedef enum
{
  GTK_CELL_EMPTY,
  GTK_CELL_TEXT,
  GTK_CELL_PIXMAP,
  GTK_CELL_PIXTEXT,
  GTK_CELL_WIDGET
} GtkCellType;

typedef enum
{
  GTK_CLIST_DRAG_NONE,
  GTK_CLIST_DRAG_BEFORE,
  GTK_CLIST_DRAG_INTO,
  GTK_CLIST_DRAG_AFTER
} GtkCListDragPos;

typedef enum
{
  GTK_BUTTON_IGNORED = 0,
  GTK_BUTTON_SELECTS = 1 << 0,
  GTK_BUTTON_DRAGS = 1 << 1,
  GTK_BUTTON_EXPANDS = 1 << 2
} GtkButtonAction;
# 118 "/usr/include/gtk-2.0/gtk/gtkclist.h"
typedef struct _GtkCList GtkCList;
typedef struct _GtkCListClass GtkCListClass;
typedef struct _GtkCListColumn GtkCListColumn;
typedef struct _GtkCListRow GtkCListRow;

typedef struct _GtkCell GtkCell;
typedef struct _GtkCellText GtkCellText;
typedef struct _GtkCellPixmap GtkCellPixmap;
typedef struct _GtkCellPixText GtkCellPixText;
typedef struct _GtkCellWidget GtkCellWidget;

typedef gint (*GtkCListCompareFunc) (GtkCList *clist,
                                     gconstpointer ptr1,
                                     gconstpointer ptr2);

typedef struct _GtkCListCellInfo GtkCListCellInfo;
typedef struct _GtkCListDestInfo GtkCListDestInfo;

struct _GtkCListCellInfo
{
  gint row;
  gint column;
};

struct _GtkCListDestInfo
{
  GtkCListCellInfo cell;
  GtkCListDragPos insert_pos;
};

struct _GtkCList
{
  GtkContainer container;

  guint16 flags;


  GMemChunk *row_mem_chunk;
  GMemChunk *cell_mem_chunk;

  guint freeze_count;



  GdkRectangle internal_allocation;


  gint rows;
  gint row_height;
  GList *row_list;
  GList *row_list_end;


  gint columns;
  GdkRectangle column_title_area;
  GdkWindow *title_window;


  GtkCListColumn *column;



  GdkWindow *clist_window;
  gint clist_window_width;
  gint clist_window_height;


  gint hoffset;
  gint voffset;


  GtkShadowType shadow_type;


  GtkSelectionMode selection_mode;


  GList *selection;
  GList *selection_end;

  GList *undo_selection;
  GList *undo_unselection;
  gint undo_anchor;


  guint8 button_actions[5];

  guint8 drag_button;


  GtkCListCellInfo click_cell;


  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;


  GdkGC *xor_gc;


  GdkGC *fg_gc;
  GdkGC *bg_gc;


  GdkCursor *cursor_drag;


  gint x_drag;


  gint focus_row;

  gint focus_header_column;


  gint anchor;
  GtkStateType anchor_state;
  gint drag_pos;
  gint htimer;
  gint vtimer;

  GtkSortType sort_type;
  GtkCListCompareFunc compare;
  gint sort_column;

  gint drag_highlight_row;
  GtkCListDragPos drag_highlight_pos;
};

struct _GtkCListClass
{
  GtkContainerClass parent_class;

  void (*set_scroll_adjustments) (GtkCList *clist,
                                   GtkAdjustment *hadjustment,
                                   GtkAdjustment *vadjustment);
  void (*refresh) (GtkCList *clist);
  void (*select_row) (GtkCList *clist,
                                 gint row,
                                 gint column,
                                 GdkEvent *event);
  void (*unselect_row) (GtkCList *clist,
                                 gint row,
                                 gint column,
                                 GdkEvent *event);
  void (*row_move) (GtkCList *clist,
                                 gint source_row,
                                 gint dest_row);
  void (*click_column) (GtkCList *clist,
                                 gint column);
  void (*resize_column) (GtkCList *clist,
                                 gint column,
                                 gint width);
  void (*toggle_focus_row) (GtkCList *clist);
  void (*select_all) (GtkCList *clist);
  void (*unselect_all) (GtkCList *clist);
  void (*undo_selection) (GtkCList *clist);
  void (*start_selection) (GtkCList *clist);
  void (*end_selection) (GtkCList *clist);
  void (*extend_selection) (GtkCList *clist,
                                 GtkScrollType scroll_type,
                                 gfloat position,
                                 gboolean auto_start_selection);
  void (*scroll_horizontal) (GtkCList *clist,
                                 GtkScrollType scroll_type,
                                 gfloat position);
  void (*scroll_vertical) (GtkCList *clist,
                                 GtkScrollType scroll_type,
                                 gfloat position);
  void (*toggle_add_mode) (GtkCList *clist);
  void (*abort_column_resize) (GtkCList *clist);
  void (*resync_selection) (GtkCList *clist,
                                 GdkEvent *event);
  GList* (*selection_find) (GtkCList *clist,
                                 gint row_number,
                                 GList *row_list_element);
  void (*draw_row) (GtkCList *clist,
                                 GdkRectangle *area,
                                 gint row,
                                 GtkCListRow *clist_row);
  void (*draw_drag_highlight) (GtkCList *clist,
                                 GtkCListRow *target_row,
                                 gint target_row_number,
                                 GtkCListDragPos drag_pos);
  void (*clear) (GtkCList *clist);
  void (*fake_unselect_all) (GtkCList *clist,
                                 gint row);
  void (*sort_list) (GtkCList *clist);
  gint (*insert_row) (GtkCList *clist,
                                 gint row,
                                 gchar *text[]);
  void (*remove_row) (GtkCList *clist,
                                 gint row);
  void (*set_cell_contents) (GtkCList *clist,
                                 GtkCListRow *clist_row,
                                 gint column,
                                 GtkCellType type,
                                 const gchar *text,
                                 guint8 spacing,
                                 GdkPixmap *pixmap,
                                 GdkBitmap *mask);
  void (*cell_size_request) (GtkCList *clist,
                                 GtkCListRow *clist_row,
                                 gint column,
                                 GtkRequisition *requisition);

};

struct _GtkCListColumn
{
  gchar *title;
  GdkRectangle area;

  GtkWidget *button;
  GdkWindow *window;

  gint width;
  gint min_width;
  gint max_width;
  GtkJustification justification;

  guint visible : 1;
  guint width_set : 1;
  guint resizeable : 1;
  guint auto_resize : 1;
  guint button_passive : 1;
};

struct _GtkCListRow
{
  GtkCell *cell;
  GtkStateType state;

  GdkColor foreground;
  GdkColor background;

  GtkStyle *style;

  gpointer data;
  GtkDestroyNotify destroy;

  guint fg_set : 1;
  guint bg_set : 1;
  guint selectable : 1;
};


struct _GtkCellText
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  gchar *text;
};

struct _GtkCellPixmap
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  GdkPixmap *pixmap;
  GdkBitmap *mask;
};

struct _GtkCellPixText
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  gchar *text;
  guint8 spacing;
  GdkPixmap *pixmap;
  GdkBitmap *mask;
};

struct _GtkCellWidget
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  GtkWidget *widget;
};

struct _GtkCell
{
  GtkCellType type;

  gint16 vertical;
  gint16 horizontal;

  GtkStyle *style;

  union {
    gchar *text;

    struct {
      GdkPixmap *pixmap;
      GdkBitmap *mask;
    } pm;

    struct {
      gchar *text;
      guint8 spacing;
      GdkPixmap *pixmap;
      GdkBitmap *mask;
    } pt;

    GtkWidget *widget;
  } u;
};

GtkType gtk_clist_get_type (void) ;


GtkWidget* gtk_clist_new (gint columns);
GtkWidget* gtk_clist_new_with_titles (gint columns,
                                      gchar *titles[]);


void gtk_clist_set_hadjustment (GtkCList *clist,
                                GtkAdjustment *adjustment);
void gtk_clist_set_vadjustment (GtkCList *clist,
                                GtkAdjustment *adjustment);


GtkAdjustment* gtk_clist_get_hadjustment (GtkCList *clist);
GtkAdjustment* gtk_clist_get_vadjustment (GtkCList *clist);


void gtk_clist_set_shadow_type (GtkCList *clist,
                                GtkShadowType type);


void gtk_clist_set_selection_mode (GtkCList *clist,
                                   GtkSelectionMode mode);


void gtk_clist_set_reorderable (GtkCList *clist,
                                gboolean reorderable);
void gtk_clist_set_use_drag_icons (GtkCList *clist,
                                   gboolean use_icons);
void gtk_clist_set_button_actions (GtkCList *clist,
                                   guint button,
                                   guint8 button_actions);





void gtk_clist_freeze (GtkCList *clist);
void gtk_clist_thaw (GtkCList *clist);


void gtk_clist_column_titles_show (GtkCList *clist);
void gtk_clist_column_titles_hide (GtkCList *clist);





void gtk_clist_column_title_active (GtkCList *clist,
                                      gint column);
void gtk_clist_column_title_passive (GtkCList *clist,
                                      gint column);
void gtk_clist_column_titles_active (GtkCList *clist);
void gtk_clist_column_titles_passive (GtkCList *clist);


void gtk_clist_set_column_title (GtkCList *clist,
                                 gint column,
                                 const gchar *title);


gchar * gtk_clist_get_column_title (GtkCList *clist,
                                    gint column);


void gtk_clist_set_column_widget (GtkCList *clist,
                                  gint column,
                                  GtkWidget *widget);


GtkWidget * gtk_clist_get_column_widget (GtkCList *clist,
                                         gint column);


void gtk_clist_set_column_justification (GtkCList *clist,
                                         gint column,
                                         GtkJustification justification);


void gtk_clist_set_column_visibility (GtkCList *clist,
                                      gint column,
                                      gboolean visible);


void gtk_clist_set_column_resizeable (GtkCList *clist,
                                      gint column,
                                      gboolean resizeable);


void gtk_clist_set_column_auto_resize (GtkCList *clist,
                                       gint column,
                                       gboolean auto_resize);

gint gtk_clist_columns_autosize (GtkCList *clist);


gint gtk_clist_optimal_column_width (GtkCList *clist,
                                     gint column);





void gtk_clist_set_column_width (GtkCList *clist,
                                 gint column,
                                 gint width);


void gtk_clist_set_column_min_width (GtkCList *clist,
                                     gint column,
                                     gint min_width);
void gtk_clist_set_column_max_width (GtkCList *clist,
                                     gint column,
                                     gint max_width);




void gtk_clist_set_row_height (GtkCList *clist,
                               guint height);






void gtk_clist_moveto (GtkCList *clist,
                       gint row,
                       gint column,
                       gfloat row_align,
                       gfloat col_align);


GtkVisibility gtk_clist_row_is_visible (GtkCList *clist,
                                        gint row);


GtkCellType gtk_clist_get_cell_type (GtkCList *clist,
                                     gint row,
                                     gint column);


void gtk_clist_set_text (GtkCList *clist,
                         gint row,
                         gint column,
                         const gchar *text);




gint gtk_clist_get_text (GtkCList *clist,
                         gint row,
                         gint column,
                         gchar **text);


void gtk_clist_set_pixmap (GtkCList *clist,
                           gint row,
                           gint column,
                           GdkPixmap *pixmap,
                           GdkBitmap *mask);

gint gtk_clist_get_pixmap (GtkCList *clist,
                           gint row,
                           gint column,
                           GdkPixmap **pixmap,
                           GdkBitmap **mask);


void gtk_clist_set_pixtext (GtkCList *clist,
                            gint row,
                            gint column,
                            const gchar *text,
                            guint8 spacing,
                            GdkPixmap *pixmap,
                            GdkBitmap *mask);

gint gtk_clist_get_pixtext (GtkCList *clist,
                            gint row,
                            gint column,
                            gchar **text,
                            guint8 *spacing,
                            GdkPixmap **pixmap,
                            GdkBitmap **mask);




void gtk_clist_set_foreground (GtkCList *clist,
                               gint row,
                               GdkColor *color);




void gtk_clist_set_background (GtkCList *clist,
                               gint row,
                               GdkColor *color);


void gtk_clist_set_cell_style (GtkCList *clist,
                               gint row,
                               gint column,
                               GtkStyle *style);

GtkStyle *gtk_clist_get_cell_style (GtkCList *clist,
                                    gint row,
                                    gint column);

void gtk_clist_set_row_style (GtkCList *clist,
                              gint row,
                              GtkStyle *style);

GtkStyle *gtk_clist_get_row_style (GtkCList *clist,
                                   gint row);





void gtk_clist_set_shift (GtkCList *clist,
                          gint row,
                          gint column,
                          gint vertical,
                          gint horizontal);


void gtk_clist_set_selectable (GtkCList *clist,
                               gint row,
                               gboolean selectable);
gboolean gtk_clist_get_selectable (GtkCList *clist,
                                   gint row);




gint gtk_clist_prepend (GtkCList *clist,
                        gchar *text[]);
gint gtk_clist_append (GtkCList *clist,
                        gchar *text[]);




gint gtk_clist_insert (GtkCList *clist,
                       gint row,
                       gchar *text[]);


void gtk_clist_remove (GtkCList *clist,
                       gint row);


void gtk_clist_set_row_data (GtkCList *clist,
                             gint row,
                             gpointer data);


void gtk_clist_set_row_data_full (GtkCList *clist,
                                  gint row,
                                  gpointer data,
                                  GtkDestroyNotify destroy);


gpointer gtk_clist_get_row_data (GtkCList *clist,
                                 gint row);




gint gtk_clist_find_row_from_data (GtkCList *clist,
                                   gpointer data);


void gtk_clist_select_row (GtkCList *clist,
                           gint row,
                           gint column);


void gtk_clist_unselect_row (GtkCList *clist,
                             gint row,
                             gint column);


void gtk_clist_undo_selection (GtkCList *clist);




void gtk_clist_clear (GtkCList *clist);





gint gtk_clist_get_selection_info (GtkCList *clist,
                                   gint x,
                                   gint y,
                                   gint *row,
                                   gint *column);


void gtk_clist_select_all (GtkCList *clist);


void gtk_clist_unselect_all (GtkCList *clist);


void gtk_clist_swap_rows (GtkCList *clist,
                          gint row1,
                          gint row2);


void gtk_clist_row_move (GtkCList *clist,
                         gint source_row,
                         gint dest_row);


void gtk_clist_set_compare_func (GtkCList *clist,
                                 GtkCListCompareFunc cmp_func);


void gtk_clist_set_sort_column (GtkCList *clist,
                                gint column);


void gtk_clist_set_sort_type (GtkCList *clist,
                              GtkSortType sort_type);


void gtk_clist_sort (GtkCList *clist);


void gtk_clist_set_auto_sort (GtkCList *clist,
                              gboolean auto_sort);



PangoLayout *_gtk_clist_create_cell_layout (GtkCList *clist,
                                            GtkCListRow *clist_row,
                                            gint column);
# 54 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdialog.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
typedef enum
{
  GTK_DIALOG_MODAL = 1 << 0,
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1,
  GTK_DIALOG_NO_SEPARATOR = 1 << 2
} GtkDialogFlags;
# 55 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
typedef enum
{



  GTK_RESPONSE_NONE = -1,





  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,


  GTK_RESPONSE_DELETE_EVENT = -4,




  GTK_RESPONSE_OK = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE = -7,
  GTK_RESPONSE_YES = -8,
  GTK_RESPONSE_NO = -9,
  GTK_RESPONSE_APPLY = -10,
  GTK_RESPONSE_HELP = -11
} GtkResponseType;
# 93 "/usr/include/gtk-2.0/gtk/gtkdialog.h"
typedef struct _GtkDialog GtkDialog;
typedef struct _GtkDialogClass GtkDialogClass;

struct _GtkDialog
{
  GtkWindow window;


  GtkWidget *vbox;
  GtkWidget *action_area;


  GtkWidget *separator;
};

struct _GtkDialogClass
{
  GtkWindowClass parent_class;

  void (* response) (GtkDialog *dialog, gint response_id);



  void (* close) (GtkDialog *dialog);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_dialog_get_type (void) ;
GtkWidget* gtk_dialog_new (void);

GtkWidget* gtk_dialog_new_with_buttons (const gchar *title,
                                        GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        const gchar *first_button_text,
                                        ...);

void gtk_dialog_add_action_widget (GtkDialog *dialog,
                                         GtkWidget *child,
                                         gint response_id);
GtkWidget* gtk_dialog_add_button (GtkDialog *dialog,
                                         const gchar *button_text,
                                         gint response_id);
void gtk_dialog_add_buttons (GtkDialog *dialog,
                                         const gchar *first_button_text,
                                         ...);

void gtk_dialog_set_response_sensitive (GtkDialog *dialog,
                                        gint response_id,
                                        gboolean setting);
void gtk_dialog_set_default_response (GtkDialog *dialog,
                                        gint response_id);

void gtk_dialog_set_has_separator (GtkDialog *dialog,
                                       gboolean setting);
gboolean gtk_dialog_get_has_separator (GtkDialog *dialog);


void gtk_dialog_response (GtkDialog *dialog,
                                    gint response_id);


gint gtk_dialog_run (GtkDialog *dialog);
# 31 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvbox.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkvbox.h"
typedef struct _GtkVBox GtkVBox;
typedef struct _GtkVBoxClass GtkVBoxClass;

struct _GtkVBox
{
  GtkBox box;
};

struct _GtkVBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_vbox_get_type (void) ;
GtkWidget* gtk_vbox_new (gboolean homogeneous,
                              gint spacing);
# 32 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h" 2
# 46 "/usr/include/gtk-2.0/gtk/gtkcolorsel.h"
typedef struct _GtkColorSelection GtkColorSelection;
typedef struct _GtkColorSelectionClass GtkColorSelectionClass;


typedef void (* GtkColorSelectionChangePaletteFunc) (const GdkColor *colors,
                                                     gint n_colors);
typedef void (* GtkColorSelectionChangePaletteWithScreenFunc) (GdkScreen *screen,
                                                               const GdkColor *colors,
                                                               gint n_colors);

struct _GtkColorSelection
{
  GtkVBox parent_instance;


  gpointer private_data;
};

struct _GtkColorSelectionClass
{
  GtkVBoxClass parent_class;

  void (*color_changed) (GtkColorSelection *color_selection);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};




GType gtk_color_selection_get_type (void) ;
GtkWidget *gtk_color_selection_new (void);
gboolean gtk_color_selection_get_has_opacity_control (GtkColorSelection *colorsel);
void gtk_color_selection_set_has_opacity_control (GtkColorSelection *colorsel,
                                                        gboolean has_opacity);
gboolean gtk_color_selection_get_has_palette (GtkColorSelection *colorsel);
void gtk_color_selection_set_has_palette (GtkColorSelection *colorsel,
                                                        gboolean has_palette);


void gtk_color_selection_set_current_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
void gtk_color_selection_set_current_alpha (GtkColorSelection *colorsel,
                                                  guint16 alpha);
void gtk_color_selection_get_current_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
guint16 gtk_color_selection_get_current_alpha (GtkColorSelection *colorsel);
void gtk_color_selection_set_previous_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
void gtk_color_selection_set_previous_alpha (GtkColorSelection *colorsel,
                                                  guint16 alpha);
void gtk_color_selection_get_previous_color (GtkColorSelection *colorsel,
                                                  GdkColor *color);
guint16 gtk_color_selection_get_previous_alpha (GtkColorSelection *colorsel);

gboolean gtk_color_selection_is_adjusting (GtkColorSelection *colorsel);

gboolean gtk_color_selection_palette_from_string (const gchar *str,
                                                  GdkColor **colors,
                                                  gint *n_colors);
gchar* gtk_color_selection_palette_to_string (const GdkColor *colors,
                                                  gint n_colors);


GtkColorSelectionChangePaletteFunc gtk_color_selection_set_change_palette_hook (GtkColorSelectionChangePaletteFunc func);


GtkColorSelectionChangePaletteWithScreenFunc gtk_color_selection_set_change_palette_with_screen_hook (GtkColorSelectionChangePaletteWithScreenFunc func);



void gtk_color_selection_set_color (GtkColorSelection *colorsel,
                                            gdouble *color);
void gtk_color_selection_get_color (GtkColorSelection *colorsel,
                                            gdouble *color);
void gtk_color_selection_set_update_policy (GtkColorSelection *colorsel,
                                            GtkUpdateType policy);
# 55 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkcolorseldialog.h"
typedef struct _GtkColorSelectionDialog GtkColorSelectionDialog;
typedef struct _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;


struct _GtkColorSelectionDialog
{
  GtkDialog parent_instance;

  GtkWidget *colorsel;
  GtkWidget *ok_button;
  GtkWidget *cancel_button;
  GtkWidget *help_button;
};

struct _GtkColorSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GType gtk_color_selection_dialog_get_type (void) ;
GtkWidget* gtk_color_selection_dialog_new (const gchar *title);
# 56 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcombo.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkcombo.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkhbox.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkhbox.h"
typedef struct _GtkHBox GtkHBox;
typedef struct _GtkHBoxClass GtkHBoxClass;

struct _GtkHBox
{
  GtkBox box;
};

struct _GtkHBoxClass
{
  GtkBoxClass parent_class;
};


GType gtk_hbox_get_type (void) ;
GtkWidget* gtk_hbox_new (gboolean homogeneous,
                              gint spacing);
# 31 "/usr/include/gtk-2.0/gtk/gtkcombo.h" 2
# 45 "/usr/include/gtk-2.0/gtk/gtkcombo.h"
typedef struct _GtkCombo GtkCombo;
typedef struct _GtkComboClass GtkComboClass;


struct _GtkCombo {
        GtkHBox hbox;


        GtkWidget *entry;


        GtkWidget *button;
        GtkWidget *popup;
        GtkWidget *popwin;


        GtkWidget *list;


        guint entry_change_id;
        guint list_change_id;

        guint value_in_list:1;
        guint ok_if_empty:1;
        guint case_sensitive:1;
        guint use_arrows:1;
        guint use_arrows_always:1;

        guint16 current_button;
        guint activate_id;
};

struct _GtkComboClass {
        GtkHBoxClass parent_class;


        void (*_gtk_reserved1) (void);
        void (*_gtk_reserved2) (void);
        void (*_gtk_reserved3) (void);
        void (*_gtk_reserved4) (void);
};

GType gtk_combo_get_type (void) ;

GtkWidget* gtk_combo_new (void);

void gtk_combo_set_value_in_list (GtkCombo* combo,
                                            gboolean val,
                                            gboolean ok_if_empty);

void gtk_combo_set_use_arrows (GtkCombo* combo,
                                            gboolean val);

void gtk_combo_set_use_arrows_always (GtkCombo* combo,
                                            gboolean val);

void gtk_combo_set_case_sensitive (GtkCombo* combo,
                                            gboolean val);


void gtk_combo_set_item_string (GtkCombo* combo,
                                            GtkItem* item,
                                            const gchar* item_value);

void gtk_combo_set_popdown_strings (GtkCombo* combo,
                                            GList *strings);

void gtk_combo_disable_activate (GtkCombo* combo);
# 57 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkctree.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkctree.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkclist.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkctree.h" 2
# 57 "/usr/include/gtk-2.0/gtk/gtkctree.h"
typedef enum
{
  GTK_CTREE_POS_BEFORE,
  GTK_CTREE_POS_AS_CHILD,
  GTK_CTREE_POS_AFTER
} GtkCTreePos;

typedef enum
{
  GTK_CTREE_LINES_NONE,
  GTK_CTREE_LINES_SOLID,
  GTK_CTREE_LINES_DOTTED,
  GTK_CTREE_LINES_TABBED
} GtkCTreeLineStyle;

typedef enum
{
  GTK_CTREE_EXPANDER_NONE,
  GTK_CTREE_EXPANDER_SQUARE,
  GTK_CTREE_EXPANDER_TRIANGLE,
  GTK_CTREE_EXPANDER_CIRCULAR
} GtkCTreeExpanderStyle;

typedef enum
{
  GTK_CTREE_EXPANSION_EXPAND,
  GTK_CTREE_EXPANSION_EXPAND_RECURSIVE,
  GTK_CTREE_EXPANSION_COLLAPSE,
  GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE,
  GTK_CTREE_EXPANSION_TOGGLE,
  GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE
} GtkCTreeExpansionType;

typedef struct _GtkCTree GtkCTree;
typedef struct _GtkCTreeClass GtkCTreeClass;
typedef struct _GtkCTreeRow GtkCTreeRow;
typedef struct _GtkCTreeNode GtkCTreeNode;

typedef void (*GtkCTreeFunc) (GtkCTree *ctree,
                              GtkCTreeNode *node,
                              gpointer data);

typedef gboolean (*GtkCTreeGNodeFunc) (GtkCTree *ctree,
                                       guint depth,
                                       GNode *gnode,
                                       GtkCTreeNode *cnode,
                                       gpointer data);

typedef gboolean (*GtkCTreeCompareDragFunc) (GtkCTree *ctree,
                                             GtkCTreeNode *source_node,
                                             GtkCTreeNode *new_parent,
                                             GtkCTreeNode *new_sibling);

struct _GtkCTree
{
  GtkCList clist;

  GdkGC *lines_gc;

  gint tree_indent;
  gint tree_spacing;
  gint tree_column;

  guint line_style : 2;
  guint expander_style : 2;
  guint show_stub : 1;

  GtkCTreeCompareDragFunc drag_compare;
};

struct _GtkCTreeClass
{
  GtkCListClass parent_class;

  void (*tree_select_row) (GtkCTree *ctree,
                             GtkCTreeNode *row,
                             gint column);
  void (*tree_unselect_row) (GtkCTree *ctree,
                             GtkCTreeNode *row,
                             gint column);
  void (*tree_expand) (GtkCTree *ctree,
                             GtkCTreeNode *node);
  void (*tree_collapse) (GtkCTree *ctree,
                             GtkCTreeNode *node);
  void (*tree_move) (GtkCTree *ctree,
                             GtkCTreeNode *node,
                             GtkCTreeNode *new_parent,
                             GtkCTreeNode *new_sibling);
  void (*change_focus_row_expansion) (GtkCTree *ctree,
                                      GtkCTreeExpansionType action);
};

struct _GtkCTreeRow
{
  GtkCListRow row;

  GtkCTreeNode *parent;
  GtkCTreeNode *sibling;
  GtkCTreeNode *children;

  GdkPixmap *pixmap_closed;
  GdkBitmap *mask_closed;
  GdkPixmap *pixmap_opened;
  GdkBitmap *mask_opened;

  guint16 level;

  guint is_leaf : 1;
  guint expanded : 1;
};

struct _GtkCTreeNode {
  GList list;
};






GtkType gtk_ctree_get_type (void) ;
GtkWidget * gtk_ctree_new_with_titles (gint columns,
                                                  gint tree_column,
                                                  gchar *titles[]);
GtkWidget * gtk_ctree_new (gint columns,
                                                  gint tree_column);
GtkCTreeNode * gtk_ctree_insert_node (GtkCTree *ctree,
                                                  GtkCTreeNode *parent,
                                                  GtkCTreeNode *sibling,
                                                  gchar *text[],
                                                  guint8 spacing,
                                                  GdkPixmap *pixmap_closed,
                                                  GdkBitmap *mask_closed,
                                                  GdkPixmap *pixmap_opened,
                                                  GdkBitmap *mask_opened,
                                                  gboolean is_leaf,
                                                  gboolean expanded);
void gtk_ctree_remove_node (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_insert_gnode (GtkCTree *ctree,
                                                  GtkCTreeNode *parent,
                                                  GtkCTreeNode *sibling,
                                                  GNode *gnode,
                                                  GtkCTreeGNodeFunc func,
                                                  gpointer data);
GNode * gtk_ctree_export_to_gnode (GtkCTree *ctree,
                                                  GNode *parent,
                                                  GNode *sibling,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeGNodeFunc func,
                                                  gpointer data);






void gtk_ctree_post_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeFunc func,
                                                  gpointer data);
void gtk_ctree_post_recursive_to_depth (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint depth,
                                                  GtkCTreeFunc func,
                                                  gpointer data);
void gtk_ctree_pre_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeFunc func,
                                                  gpointer data);
void gtk_ctree_pre_recursive_to_depth (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint depth,
                                                  GtkCTreeFunc func,
                                                  gpointer data);
gboolean gtk_ctree_is_viewable (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_last (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
GtkCTreeNode * gtk_ctree_find_node_ptr (GtkCTree *ctree,
                                                  GtkCTreeRow *ctree_row);
GtkCTreeNode * gtk_ctree_node_nth (GtkCTree *ctree,
                                                  guint row);
gboolean gtk_ctree_find (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeNode *child);
gboolean gtk_ctree_is_ancestor (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeNode *child);
GtkCTreeNode * gtk_ctree_find_by_row_data (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data);

GList * gtk_ctree_find_all_by_row_data (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data);
GtkCTreeNode * gtk_ctree_find_by_row_data_custom (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data,
                                                  GCompareFunc func);

GList * gtk_ctree_find_all_by_row_data_custom (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data,
                                                  GCompareFunc func);
gboolean gtk_ctree_is_hot_spot (GtkCTree *ctree,
                                                  gint x,
                                                  gint y);





void gtk_ctree_move (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkCTreeNode *new_parent,
                                                  GtkCTreeNode *new_sibling);
void gtk_ctree_expand (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_expand_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_expand_to_depth (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint depth);
void gtk_ctree_collapse (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_collapse_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_collapse_to_depth (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint depth);
void gtk_ctree_toggle_expansion (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_toggle_expansion_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_select (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_select_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_unselect (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_unselect_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_real_select_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint state);





void gtk_ctree_node_set_text (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  const gchar *text);
void gtk_ctree_node_set_pixmap (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  GdkPixmap *pixmap,
                                                  GdkBitmap *mask);
void gtk_ctree_node_set_pixtext (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  const gchar *text,
                                                  guint8 spacing,
                                                  GdkPixmap *pixmap,
                                                  GdkBitmap *mask);
void gtk_ctree_set_node_info (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  const gchar *text,
                                                  guint8 spacing,
                                                  GdkPixmap *pixmap_closed,
                                                  GdkBitmap *mask_closed,
                                                  GdkPixmap *pixmap_opened,
                                                  GdkBitmap *mask_opened,
                                                  gboolean is_leaf,
                                                  gboolean expanded);
void gtk_ctree_node_set_shift (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  gint vertical,
                                                  gint horizontal);
void gtk_ctree_node_set_selectable (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gboolean selectable);
gboolean gtk_ctree_node_get_selectable (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
GtkCellType gtk_ctree_node_get_cell_type (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column);
gboolean gtk_ctree_node_get_text (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  gchar **text);
gboolean gtk_ctree_node_get_pixmap (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  GdkPixmap **pixmap,
                                                  GdkBitmap **mask);
gboolean gtk_ctree_node_get_pixtext (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  gchar **text,
                                                  guint8 *spacing,
                                                  GdkPixmap **pixmap,
                                                  GdkBitmap **mask);
gboolean gtk_ctree_get_node_info (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gchar **text,
                                                  guint8 *spacing,
                                                  GdkPixmap **pixmap_closed,
                                                  GdkBitmap **mask_closed,
                                                  GdkPixmap **pixmap_opened,
                                                  GdkBitmap **mask_opened,
                                                  gboolean *is_leaf,
                                                  gboolean *expanded);
void gtk_ctree_node_set_row_style (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GtkStyle *style);
GtkStyle * gtk_ctree_node_get_row_style (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_node_set_cell_style (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  GtkStyle *style);
GtkStyle * gtk_ctree_node_get_cell_style (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column);
void gtk_ctree_node_set_foreground (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GdkColor *color);
void gtk_ctree_node_set_background (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  GdkColor *color);
void gtk_ctree_node_set_row_data (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data);
void gtk_ctree_node_set_row_data_full (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gpointer data,
                                                  GtkDestroyNotify destroy);
gpointer gtk_ctree_node_get_row_data (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_node_moveto (GtkCTree *ctree,
                                                  GtkCTreeNode *node,
                                                  gint column,
                                                  gfloat row_align,
                                                  gfloat col_align);
GtkVisibility gtk_ctree_node_is_visible (GtkCTree *ctree,
                                                  GtkCTreeNode *node);





void gtk_ctree_set_indent (GtkCTree *ctree,
                                      gint indent);
void gtk_ctree_set_spacing (GtkCTree *ctree,
                                      gint spacing);
void gtk_ctree_set_show_stub (GtkCTree *ctree,
                                      gboolean show_stub);
void gtk_ctree_set_line_style (GtkCTree *ctree,
                                      GtkCTreeLineStyle line_style);
void gtk_ctree_set_expander_style (GtkCTree *ctree,
                                      GtkCTreeExpanderStyle expander_style);
void gtk_ctree_set_drag_compare_func (GtkCTree *ctree,
                                      GtkCTreeCompareDragFunc cmp_func);





void gtk_ctree_sort_node (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
void gtk_ctree_sort_recursive (GtkCTree *ctree,
                                                  GtkCTreeNode *node);
# 441 "/usr/include/gtk-2.0/gtk/gtkctree.h"
GType gtk_ctree_node_get_type (void) ;
# 59 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkcurve.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtkcurve.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkdrawingarea.h"
typedef struct _GtkDrawingArea GtkDrawingArea;
typedef struct _GtkDrawingAreaClass GtkDrawingAreaClass;

struct _GtkDrawingArea
{
  GtkWidget widget;

  gpointer draw_data;
};

struct _GtkDrawingAreaClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_drawing_area_get_type (void) ;
GtkWidget* gtk_drawing_area_new (void);


void gtk_drawing_area_size (GtkDrawingArea *darea,
                                        gint width,
                                        gint height);
# 43 "/usr/include/gtk-2.0/gtk/gtkcurve.h" 2
# 57 "/usr/include/gtk-2.0/gtk/gtkcurve.h"
typedef struct _GtkCurve GtkCurve;
typedef struct _GtkCurveClass GtkCurveClass;


struct _GtkCurve
{
  GtkDrawingArea graph;

  gint cursor_type;
  gfloat min_x;
  gfloat max_x;
  gfloat min_y;
  gfloat max_y;
  GdkPixmap *pixmap;
  GtkCurveType curve_type;
  gint height;
  gint grab_point;
  gint last;


  gint num_points;
  GdkPoint *point;


  gint num_ctlpoints;
  gfloat (*ctlpoint)[2];
};

struct _GtkCurveClass
{
  GtkDrawingAreaClass parent_class;

  void (* curve_type_changed) (GtkCurve *curve);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_curve_get_type (void) ;
GtkWidget* gtk_curve_new (void);
void gtk_curve_reset (GtkCurve *curve);
void gtk_curve_set_gamma (GtkCurve *curve, gfloat gamma_);
void gtk_curve_set_range (GtkCurve *curve,
                                         gfloat min_x, gfloat max_x,
                                         gfloat min_y, gfloat max_y);
void gtk_curve_get_vector (GtkCurve *curve,
                                         int veclen, gfloat vector[]);
void gtk_curve_set_vector (GtkCurve *curve,
                                         int veclen, gfloat vector[]);
void gtk_curve_set_curve_type (GtkCurve *curve, GtkCurveType type);
# 60 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkdnd.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkdnd.h"
typedef enum {
  GTK_DEST_DEFAULT_MOTION = 1 << 0,
  GTK_DEST_DEFAULT_HIGHLIGHT = 1 << 1,
  GTK_DEST_DEFAULT_DROP = 1 << 2,
  GTK_DEST_DEFAULT_ALL = 0x07
} GtkDestDefaults;



typedef enum {
  GTK_TARGET_SAME_APP = 1 << 0,
  GTK_TARGET_SAME_WIDGET = 1 << 1
} GtkTargetFlags;



void gtk_drag_get_data (GtkWidget *widget,
                        GdkDragContext *context,
                        GdkAtom target,
                        guint32 time_);
void gtk_drag_finish (GdkDragContext *context,
                        gboolean success,
                        gboolean del,
                        guint32 time_);

GtkWidget *gtk_drag_get_source_widget (GdkDragContext *context);

void gtk_drag_highlight (GtkWidget *widget);
void gtk_drag_unhighlight (GtkWidget *widget);

void gtk_drag_dest_set (GtkWidget *widget,
                          GtkDestDefaults flags,
                          const GtkTargetEntry *targets,
                          gint n_targets,
                          GdkDragAction actions);

void gtk_drag_dest_set_proxy (GtkWidget *widget,
                              GdkWindow *proxy_window,
                              GdkDragProtocol protocol,
                              gboolean use_coordinates);

void gtk_drag_dest_unset (GtkWidget *widget);

GdkAtom gtk_drag_dest_find_target (GtkWidget *widget,
                                              GdkDragContext *context,
                                              GtkTargetList *target_list);
GtkTargetList* gtk_drag_dest_get_target_list (GtkWidget *widget);
void gtk_drag_dest_set_target_list (GtkWidget *widget,
                                              GtkTargetList *target_list);



void gtk_drag_source_set (GtkWidget *widget,
                           GdkModifierType start_button_mask,
                           const GtkTargetEntry *targets,
                           gint n_targets,
                           GdkDragAction actions);

void gtk_drag_source_unset (GtkWidget *widget);

void gtk_drag_source_set_icon (GtkWidget *widget,
                                      GdkColormap *colormap,
                                      GdkPixmap *pixmap,
                                      GdkBitmap *mask);
void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget,
                                      GdkPixbuf *pixbuf);
void gtk_drag_source_set_icon_stock (GtkWidget *widget,
                                      const gchar *stock_id);





GdkDragContext *gtk_drag_begin (GtkWidget *widget,
                                GtkTargetList *targets,
                                GdkDragAction actions,
                                gint button,
                                GdkEvent *event);



void gtk_drag_set_icon_widget (GdkDragContext *context,
                               GtkWidget *widget,
                               gint hot_x,
                               gint hot_y);
void gtk_drag_set_icon_pixmap (GdkDragContext *context,
                               GdkColormap *colormap,
                               GdkPixmap *pixmap,
                               GdkBitmap *mask,
                               gint hot_x,
                               gint hot_y);
void gtk_drag_set_icon_pixbuf (GdkDragContext *context,
                               GdkPixbuf *pixbuf,
                               gint hot_x,
                               gint hot_y);
void gtk_drag_set_icon_stock (GdkDragContext *context,
                               const gchar *stock_id,
                               gint hot_x,
                               gint hot_y);

void gtk_drag_set_icon_default (GdkDragContext *context);

gboolean gtk_drag_check_threshold (GtkWidget *widget,
                                   gint start_x,
                                   gint start_y,
                                   gint current_x,
                                   gint current_y);


void _gtk_drag_source_handle_event (GtkWidget *widget,
                                    GdkEvent *event);
void _gtk_drag_dest_handle_event (GtkWidget *toplevel,
                                  GdkEvent *event);


void gtk_drag_set_default_icon (GdkColormap *colormap,
                                GdkPixmap *pixmap,
                                GdkBitmap *mask,
                                gint hot_x,
                                gint hot_y);
# 62 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkeditable.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkeditable.h"
typedef struct _GtkEditable GtkEditable;
typedef struct _GtkEditableClass GtkEditableClass;

struct _GtkEditableClass
{
  GTypeInterface base_iface;


  void (* insert_text) (GtkEditable *editable,
                                     const gchar *text,
                                     gint length,
                                     gint *position);
  void (* delete_text) (GtkEditable *editable,
                                     gint start_pos,
                                     gint end_pos);
  void (* changed) (GtkEditable *editable);


  void (* do_insert_text) (GtkEditable *editable,
                                     const gchar *text,
                                     gint length,
                                     gint *position);
  void (* do_delete_text) (GtkEditable *editable,
                                     gint start_pos,
                                     gint end_pos);

  gchar* (* get_chars) (GtkEditable *editable,
                                     gint start_pos,
                                     gint end_pos);
  void (* set_selection_bounds) (GtkEditable *editable,
                                     gint start_pos,
                                     gint end_pos);
  gboolean (* get_selection_bounds) (GtkEditable *editable,
                                     gint *start_pos,
                                     gint *end_pos);
  void (* set_position) (GtkEditable *editable,
                                     gint position);
  gint (* get_position) (GtkEditable *editable);
};

GType gtk_editable_get_type (void) ;
void gtk_editable_select_region (GtkEditable *editable,
                                            gint start,
                                            gint end);
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable,
                                            gint *start,
                                            gint *end);
void gtk_editable_insert_text (GtkEditable *editable,
                                            const gchar *new_text,
                                            gint new_text_length,
                                            gint *position);
void gtk_editable_delete_text (GtkEditable *editable,
                                            gint start_pos,
                                            gint end_pos);
gchar* gtk_editable_get_chars (GtkEditable *editable,
                                            gint start_pos,
                                            gint end_pos);
void gtk_editable_cut_clipboard (GtkEditable *editable);
void gtk_editable_copy_clipboard (GtkEditable *editable);
void gtk_editable_paste_clipboard (GtkEditable *editable);
void gtk_editable_delete_selection (GtkEditable *editable);
void gtk_editable_set_position (GtkEditable *editable,
                                            gint position);
gint gtk_editable_get_position (GtkEditable *editable);
void gtk_editable_set_editable (GtkEditable *editable,
                                            gboolean is_editable);
gboolean gtk_editable_get_editable (GtkEditable *editable);
# 64 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkentry.h" 1
# 33 "/usr/include/gtk-2.0/gtk/gtkentry.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkimcontext.h" 1
# 40 "/usr/include/gtk-2.0/gtk/gtkimcontext.h"
typedef struct _GtkIMContext GtkIMContext;
typedef struct _GtkIMContextClass GtkIMContextClass;

struct _GtkIMContext
{
  GObject parent_instance;
};

struct _GtkIMContextClass
{



  GtkObjectClass parent_class;


  void (*preedit_start) (GtkIMContext *context);
  void (*preedit_end) (GtkIMContext *context);
  void (*preedit_changed) (GtkIMContext *context);
  void (*commit) (GtkIMContext *context, const gchar *str);
  gboolean (*retrieve_surrounding) (GtkIMContext *context);
  gboolean (*delete_surrounding) (GtkIMContext *context,
                                    gint offset,
                                    gint n_chars);


  void (*set_client_window) (GtkIMContext *context,
                                   GdkWindow *window);
  void (*get_preedit_string) (GtkIMContext *context,
                                   gchar **str,
                                   PangoAttrList **attrs,
                                   gint *cursor_pos);
  gboolean (*filter_keypress) (GtkIMContext *context,
                                   GdkEventKey *event);
  void (*focus_in) (GtkIMContext *context);
  void (*focus_out) (GtkIMContext *context);
  void (*reset) (GtkIMContext *context);
  void (*set_cursor_location) (GtkIMContext *context,
                                   GdkRectangle *area);
  void (*set_use_preedit) (GtkIMContext *context,
                                   gboolean use_preedit);
  void (*set_surrounding) (GtkIMContext *context,
                                   const gchar *text,
                                   gint len,
                                   gint cursor_index);
  gboolean (*get_surrounding) (GtkIMContext *context,
                                   gchar **text,
                                   gint *cursor_index);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

GType gtk_im_context_get_type (void) ;

void gtk_im_context_set_client_window (GtkIMContext *context,
                                             GdkWindow *window);
void gtk_im_context_get_preedit_string (GtkIMContext *context,
                                             gchar **str,
                                             PangoAttrList **attrs,
                                             gint *cursor_pos);
gboolean gtk_im_context_filter_keypress (GtkIMContext *context,
                                             GdkEventKey *event);
void gtk_im_context_focus_in (GtkIMContext *context);
void gtk_im_context_focus_out (GtkIMContext *context);
void gtk_im_context_reset (GtkIMContext *context);
void gtk_im_context_set_cursor_location (GtkIMContext *context,
                                             GdkRectangle *area);
void gtk_im_context_set_use_preedit (GtkIMContext *context,
                                             gboolean use_preedit);
void gtk_im_context_set_surrounding (GtkIMContext *context,
                                             const gchar *text,
                                             gint len,
                                             gint cursor_index);
gboolean gtk_im_context_get_surrounding (GtkIMContext *context,
                                             gchar **text,
                                             gint *cursor_index);
gboolean gtk_im_context_delete_surrounding (GtkIMContext *context,
                                             gint offset,
                                             gint n_chars);
# 34 "/usr/include/gtk-2.0/gtk/gtkentry.h" 2
# 50 "/usr/include/gtk-2.0/gtk/gtkentry.h"
typedef struct _GtkEntry GtkEntry;
typedef struct _GtkEntryClass GtkEntryClass;

struct _GtkEntry
{
  GtkWidget widget;

  gchar *text;

  guint editable : 1;
  guint visible : 1;
  guint overwrite_mode : 1;
  guint in_drag : 1;

  guint16 text_length;
  guint16 text_max_length;


  GdkWindow *text_area;
  GtkIMContext *im_context;
  GtkWidget *popup_menu;

  gint current_pos;
  gint selection_bound;

  PangoLayout *cached_layout;
  guint cache_includes_preedit : 1;

  guint need_im_reset : 1;

  guint has_frame : 1;

  guint activates_default : 1;

  guint cursor_visible : 1;

  guint in_click : 1;

  guint is_cell_renderer : 1;
  guint editing_canceled : 1;

  guint mouse_cursor_obscured : 1;

  guint button;
  guint blink_timeout;
  guint recompute_idle;
  gint scroll_offset;
  gint ascent;
  gint descent;

  guint16 text_size;
  guint16 n_bytes;

  guint16 preedit_length;
  guint16 preedit_cursor;

  gint dnd_position;

  gint drag_start_x;
  gint drag_start_y;

  gunichar invisible_char;

  gint width_chars;
};

struct _GtkEntryClass
{
  GtkWidgetClass parent_class;


  void (* populate_popup) (GtkEntry *entry,
                             GtkMenu *menu);



  void (* activate) (GtkEntry *entry);
  void (* move_cursor) (GtkEntry *entry,
                               GtkMovementStep step,
                               gint count,
                               gboolean extend_selection);
  void (* insert_at_cursor) (GtkEntry *entry,
                               const gchar *str);
  void (* delete_from_cursor) (GtkEntry *entry,
                               GtkDeleteType type,
                               gint count);
  void (* cut_clipboard) (GtkEntry *entry);
  void (* copy_clipboard) (GtkEntry *entry);
  void (* paste_clipboard) (GtkEntry *entry);
  void (* toggle_overwrite) (GtkEntry *entry);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_entry_get_type (void) ;
GtkWidget* gtk_entry_new (void);
void gtk_entry_set_visibility (GtkEntry *entry,
                                                 gboolean visible);
gboolean gtk_entry_get_visibility (GtkEntry *entry);
void gtk_entry_set_invisible_char (GtkEntry *entry,
                                                 gunichar ch);
gunichar gtk_entry_get_invisible_char (GtkEntry *entry);
void gtk_entry_set_has_frame (GtkEntry *entry,
                                                 gboolean setting);
gboolean gtk_entry_get_has_frame (GtkEntry *entry);

void gtk_entry_set_max_length (GtkEntry *entry,
                                                 gint max);
gint gtk_entry_get_max_length (GtkEntry *entry);
void gtk_entry_set_activates_default (GtkEntry *entry,
                                                 gboolean setting);
gboolean gtk_entry_get_activates_default (GtkEntry *entry);

void gtk_entry_set_width_chars (GtkEntry *entry,
                                                 gint n_chars);
gint gtk_entry_get_width_chars (GtkEntry *entry);



void gtk_entry_set_text (GtkEntry *entry,
                                                 const gchar *text);

const gchar* gtk_entry_get_text (GtkEntry *entry);

PangoLayout* gtk_entry_get_layout (GtkEntry *entry);
void gtk_entry_get_layout_offsets (GtkEntry *entry,
                                                 gint *x,
                                                 gint *y);





GtkWidget* gtk_entry_new_with_max_length (gint max);
void gtk_entry_append_text (GtkEntry *entry,
                                                 const gchar *text);
void gtk_entry_prepend_text (GtkEntry *entry,
                                                 const gchar *text);
void gtk_entry_set_position (GtkEntry *entry,
                                                 gint position);
void gtk_entry_select_region (GtkEntry *entry,
                                                 gint start,
                                                 gint end);
void gtk_entry_set_editable (GtkEntry *entry,
                                                 gboolean editable);
# 65 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkeventbox.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkeventbox.h"
typedef struct _GtkEventBox GtkEventBox;
typedef struct _GtkEventBoxClass GtkEventBoxClass;

struct _GtkEventBox
{
  GtkBin bin;
};

struct _GtkEventBoxClass
{
  GtkBinClass parent_class;
};

GType gtk_event_box_get_type (void) ;
GtkWidget* gtk_event_box_new (void);
# 67 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfilesel.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkfilesel.h"
typedef struct _GtkFileSelection GtkFileSelection;
typedef struct _GtkFileSelectionClass GtkFileSelectionClass;

struct _GtkFileSelection
{

  GtkDialog parent_instance;


  GtkWidget *dir_list;
  GtkWidget *file_list;
  GtkWidget *selection_entry;
  GtkWidget *selection_text;
  GtkWidget *main_vbox;
  GtkWidget *ok_button;
  GtkWidget *cancel_button;
  GtkWidget *help_button;
  GtkWidget *history_pulldown;
  GtkWidget *history_menu;
  GList *history_list;
  GtkWidget *fileop_dialog;
  GtkWidget *fileop_entry;
  gchar *fileop_file;
  gpointer cmpl_state;

  GtkWidget *fileop_c_dir;
  GtkWidget *fileop_del_file;
  GtkWidget *fileop_ren_file;

  GtkWidget *button_area;
  GtkWidget *action_area;


  GPtrArray *selected_names;
  gchar *last_selected;
};

struct _GtkFileSelectionClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_file_selection_get_type (void) ;
GtkWidget* gtk_file_selection_new (const gchar *title);
void gtk_file_selection_set_filename (GtkFileSelection *filesel,
                                                   const gchar *filename);






const gchar* gtk_file_selection_get_filename (GtkFileSelection *filesel);

void gtk_file_selection_complete (GtkFileSelection *filesel,
                                                   const gchar *pattern);
void gtk_file_selection_show_fileop_buttons (GtkFileSelection *filesel);
void gtk_file_selection_hide_fileop_buttons (GtkFileSelection *filesel);

gchar** gtk_file_selection_get_selections (GtkFileSelection *filesel);

void gtk_file_selection_set_select_multiple (GtkFileSelection *filesel,
                                                   gboolean select_multiple);
gboolean gtk_file_selection_get_select_multiple (GtkFileSelection *filesel);
# 68 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfixed.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkfixed.h"
typedef struct _GtkFixed GtkFixed;
typedef struct _GtkFixedClass GtkFixedClass;
typedef struct _GtkFixedChild GtkFixedChild;

struct _GtkFixed
{
  GtkContainer container;

  GList *children;
};

struct _GtkFixedClass
{
  GtkContainerClass parent_class;
};

struct _GtkFixedChild
{
  GtkWidget *widget;
  gint x;
  gint y;
};


GType gtk_fixed_get_type (void) ;
GtkWidget* gtk_fixed_new (void);
void gtk_fixed_put (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
void gtk_fixed_move (GtkFixed *fixed,
                                        GtkWidget *widget,
                                        gint x,
                                        gint y);
void gtk_fixed_set_has_window (GtkFixed *fixed,
                                        gboolean has_window);
gboolean gtk_fixed_get_has_window (GtkFixed *fixed);
# 69 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkfontsel.h" 1
# 59 "/usr/include/gtk-2.0/gtk/gtkfontsel.h"
typedef struct _GtkFontSelection GtkFontSelection;
typedef struct _GtkFontSelectionClass GtkFontSelectionClass;

typedef struct _GtkFontSelectionDialog GtkFontSelectionDialog;
typedef struct _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;

struct _GtkFontSelection
{
  GtkVBox parent_instance;

  GtkWidget *font_entry;
  GtkWidget *family_list;
  GtkWidget *font_style_entry;
  GtkWidget *face_list;
  GtkWidget *size_entry;
  GtkWidget *size_list;
  GtkWidget *pixels_button;
  GtkWidget *points_button;
  GtkWidget *filter_button;
  GtkWidget *preview_entry;

  PangoFontFamily *family;
  PangoFontFace *face;

  gint size;

  GdkFont *font;


};

struct _GtkFontSelectionClass
{
  GtkVBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


struct _GtkFontSelectionDialog
{
  GtkDialog parent_instance;


  GtkWidget *fontsel;

  GtkWidget *main_vbox;
  GtkWidget *action_area;

  GtkWidget *ok_button;
  GtkWidget *apply_button;
  GtkWidget *cancel_button;






  gint dialog_width;
  gboolean auto_resize;
};

struct _GtkFontSelectionDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 143 "/usr/include/gtk-2.0/gtk/gtkfontsel.h"
GType gtk_font_selection_get_type (void) ;
GtkWidget* gtk_font_selection_new (void);
gchar* gtk_font_selection_get_font_name (GtkFontSelection *fontsel);


GdkFont* gtk_font_selection_get_font (GtkFontSelection *fontsel);


gboolean gtk_font_selection_set_font_name (GtkFontSelection *fontsel,
                                                           const gchar *fontname);
const gchar* gtk_font_selection_get_preview_text (GtkFontSelection *fontsel);
void gtk_font_selection_set_preview_text (GtkFontSelection *fontsel,
                                                           const gchar *text);







GType gtk_font_selection_dialog_get_type (void) ;
GtkWidget* gtk_font_selection_dialog_new (const gchar *title);






gchar* gtk_font_selection_dialog_get_font_name (GtkFontSelectionDialog *fsd);





GdkFont* gtk_font_selection_dialog_get_font (GtkFontSelectionDialog *fsd);






gboolean gtk_font_selection_dialog_set_font_name (GtkFontSelectionDialog *fsd,
                                                     const gchar *fontname);



const gchar* gtk_font_selection_dialog_get_preview_text (GtkFontSelectionDialog *fsd);



void gtk_font_selection_dialog_set_preview_text (GtkFontSelectionDialog *fsd,
                                                     const gchar *text);
# 70 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkgamma.h" 1
# 57 "/usr/include/gtk-2.0/gtk/gtkgamma.h"
typedef struct _GtkGammaCurve GtkGammaCurve;
typedef struct _GtkGammaCurveClass GtkGammaCurveClass;


struct _GtkGammaCurve
{
  GtkVBox vbox;

  GtkWidget *table;
  GtkWidget *curve;
  GtkWidget *button[5];

  gfloat gamma;
  GtkWidget *gamma_dialog;
  GtkWidget *gamma_text;
};

struct _GtkGammaCurveClass
{
  GtkVBoxClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_gamma_curve_get_type (void) ;
GtkWidget* gtk_gamma_curve_new (void);
# 72 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkgc.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkgc.h"
GdkGC* gtk_gc_get (gint depth,
                       GdkColormap *colormap,
                       GdkGCValues *values,
                       GdkGCValuesMask values_mask);
void gtk_gc_release (GdkGC *gc);
# 73 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h" 1
# 54 "/usr/include/gtk-2.0/gtk/gtkhandlebox.h"
typedef struct _GtkHandleBox GtkHandleBox;
typedef struct _GtkHandleBoxClass GtkHandleBoxClass;

struct _GtkHandleBox
{
  GtkBin bin;

  GdkWindow *bin_window;
  GdkWindow *float_window;
  GtkShadowType shadow_type;
  guint handle_position : 2;
  guint float_window_mapped : 1;
  guint child_detached : 1;
  guint in_drag : 1;
  guint shrink_on_detach : 1;

  signed int snap_edge : 3;



  gint deskoff_x, deskoff_y;

  GtkAllocation attach_allocation;
  GtkAllocation float_allocation;
};

struct _GtkHandleBoxClass
{
  GtkBinClass parent_class;

  void (*child_attached) (GtkHandleBox *handle_box,
                                 GtkWidget *child);
  void (*child_detached) (GtkHandleBox *handle_box,
                                 GtkWidget *child);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_handle_box_get_type (void) ;
GtkWidget* gtk_handle_box_new (void);
void gtk_handle_box_set_shadow_type (GtkHandleBox *handle_box,
                                                   GtkShadowType type);
GtkShadowType gtk_handle_box_get_shadow_type (GtkHandleBox *handle_box);
void gtk_handle_box_set_handle_position (GtkHandleBox *handle_box,
                                                   GtkPositionType position);
GtkPositionType gtk_handle_box_get_handle_position(GtkHandleBox *handle_box);
void gtk_handle_box_set_snap_edge (GtkHandleBox *handle_box,
                                                   GtkPositionType edge);
GtkPositionType gtk_handle_box_get_snap_edge (GtkHandleBox *handle_box);
# 74 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkhbbox.h" 1
# 47 "/usr/include/gtk-2.0/gtk/gtkhbbox.h"
typedef struct _GtkHButtonBox GtkHButtonBox;
typedef struct _GtkHButtonBoxClass GtkHButtonBoxClass;

struct _GtkHButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkHButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


GType gtk_hbutton_box_get_type (void) ;
GtkWidget* gtk_hbutton_box_new (void);




gint gtk_hbutton_box_get_spacing_default (void);
GtkButtonBoxStyle gtk_hbutton_box_get_layout_default (void);

void gtk_hbutton_box_set_spacing_default (gint spacing);
void gtk_hbutton_box_set_layout_default (GtkButtonBoxStyle layout);
# 76 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhpaned.h" 1
# 30 "/usr/include/gtk-2.0/gtk/gtkhpaned.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkpaned.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkpaned.h"
typedef struct _GtkPaned GtkPaned;
typedef struct _GtkPanedClass GtkPanedClass;
typedef struct _GtkPanedPrivate GtkPanedPrivate;

struct _GtkPaned
{
  GtkContainer container;

  GtkWidget *child1;
  GtkWidget *child2;

  GdkWindow *handle;
  GdkGC *xor_gc;
  GdkCursorType cursor_type;


  GdkRectangle handle_pos;

  gint child1_size;
  gint last_allocation;
  gint min_position;
  gint max_position;

  guint position_set : 1;
  guint in_drag : 1;
  guint child1_shrink : 1;
  guint child1_resize : 1;
  guint child2_shrink : 1;
  guint child2_resize : 1;
  guint orientation : 1;
  guint in_recursion : 1;
  guint handle_prelit : 1;

  GtkWidget *last_child1_focus;
  GtkWidget *last_child2_focus;
  GtkPanedPrivate *priv;

  gint drag_pos;
  gint original_position;
};

struct _GtkPanedClass
{
  GtkContainerClass parent_class;

  gboolean (* cycle_child_focus) (GtkPaned *paned,
                                    gboolean reverse);
  gboolean (* toggle_handle_focus) (GtkPaned *paned);
  gboolean (* move_handle) (GtkPaned *paned,
                                    GtkScrollType scroll);
  gboolean (* cycle_handle_focus) (GtkPaned *paned,
                                    gboolean reverse);
  gboolean (* accept_position) (GtkPaned *paned);
  gboolean (* cancel_position) (GtkPaned *paned);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_paned_get_type (void) ;
void gtk_paned_add1 (GtkPaned *paned,
                                   GtkWidget *child);
void gtk_paned_add2 (GtkPaned *paned,
                                   GtkWidget *child);
void gtk_paned_pack1 (GtkPaned *paned,
                                   GtkWidget *child,
                                   gboolean resize,
                                   gboolean shrink);
void gtk_paned_pack2 (GtkPaned *paned,
                                   GtkWidget *child,
                                   gboolean resize,
                                   gboolean shrink);
gint gtk_paned_get_position (GtkPaned *paned);
void gtk_paned_set_position (GtkPaned *paned,
                                   gint position);


void gtk_paned_compute_position (GtkPaned *paned,
                                    gint allocation,
                                    gint child1_req,
                                    gint child2_req);
# 31 "/usr/include/gtk-2.0/gtk/gtkhpaned.h" 2
# 44 "/usr/include/gtk-2.0/gtk/gtkhpaned.h"
typedef struct _GtkHPaned GtkHPaned;
typedef struct _GtkHPanedClass GtkHPanedClass;

struct _GtkHPaned
{
  GtkPaned paned;
};

struct _GtkHPanedClass
{
  GtkPanedClass parent_class;
};

GType gtk_hpaned_get_type (void) ;
GtkWidget *gtk_hpaned_new (void);
# 77 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhruler.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtkhruler.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkruler.h" 1
# 58 "/usr/include/gtk-2.0/gtk/gtkruler.h"
typedef struct _GtkRuler GtkRuler;
typedef struct _GtkRulerClass GtkRulerClass;
typedef struct _GtkRulerMetric GtkRulerMetric;




struct _GtkRuler
{
  GtkWidget widget;

  GdkPixmap *backing_store;
  GdkGC *non_gr_exp_gc;
  GtkRulerMetric *metric;
  gint xsrc, ysrc;
  gint slider_size;


  gdouble lower;

  gdouble upper;

  gdouble position;

  gdouble max_size;
};

struct _GtkRulerClass
{
  GtkWidgetClass parent_class;

  void (* draw_ticks) (GtkRuler *ruler);
  void (* draw_pos) (GtkRuler *ruler);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkRulerMetric
{
  gchar *metric_name;
  gchar *abbrev;


  gdouble pixels_per_unit;
  gdouble ruler_scale[10];
  gint subdivide[5];
};


GType gtk_ruler_get_type (void) ;
void gtk_ruler_set_metric (GtkRuler *ruler,
                              GtkMetricType metric);
void gtk_ruler_set_range (GtkRuler *ruler,
                              gdouble lower,
                              gdouble upper,
                              gdouble position,
                              gdouble max_size);
void gtk_ruler_draw_ticks (GtkRuler *ruler);
void gtk_ruler_draw_pos (GtkRuler *ruler);

GtkMetricType gtk_ruler_get_metric (GtkRuler *ruler);
void gtk_ruler_get_range (GtkRuler *ruler,
                                    gdouble *lower,
                                    gdouble *upper,
                                    gdouble *position,
                                    gdouble *max_size);
# 43 "/usr/include/gtk-2.0/gtk/gtkhruler.h" 2
# 58 "/usr/include/gtk-2.0/gtk/gtkhruler.h"
typedef struct _GtkHRuler GtkHRuler;
typedef struct _GtkHRulerClass GtkHRulerClass;

struct _GtkHRuler
{
  GtkRuler ruler;
};

struct _GtkHRulerClass
{
  GtkRulerClass parent_class;
};


GType gtk_hruler_get_type (void) ;
GtkWidget* gtk_hruler_new (void);
# 78 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkhscale.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkhscale.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkscale.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkscale.h"
typedef struct _GtkScale GtkScale;
typedef struct _GtkScaleClass GtkScaleClass;

struct _GtkScale
{
  GtkRange range;

  gint digits;
  guint draw_value : 1;
  guint value_pos : 2;
};

struct _GtkScaleClass
{
  GtkRangeClass parent_class;

  gchar* (* format_value) (GtkScale *scale,
                           gdouble value);

  void (* draw_value) (GtkScale *scale);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_scale_get_type (void) ;

void gtk_scale_set_digits (GtkScale *scale,
                                          gint digits);
gint gtk_scale_get_digits (GtkScale *scale);
void gtk_scale_set_draw_value (GtkScale *scale,
                                          gboolean draw_value);
gboolean gtk_scale_get_draw_value (GtkScale *scale);
void gtk_scale_set_value_pos (GtkScale *scale,
                                          GtkPositionType pos);
GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);


void _gtk_scale_get_value_size (GtkScale *scale,
                                    gint *width,
                                    gint *height);
gchar *_gtk_scale_format_value (GtkScale *scale,
                                   gdouble value);
# 33 "/usr/include/gtk-2.0/gtk/gtkhscale.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkhscale.h"
typedef struct _GtkHScale GtkHScale;
typedef struct _GtkHScaleClass GtkHScaleClass;

struct _GtkHScale
{
  GtkScale scale;
};

struct _GtkHScaleClass
{
  GtkScaleClass parent_class;
};


GType gtk_hscale_get_type (void) ;
GtkWidget* gtk_hscale_new (GtkAdjustment *adjustment);
GtkWidget* gtk_hscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
# 79 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkhseparator.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkhseparator.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkseparator.h" 1
# 49 "/usr/include/gtk-2.0/gtk/gtkseparator.h"
typedef struct _GtkSeparator GtkSeparator;
typedef struct _GtkSeparatorClass GtkSeparatorClass;

struct _GtkSeparator
{
  GtkWidget widget;
};

struct _GtkSeparatorClass
{
  GtkWidgetClass parent_class;
};


GType gtk_separator_get_type (void) ;
# 33 "/usr/include/gtk-2.0/gtk/gtkhseparator.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkhseparator.h"
typedef struct _GtkHSeparator GtkHSeparator;
typedef struct _GtkHSeparatorClass GtkHSeparatorClass;

struct _GtkHSeparator
{
  GtkSeparator separator;
};

struct _GtkHSeparatorClass
{
  GtkSeparatorClass parent_class;
};


GType gtk_hseparator_get_type (void) ;
GtkWidget* gtk_hseparator_new (void);
# 81 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
typedef struct _GtkIconFactoryClass GtkIconFactoryClass;
# 48 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
struct _GtkIconFactory
{
  GObject parent_instance;

  GHashTable *icons;
};

struct _GtkIconFactoryClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_icon_factory_get_type (void);
GtkIconFactory* gtk_icon_factory_new (void);
void gtk_icon_factory_add (GtkIconFactory *factory,
                                           const gchar *stock_id,
                                           GtkIconSet *icon_set);
GtkIconSet* gtk_icon_factory_lookup (GtkIconFactory *factory,
                                           const gchar *stock_id);



void gtk_icon_factory_add_default (GtkIconFactory *factory);
void gtk_icon_factory_remove_default (GtkIconFactory *factory);
GtkIconSet* gtk_icon_factory_lookup_default (const gchar *stock_id);
# 92 "/usr/include/gtk-2.0/gtk/gtkiconfactory.h"
gboolean gtk_icon_size_lookup (GtkIconSize size,
                                            gint *width,
                                            gint *height);

gboolean gtk_icon_size_lookup_for_settings (GtkSettings *settings,
                                            GtkIconSize size,
                                            gint *width,
                                            gint *height);

GtkIconSize gtk_icon_size_register (const gchar *name,
                                                    gint width,
                                                    gint height);
void gtk_icon_size_register_alias (const gchar *alias,
                                                    GtkIconSize target);
GtkIconSize gtk_icon_size_from_name (const gchar *name);
const gchar* gtk_icon_size_get_name (GtkIconSize size);



GType gtk_icon_set_get_type (void);
GtkIconSet* gtk_icon_set_new (void);
GtkIconSet* gtk_icon_set_new_from_pixbuf (GdkPixbuf *pixbuf);

GtkIconSet* gtk_icon_set_ref (GtkIconSet *icon_set);
void gtk_icon_set_unref (GtkIconSet *icon_set);
GtkIconSet* gtk_icon_set_copy (GtkIconSet *icon_set);




GdkPixbuf* gtk_icon_set_render_icon (GtkIconSet *icon_set,
                                          GtkStyle *style,
                                          GtkTextDirection direction,
                                          GtkStateType state,
                                          GtkIconSize size,
                                          GtkWidget *widget,
                                          const char *detail);


void gtk_icon_set_add_source (GtkIconSet *icon_set,
                                          const GtkIconSource *source);

void gtk_icon_set_get_sizes (GtkIconSet *icon_set,
                                          GtkIconSize **sizes,
                                          gint *n_sizes);

GType gtk_icon_source_get_type (void);
GtkIconSource* gtk_icon_source_new (void);
GtkIconSource* gtk_icon_source_copy (const GtkIconSource *source);
void gtk_icon_source_free (GtkIconSource *source);

void gtk_icon_source_set_filename (GtkIconSource *source,
                                                         const gchar *filename);
void gtk_icon_source_set_pixbuf (GtkIconSource *source,
                                                         GdkPixbuf *pixbuf);

const gchar* gtk_icon_source_get_filename (const GtkIconSource *source);
GdkPixbuf* gtk_icon_source_get_pixbuf (const GtkIconSource *source);

void gtk_icon_source_set_direction_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
void gtk_icon_source_set_state_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
void gtk_icon_source_set_size_wildcarded (GtkIconSource *source,
                                                           gboolean setting);
gboolean gtk_icon_source_get_size_wildcarded (const GtkIconSource *source);
gboolean gtk_icon_source_get_state_wildcarded (const GtkIconSource *source);
gboolean gtk_icon_source_get_direction_wildcarded (const GtkIconSource *source);
void gtk_icon_source_set_direction (GtkIconSource *source,
                                                           GtkTextDirection direction);
void gtk_icon_source_set_state (GtkIconSource *source,
                                                           GtkStateType state);
void gtk_icon_source_set_size (GtkIconSource *source,
                                                           GtkIconSize size);
GtkTextDirection gtk_icon_source_get_direction (const GtkIconSource *source);
GtkStateType gtk_icon_source_get_state (const GtkIconSource *source);
GtkIconSize gtk_icon_source_get_size (const GtkIconSource *source);



void _gtk_icon_set_invalidate_caches (void);
GSList* _gtk_icon_factory_list_ids (void);
# 82 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimage.h" 1
# 47 "/usr/include/gtk-2.0/gtk/gtkimage.h"
typedef struct _GtkImage GtkImage;
typedef struct _GtkImageClass GtkImageClass;

typedef struct _GtkImagePixmapData GtkImagePixmapData;
typedef struct _GtkImageImageData GtkImageImageData;
typedef struct _GtkImagePixbufData GtkImagePixbufData;
typedef struct _GtkImageStockData GtkImageStockData;
typedef struct _GtkImageIconSetData GtkImageIconSetData;
typedef struct _GtkImageAnimationData GtkImageAnimationData;

struct _GtkImagePixmapData
{
  GdkPixmap *pixmap;
};

struct _GtkImageImageData
{
  GdkImage *image;
};

struct _GtkImagePixbufData
{
  GdkPixbuf *pixbuf;
};

struct _GtkImageStockData
{
  gchar *stock_id;
};

struct _GtkImageIconSetData
{
  GtkIconSet *icon_set;
};

struct _GtkImageAnimationData
{
  GdkPixbufAnimation *anim;
  GdkPixbufAnimationIter *iter;
  guint frame_timeout;
};

typedef enum
{
  GTK_IMAGE_EMPTY,
  GTK_IMAGE_PIXMAP,
  GTK_IMAGE_IMAGE,
  GTK_IMAGE_PIXBUF,
  GTK_IMAGE_STOCK,
  GTK_IMAGE_ICON_SET,
  GTK_IMAGE_ANIMATION
} GtkImageType;

struct _GtkImage
{
  GtkMisc misc;

  GtkImageType storage_type;

  union
  {
    GtkImagePixmapData pixmap;
    GtkImageImageData image;
    GtkImagePixbufData pixbuf;
    GtkImageStockData stock;
    GtkImageIconSetData icon_set;
    GtkImageAnimationData anim;
  } data;


  GdkBitmap *mask;


  GtkIconSize icon_size;
};

struct _GtkImageClass
{
  GtkMiscClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_image_get_type (void) ;

GtkWidget* gtk_image_new (void);
GtkWidget* gtk_image_new_from_pixmap (GdkPixmap *pixmap,
                                         GdkBitmap *mask);
GtkWidget* gtk_image_new_from_image (GdkImage *image,
                                         GdkBitmap *mask);
GtkWidget* gtk_image_new_from_file (const gchar *filename);
GtkWidget* gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);
GtkWidget* gtk_image_new_from_stock (const gchar *stock_id,
                                         GtkIconSize size);
GtkWidget* gtk_image_new_from_icon_set (GtkIconSet *icon_set,
                                         GtkIconSize size);
GtkWidget* gtk_image_new_from_animation (GdkPixbufAnimation *animation);

void gtk_image_set_from_pixmap (GtkImage *image,
                                   GdkPixmap *pixmap,
                                   GdkBitmap *mask);
void gtk_image_set_from_image (GtkImage *image,
                                   GdkImage *gdk_image,
                                   GdkBitmap *mask);
void gtk_image_set_from_file (GtkImage *image,
                                   const gchar *filename);
void gtk_image_set_from_pixbuf (GtkImage *image,
                                   GdkPixbuf *pixbuf);
void gtk_image_set_from_stock (GtkImage *image,
                                   const gchar *stock_id,
                                   GtkIconSize size);
void gtk_image_set_from_icon_set (GtkImage *image,
                                   GtkIconSet *icon_set,
                                   GtkIconSize size);
void gtk_image_set_from_animation (GtkImage *image,
                                   GdkPixbufAnimation *animation);

GtkImageType gtk_image_get_storage_type (GtkImage *image);

void gtk_image_get_pixmap (GtkImage *image,
                                   GdkPixmap **pixmap,
                                   GdkBitmap **mask);
void gtk_image_get_image (GtkImage *image,
                                   GdkImage **gdk_image,
                                   GdkBitmap **mask);
GdkPixbuf* gtk_image_get_pixbuf (GtkImage *image);
void gtk_image_get_stock (GtkImage *image,
                                   gchar **stock_id,
                                   GtkIconSize *size);
void gtk_image_get_icon_set (GtkImage *image,
                                   GtkIconSet **icon_set,
                                   GtkIconSize *size);
GdkPixbufAnimation* gtk_image_get_animation (GtkImage *image);





void gtk_image_set (GtkImage *image,
                               GdkImage *val,
                               GdkBitmap *mask);
void gtk_image_get (GtkImage *image,
                               GdkImage **val,
                               GdkBitmap **mask);
# 83 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkimagemenuitem.h"
typedef struct _GtkImageMenuItem GtkImageMenuItem;
typedef struct _GtkImageMenuItemClass GtkImageMenuItemClass;

struct _GtkImageMenuItem
{
  GtkMenuItem menu_item;


  GtkWidget *image;
};

struct _GtkImageMenuItemClass
{
  GtkMenuItemClass parent_class;
};


GType gtk_image_menu_item_get_type (void) ;
GtkWidget* gtk_image_menu_item_new (void);
GtkWidget* gtk_image_menu_item_new_with_label (const gchar *label);
GtkWidget* gtk_image_menu_item_new_with_mnemonic (const gchar *label);
GtkWidget* gtk_image_menu_item_new_from_stock (const gchar *stock_id,
                                                  GtkAccelGroup *accel_group);
void gtk_image_menu_item_set_image (GtkImageMenuItem *image_menu_item,
                                                  GtkWidget *image);
GtkWidget* gtk_image_menu_item_get_image (GtkImageMenuItem *image_menu_item);
# 84 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtkimcontextsimple.h"
typedef struct _GtkIMContextSimple GtkIMContextSimple;
typedef struct _GtkIMContextSimpleClass GtkIMContextSimpleClass;



struct _GtkIMContextSimple
{
  GtkIMContext object;

  GSList *tables;

  guint compose_buffer[7 + 1];
  gunichar tentative_match;
  gint tentative_match_len;

  guint in_hex_sequence : 1;
};

struct _GtkIMContextSimpleClass
{
  GtkIMContextClass parent_class;
};

GType gtk_im_context_simple_get_type (void) ;
GtkIMContext *gtk_im_context_simple_new (void);

void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple,
                                               guint16 *data,
                                               gint max_seq_len,
                                               gint n_seqs);
# 86 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtkimmulticontext.h"
typedef struct _GtkIMMulticontext GtkIMMulticontext;
typedef struct _GtkIMMulticontextClass GtkIMMulticontextClass;
typedef struct _GtkIMMulticontextPrivate GtkIMMulticontextPrivate;

struct _GtkIMMulticontext
{
  GtkIMContext object;

  GtkIMContext *slave;

  GtkIMMulticontextPrivate *priv;

  const gchar *context_id;
};

struct _GtkIMMulticontextClass
{
  GtkIMContextClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_im_multicontext_get_type (void) ;
GtkIMContext *gtk_im_multicontext_new (void);

void gtk_im_multicontext_append_menuitems (GtkIMMulticontext *context,
                                                    GtkMenuShell *menushell);
# 87 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h" 1
# 58 "/usr/include/gtk-2.0/gtk/gtkinputdialog.h"
typedef struct _GtkInputDialog GtkInputDialog;
typedef struct _GtkInputDialogClass GtkInputDialogClass;

struct _GtkInputDialog
{
  GtkDialog dialog;

  GtkWidget *axis_list;
  GtkWidget *axis_listbox;
  GtkWidget *mode_optionmenu;

  GtkWidget *close_button;
  GtkWidget *save_button;

  GtkWidget *axis_items[GDK_AXIS_LAST];
  GdkDevice *current_device;

  GtkWidget *keys_list;
  GtkWidget *keys_listbox;
};

struct _GtkInputDialogClass
{
  GtkDialogClass parent_class;

  void (* enable_device) (GtkInputDialog *inputd,
                                        GdkDevice *device);
  void (* disable_device) (GtkInputDialog *inputd,
                                        GdkDevice *device);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_input_dialog_get_type (void) ;
GtkWidget* gtk_input_dialog_new (void);
# 88 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkinvisible.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtkinvisible.h"

# 42 "/usr/include/gtk-2.0/gtk/gtkinvisible.h"
typedef struct _GtkInvisible GtkInvisible;
typedef struct _GtkInvisibleClass GtkInvisibleClass;

struct _GtkInvisible
{
  GtkWidget widget;
  gboolean has_user_ref_count;
  GdkScreen *screen;
};

struct _GtkInvisibleClass
{
  GtkWidgetClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_invisible_get_type (void) ;

GtkWidget* gtk_invisible_new (void);
GtkWidget* gtk_invisible_new_for_screen (GdkScreen *screen);
void gtk_invisible_set_screen (GtkInvisible *invisible,
                                         GdkScreen *screen);
GdkScreen* gtk_invisible_get_screen (GtkInvisible *invisible);


# 89 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"
typedef void (*GtkPrintFunc) (gpointer func_data,
                                            const gchar *str);
typedef gchar * (*GtkTranslateFunc) (const gchar *path,
                                            gpointer func_data);





typedef void (*GtkItemFactoryCallback) ();
typedef void (*GtkItemFactoryCallback1) (gpointer callback_data,
                                            guint callback_action,
                                            GtkWidget *widget);
# 64 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"
typedef struct _GtkItemFactory GtkItemFactory;
typedef struct _GtkItemFactoryClass GtkItemFactoryClass;
typedef struct _GtkItemFactoryEntry GtkItemFactoryEntry;
typedef struct _GtkItemFactoryItem GtkItemFactoryItem;

struct _GtkItemFactory
{
  GtkObject object;

  gchar *path;
  GtkAccelGroup *accel_group;
  GtkWidget *widget;
  GSList *items;

  GtkTranslateFunc translate_func;
  gpointer translate_data;
  GtkDestroyNotify translate_notify;
};

struct _GtkItemFactoryClass
{
  GtkObjectClass object_class;

  GHashTable *item_ht;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

struct _GtkItemFactoryEntry
{
  gchar *path;
  gchar *accelerator;

  GtkItemFactoryCallback callback;
  guint callback_action;
# 120 "/usr/include/gtk-2.0/gtk/gtkitemfactory.h"
  gchar *item_type;





  gconstpointer extra_data;
};

struct _GtkItemFactoryItem
{
  gchar *path;
  GSList *widgets;
};


GType gtk_item_factory_get_type (void) ;




GtkItemFactory* gtk_item_factory_new (GType container_type,
                                            const gchar *path,
                                            GtkAccelGroup *accel_group);
void gtk_item_factory_construct (GtkItemFactory *ifactory,
                                            GType container_type,
                                            const gchar *path,
                                            GtkAccelGroup *accel_group);



void gtk_item_factory_add_foreign (GtkWidget *accel_widget,
                                                     const gchar *full_path,
                                                     GtkAccelGroup *accel_group,
                                                     guint keyval,
                                                     GdkModifierType modifiers);

GtkItemFactory* gtk_item_factory_from_widget (GtkWidget *widget);
const gchar* gtk_item_factory_path_from_widget (GtkWidget *widget);

GtkWidget* gtk_item_factory_get_item (GtkItemFactory *ifactory,
                                                       const gchar *path);
GtkWidget* gtk_item_factory_get_widget (GtkItemFactory *ifactory,
                                                       const gchar *path);
GtkWidget* gtk_item_factory_get_widget_by_action (GtkItemFactory *ifactory,
                                                       guint action);
GtkWidget* gtk_item_factory_get_item_by_action (GtkItemFactory *ifactory,
                                                       guint action);

void gtk_item_factory_create_item (GtkItemFactory *ifactory,
                                         GtkItemFactoryEntry *entry,
                                         gpointer callback_data,
                                         guint callback_type);
void gtk_item_factory_create_items (GtkItemFactory *ifactory,
                                         guint n_entries,
                                         GtkItemFactoryEntry *entries,
                                         gpointer callback_data);
void gtk_item_factory_delete_item (GtkItemFactory *ifactory,
                                         const gchar *path);
void gtk_item_factory_delete_entry (GtkItemFactory *ifactory,
                                         GtkItemFactoryEntry *entry);
void gtk_item_factory_delete_entries (GtkItemFactory *ifactory,
                                         guint n_entries,
                                         GtkItemFactoryEntry *entries);
void gtk_item_factory_popup (GtkItemFactory *ifactory,
                                         guint x,
                                         guint y,
                                         guint mouse_button,
                                         guint32 time_);
void gtk_item_factory_popup_with_data(GtkItemFactory *ifactory,
                                         gpointer popup_data,
                                         GtkDestroyNotify destroy,
                                         guint x,
                                         guint y,
                                         guint mouse_button,
                                         guint32 time_);
gpointer gtk_item_factory_popup_data (GtkItemFactory *ifactory);
gpointer gtk_item_factory_popup_data_from_widget (GtkWidget *widget);
void gtk_item_factory_set_translate_func (GtkItemFactory *ifactory,
                                            GtkTranslateFunc func,
                                            gpointer data,
                                            GtkDestroyNotify notify);






typedef void (*GtkMenuCallback) (GtkWidget *widget,
                                 gpointer user_data);
typedef struct {
  gchar *path;
  gchar *accelerator;
  GtkMenuCallback callback;
  gpointer callback_data;
  GtkWidget *widget;
} GtkMenuEntry;


typedef void (*GtkItemFactoryCallback2) (GtkWidget *widget,
                                            gpointer callback_data,
                                            guint callback_action);


void gtk_item_factory_create_items_ac (GtkItemFactory *ifactory,
                                          guint n_entries,
                                          GtkItemFactoryEntry *entries,
                                          gpointer callback_data,
                                          guint callback_type);



GtkItemFactory* gtk_item_factory_from_path (const gchar *path);
void gtk_item_factory_create_menu_entries (guint n_entries,
                                              GtkMenuEntry *entries);
void gtk_item_factories_path_delete (const gchar *ifactory_path,
                                            const gchar *path);
# 91 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtklayout.h" 1
# 51 "/usr/include/gtk-2.0/gtk/gtklayout.h"
typedef struct _GtkLayout GtkLayout;
typedef struct _GtkLayoutClass GtkLayoutClass;

struct _GtkLayout
{
  GtkContainer container;

  GList *children;

  guint width;
  guint height;

  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;


  GdkWindow *bin_window;


  GdkVisibilityState visibility;
  gint scroll_x;
  gint scroll_y;

  guint freeze_count;
};

struct _GtkLayoutClass
{
  GtkContainerClass parent_class;

  void (*set_scroll_adjustments) (GtkLayout *layout,
                                     GtkAdjustment *hadjustment,
                                     GtkAdjustment *vadjustment);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_layout_get_type (void) ;
GtkWidget* gtk_layout_new (GtkAdjustment *hadjustment,
                                           GtkAdjustment *vadjustment);
void gtk_layout_put (GtkLayout *layout,
                                           GtkWidget *child_widget,
                                           gint x,
                                           gint y);

void gtk_layout_move (GtkLayout *layout,
                                           GtkWidget *child_widget,
                                           gint x,
                                           gint y);

void gtk_layout_set_size (GtkLayout *layout,
                                           guint width,
                                           guint height);
void gtk_layout_get_size (GtkLayout *layout,
                                           guint *width,
                                           guint *height);

GtkAdjustment* gtk_layout_get_hadjustment (GtkLayout *layout);
GtkAdjustment* gtk_layout_get_vadjustment (GtkLayout *layout);
void gtk_layout_set_hadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
void gtk_layout_set_vadjustment (GtkLayout *layout,
                                           GtkAdjustment *adjustment);
# 129 "/usr/include/gtk-2.0/gtk/gtklayout.h"
void gtk_layout_freeze (GtkLayout *layout);
void gtk_layout_thaw (GtkLayout *layout);
# 93 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklist.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtklist.h"
# 1 "/usr/include/gtk-2.0/gtk/gtklistitem.h" 1
# 50 "/usr/include/gtk-2.0/gtk/gtklistitem.h"
typedef struct _GtkListItem GtkListItem;
typedef struct _GtkListItemClass GtkListItemClass;

struct _GtkListItem
{
  GtkItem item;
};

struct _GtkListItemClass
{
  GtkItemClass parent_class;

  void (*toggle_focus_row) (GtkListItem *list_item);
  void (*select_all) (GtkListItem *list_item);
  void (*unselect_all) (GtkListItem *list_item);
  void (*undo_selection) (GtkListItem *list_item);
  void (*start_selection) (GtkListItem *list_item);
  void (*end_selection) (GtkListItem *list_item);
  void (*extend_selection) (GtkListItem *list_item,
                             GtkScrollType scroll_type,
                             gfloat position,
                             gboolean auto_start_selection);
  void (*scroll_horizontal) (GtkListItem *list_item,
                             GtkScrollType scroll_type,
                             gfloat position);
  void (*scroll_vertical) (GtkListItem *list_item,
                             GtkScrollType scroll_type,
                             gfloat position);
  void (*toggle_add_mode) (GtkListItem *list_item);
};


GtkType gtk_list_item_get_type (void) ;
GtkWidget* gtk_list_item_new (void);
GtkWidget* gtk_list_item_new_with_label (const gchar *label);
void gtk_list_item_select (GtkListItem *list_item);
void gtk_list_item_deselect (GtkListItem *list_item);
# 37 "/usr/include/gtk-2.0/gtk/gtklist.h" 2
# 51 "/usr/include/gtk-2.0/gtk/gtklist.h"
typedef struct _GtkList GtkList;
typedef struct _GtkListClass GtkListClass;

struct _GtkList
{
  GtkContainer container;

  GList *children;
  GList *selection;

  GList *undo_selection;
  GList *undo_unselection;

  GtkWidget *last_focus_child;
  GtkWidget *undo_focus_child;

  guint htimer;
  guint vtimer;

  gint anchor;
  gint drag_pos;
  GtkStateType anchor_state;

  guint selection_mode : 2;
  guint drag_selection:1;
  guint add_mode:1;
};

struct _GtkListClass
{
  GtkContainerClass parent_class;

  void (* selection_changed) (GtkList *list);
  void (* select_child) (GtkList *list,
                              GtkWidget *child);
  void (* unselect_child) (GtkList *list,
                              GtkWidget *child);
};


GtkType gtk_list_get_type (void) ;
GtkWidget* gtk_list_new (void);
void gtk_list_insert_items (GtkList *list,
                                           GList *items,
                                           gint position);
void gtk_list_append_items (GtkList *list,
                                           GList *items);
void gtk_list_prepend_items (GtkList *list,
                                           GList *items);
void gtk_list_remove_items (GtkList *list,
                                           GList *items);
void gtk_list_remove_items_no_unref (GtkList *list,
                                           GList *items);
void gtk_list_clear_items (GtkList *list,
                                           gint start,
                                           gint end);
void gtk_list_select_item (GtkList *list,
                                           gint item);
void gtk_list_unselect_item (GtkList *list,
                                           gint item);
void gtk_list_select_child (GtkList *list,
                                           GtkWidget *child);
void gtk_list_unselect_child (GtkList *list,
                                           GtkWidget *child);
gint gtk_list_child_position (GtkList *list,
                                           GtkWidget *child);
void gtk_list_set_selection_mode (GtkList *list,
                                           GtkSelectionMode mode);

void gtk_list_extend_selection (GtkList *list,
                                           GtkScrollType scroll_type,
                                           gfloat position,
                                           gboolean auto_start_selection);
void gtk_list_start_selection (GtkList *list);
void gtk_list_end_selection (GtkList *list);
void gtk_list_select_all (GtkList *list);
void gtk_list_unselect_all (GtkList *list);
void gtk_list_scroll_horizontal (GtkList *list,
                                           GtkScrollType scroll_type,
                                           gfloat position);
void gtk_list_scroll_vertical (GtkList *list,
                                           GtkScrollType scroll_type,
                                           gfloat position);
void gtk_list_toggle_add_mode (GtkList *list);
void gtk_list_toggle_focus_row (GtkList *list);
void gtk_list_toggle_row (GtkList *list,
                                           GtkWidget *item);
void gtk_list_undo_selection (GtkList *list);
void gtk_list_end_drag_selection (GtkList *list);
# 94 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtklistitem.h" 1
# 95 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 1
# 23 "/usr/include/gtk-2.0/gtk/gtkliststore.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreemodel.h" 1
# 28 "/usr/include/gtk-2.0/gtk/gtktreemodel.h"

# 39 "/usr/include/gtk-2.0/gtk/gtktreemodel.h"
typedef struct _GtkTreeIter GtkTreeIter;
typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
typedef struct _GtkTreeModel GtkTreeModel;
typedef struct _GtkTreeModelIface GtkTreeModelIface;
typedef gboolean (* GtkTreeModelForeachFunc) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);


typedef enum
{
  GTK_TREE_MODEL_ITERS_PERSIST = 1 << 0,
  GTK_TREE_MODEL_LIST_ONLY = 1 << 1
} GtkTreeModelFlags;

struct _GtkTreeIter
{
  gint stamp;
  gpointer user_data;
  gpointer user_data2;
  gpointer user_data3;
};

struct _GtkTreeModelIface
{
  GTypeInterface g_iface;


  void (* row_changed) (GtkTreeModel *tree_model,
                                          GtkTreePath *path,
                                          GtkTreeIter *iter);
  void (* row_inserted) (GtkTreeModel *tree_model,
                                          GtkTreePath *path,
                                          GtkTreeIter *iter);
  void (* row_has_child_toggled) (GtkTreeModel *tree_model,
                                          GtkTreePath *path,
                                          GtkTreeIter *iter);
  void (* row_deleted) (GtkTreeModel *tree_model,
                                          GtkTreePath *path);
  void (* rows_reordered) (GtkTreeModel *tree_model,
                                          GtkTreePath *path,
                                          GtkTreeIter *iter,
                                          gint *new_order);


  GtkTreeModelFlags (* get_flags) (GtkTreeModel *tree_model);

  gint (* get_n_columns) (GtkTreeModel *tree_model);
  GType (* get_column_type) (GtkTreeModel *tree_model,
                                    gint index_);
  gboolean (* get_iter) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter,
                                    GtkTreePath *path);
  GtkTreePath *(* get_path) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
  void (* get_value) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter,
                                    gint column,
                                    GValue *value);
  gboolean (* iter_next) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
  gboolean (* iter_children) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter,
                                    GtkTreeIter *parent);
  gboolean (* iter_has_child) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
  gint (* iter_n_children) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
  gboolean (* iter_nth_child) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter,
                                    GtkTreeIter *parent,
                                    gint n);
  gboolean (* iter_parent) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter,
                                    GtkTreeIter *child);
  void (* ref_node) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
  void (* unref_node) (GtkTreeModel *tree_model,
                                    GtkTreeIter *iter);
};



GtkTreePath *gtk_tree_path_new (void);
GtkTreePath *gtk_tree_path_new_from_string (const gchar *path);
GtkTreePath *gtk_tree_path_new_from_indices (gint first_index,
                                             ...);
gchar *gtk_tree_path_to_string (GtkTreePath *path);

GtkTreePath *gtk_tree_path_new_first (void);
void gtk_tree_path_append_index (GtkTreePath *path,
                                             gint index_);
void gtk_tree_path_prepend_index (GtkTreePath *path,
                                             gint index_);
gint gtk_tree_path_get_depth (GtkTreePath *path);
gint *gtk_tree_path_get_indices (GtkTreePath *path);
void gtk_tree_path_free (GtkTreePath *path);
GtkTreePath *gtk_tree_path_copy (const GtkTreePath *path);
GType gtk_tree_path_get_type (void);
gint gtk_tree_path_compare (const GtkTreePath *a,
                                             const GtkTreePath *b);
void gtk_tree_path_next (GtkTreePath *path);
gboolean gtk_tree_path_prev (GtkTreePath *path);
gboolean gtk_tree_path_up (GtkTreePath *path);
void gtk_tree_path_down (GtkTreePath *path);

gboolean gtk_tree_path_is_ancestor (GtkTreePath *path,
                                             GtkTreePath *descendant);
gboolean gtk_tree_path_is_descendant (GtkTreePath *path,
                                             GtkTreePath *ancestor);






GType gtk_tree_row_reference_get_type (void);
GtkTreeRowReference *gtk_tree_row_reference_new (GtkTreeModel *model,
                                                       GtkTreePath *path);
GtkTreeRowReference *gtk_tree_row_reference_new_proxy (GObject *proxy,
                                                       GtkTreeModel *model,
                                                       GtkTreePath *path);
GtkTreePath *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);
gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);
GtkTreeRowReference *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);
void gtk_tree_row_reference_free (GtkTreeRowReference *reference);


void gtk_tree_row_reference_inserted (GObject *proxy,
                                                       GtkTreePath *path);
void gtk_tree_row_reference_deleted (GObject *proxy,
                                                       GtkTreePath *path);
void gtk_tree_row_reference_reordered (GObject *proxy,
                                                       GtkTreePath *path,
                                                       GtkTreeIter *iter,
                                                       gint *new_order);


GtkTreeIter * gtk_tree_iter_copy (GtkTreeIter *iter);
void gtk_tree_iter_free (GtkTreeIter *iter);
GType gtk_tree_iter_get_type (void);

GType gtk_tree_model_get_type (void) ;
GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);
gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);
GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model,
                                                  gint index_);



gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  GtkTreePath *path);
gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model,
                                                       GtkTreeIter *iter,
                                                       const gchar *path_string);
gchar * gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model,
                                                       GtkTreeIter *iter);

gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
GtkTreePath * gtk_tree_model_get_path (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
void gtk_tree_model_get_value (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  gint column,
                                                  GValue *value);
gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  GtkTreeIter *parent);
gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  GtkTreeIter *parent,
                                                  gint n);
gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  GtkTreeIter *child);
void gtk_tree_model_ref_node (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
void gtk_tree_model_unref_node (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter);
void gtk_tree_model_get (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  ...);
void gtk_tree_model_get_valist (GtkTreeModel *tree_model,
                                                  GtkTreeIter *iter,
                                                  va_list var_args);


void gtk_tree_model_foreach (GtkTreeModel *model,
                                                  GtkTreeModelForeachFunc func,
                                                  gpointer user_data);



void gtk_tree_model_row_changed (GtkTreeModel *tree_model,
                                           GtkTreePath *path,
                                           GtkTreeIter *iter);
void gtk_tree_model_row_inserted (GtkTreeModel *tree_model,
                                           GtkTreePath *path,
                                           GtkTreeIter *iter);
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model,
                                           GtkTreePath *path,
                                           GtkTreeIter *iter);
void gtk_tree_model_row_deleted (GtkTreeModel *tree_model,
                                           GtkTreePath *path);
void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model,
                                           GtkTreePath *path,
                                           GtkTreeIter *iter,
                                           gint *new_order);





# 24 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreesortable.h" 1
# 27 "/usr/include/gtk-2.0/gtk/gtktreesortable.h"








enum {
  GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID = -1
};

typedef struct _GtkTreeSortable GtkTreeSortable;
typedef struct _GtkTreeSortableIface GtkTreeSortableIface;

typedef gint (* GtkTreeIterCompareFunc) (GtkTreeModel *model,
                                         GtkTreeIter *a,
                                         GtkTreeIter *b,
                                         gpointer user_data);


struct _GtkTreeSortableIface
{
  GTypeInterface g_iface;


  void (* sort_column_changed) (GtkTreeSortable *sortable);


  gboolean (* get_sort_column_id) (GtkTreeSortable *sortable,
                                      gint *sort_column_id,
                                      GtkSortType *order);
  void (* set_sort_column_id) (GtkTreeSortable *sortable,
                                      gint sort_column_id,
                                      GtkSortType order);
  void (* set_sort_func) (GtkTreeSortable *sortable,
                                      gint sort_column_id,
                                      GtkTreeIterCompareFunc func,
                                      gpointer data,
                                      GtkDestroyNotify destroy);
  void (* set_default_sort_func) (GtkTreeSortable *sortable,
                                      GtkTreeIterCompareFunc func,
                                      gpointer data,
                                      GtkDestroyNotify destroy);
  gboolean (* has_default_sort_func) (GtkTreeSortable *sortable);
};


GType gtk_tree_sortable_get_type (void) ;

void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);
gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable,
                                                  gint *sort_column_id,
                                                  GtkSortType *order);
void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable,
                                                  gint sort_column_id,
                                                  GtkSortType order);
void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable,
                                                  gint sort_column_id,
                                                  GtkTreeIterCompareFunc sort_func,
                                                  gpointer user_data,
                                                  GtkDestroyNotify destroy);
void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable,
                                                  GtkTreeIterCompareFunc sort_func,
                                                  gpointer user_data,
                                                  GtkDestroyNotify destroy);
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);



# 25 "/usr/include/gtk-2.0/gtk/gtkliststore.h" 2
# 37 "/usr/include/gtk-2.0/gtk/gtkliststore.h"
typedef struct _GtkListStore GtkListStore;
typedef struct _GtkListStoreClass GtkListStoreClass;

struct _GtkListStore
{
  GObject parent;


  gint stamp;
  gpointer root;
  gpointer tail;
  GList *sort_list;
  gint n_columns;
  gint sort_column_id;
  GtkSortType order;
  GType *column_headers;
  gint length;
  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GtkDestroyNotify default_sort_destroy;
  guint columns_dirty : 1;
};

struct _GtkListStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_list_store_get_type (void);
GtkListStore *gtk_list_store_new (gint n_columns,
                                               ...);
GtkListStore *gtk_list_store_newv (gint n_columns,
                                               GType *types);
void gtk_list_store_set_column_types (GtkListStore *list_store,
                                               gint n_columns,
                                               GType *types);



void gtk_list_store_set_value (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               gint column,
                                               GValue *value);
void gtk_list_store_set (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               ...);
void gtk_list_store_set_valist (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               va_list var_args);
gboolean gtk_list_store_remove (GtkListStore *list_store,
                                               GtkTreeIter *iter);
void gtk_list_store_insert (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               gint position);
void gtk_list_store_insert_before (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *sibling);
void gtk_list_store_insert_after (GtkListStore *list_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *sibling);
void gtk_list_store_prepend (GtkListStore *list_store,
                                               GtkTreeIter *iter);
void gtk_list_store_append (GtkListStore *list_store,
                                               GtkTreeIter *iter);
void gtk_list_store_clear (GtkListStore *list_store);
gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store,
                                               GtkTreeIter *iter);
void gtk_list_store_reorder (GtkListStore *store,
                                               gint *new_order);
void gtk_list_store_swap (GtkListStore *store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
void gtk_list_store_move_after (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
void gtk_list_store_move_before (GtkListStore *store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
# 96 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkmain.h" 1
# 60 "/usr/include/gtk-2.0/gtk/gtkmain.h"
typedef void (*GtkModuleInitFunc) (gint *argc,
                                             gchar ***argv);
typedef void (*GtkModuleDisplayInitFunc) (GdkDisplay *display);
typedef gint (*GtkKeySnoopFunc) (GtkWidget *grab_widget,
                                             GdkEventKey *event,
                                             gpointer func_data);
# 79 "/usr/include/gtk-2.0/gtk/gtkmain.h"
extern const guint gtk_major_version;
extern const guint gtk_minor_version;
extern const guint gtk_micro_version;
extern const guint gtk_binary_age;
extern const guint gtk_interface_age;
gchar* gtk_check_version (guint required_major,
                          guint required_minor,
                          guint required_micro);





void gtk_init (int *argc,
                                   char ***argv);

gboolean gtk_init_check (int *argc,
                                   char ***argv);
# 119 "/usr/include/gtk-2.0/gtk/gtkmain.h"
void gtk_exit (gint error_code);


void gtk_disable_setlocale (void);
gchar * gtk_set_locale (void);
PangoLanguage *gtk_get_default_language (void);
gint gtk_events_pending (void);





void gtk_main_do_event (GdkEvent *event);

void gtk_main (void);
guint gtk_main_level (void);
void gtk_main_quit (void);
gboolean gtk_main_iteration (void);

gboolean gtk_main_iteration_do (gboolean blocking);

gboolean gtk_true (void) ;
gboolean gtk_false (void) ;

void gtk_grab_add (GtkWidget *widget);
GtkWidget* gtk_grab_get_current (void);
void gtk_grab_remove (GtkWidget *widget);

void gtk_init_add (GtkFunction function,
                                    gpointer data);
void gtk_quit_add_destroy (guint main_level,
                                    GtkObject *object);
guint gtk_quit_add (guint main_level,
                                    GtkFunction function,
                                    gpointer data);
guint gtk_quit_add_full (guint main_level,
                                    GtkFunction function,
                                    GtkCallbackMarshal marshal,
                                    gpointer data,
                                    GtkDestroyNotify destroy);
void gtk_quit_remove (guint quit_handler_id);
void gtk_quit_remove_by_data (gpointer data);
guint gtk_timeout_add (guint32 interval,
                                    GtkFunction function,
                                    gpointer data);
guint gtk_timeout_add_full (guint32 interval,
                                    GtkFunction function,
                                    GtkCallbackMarshal marshal,
                                    gpointer data,
                                    GtkDestroyNotify destroy);
void gtk_timeout_remove (guint timeout_handler_id);

guint gtk_idle_add (GtkFunction function,
                                    gpointer data);
guint gtk_idle_add_priority (gint priority,
                                    GtkFunction function,
                                    gpointer data);
guint gtk_idle_add_full (gint priority,
                                    GtkFunction function,
                                    GtkCallbackMarshal marshal,
                                    gpointer data,
                                    GtkDestroyNotify destroy);
void gtk_idle_remove (guint idle_handler_id);
void gtk_idle_remove_by_data (gpointer data);
guint gtk_input_add_full (gint source,
                                    GdkInputCondition condition,
                                    GdkInputFunction function,
                                    GtkCallbackMarshal marshal,
                                    gpointer data,
                                    GtkDestroyNotify destroy);
void gtk_input_remove (guint input_handler_id);


guint gtk_key_snooper_install (GtkKeySnoopFunc snooper,
                                    gpointer func_data);
void gtk_key_snooper_remove (guint snooper_handler_id);

GdkEvent* gtk_get_current_event (void);
guint32 gtk_get_current_event_time (void);
gboolean gtk_get_current_event_state (GdkModifierType *state);

GtkWidget* gtk_get_event_widget (GdkEvent *event);




void gtk_propagate_event (GtkWidget *widget,
                                    GdkEvent *event);

gboolean _gtk_boolean_handled_accumulator (GSignalInvocationHint *ihint,
                                   GValue *return_accu,
                                   const GValue *handler_return,
                                   gpointer dummy);

gchar * _gtk_find_module (const gchar *name,
                              const gchar *type);
gchar **_gtk_get_module_path (const gchar *type);
# 97 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkmenubar.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkmenubar.h"
typedef struct _GtkMenuBar GtkMenuBar;
typedef struct _GtkMenuBarClass GtkMenuBarClass;

struct _GtkMenuBar
{
  GtkMenuShell menu_shell;
};

struct _GtkMenuBarClass
{
  GtkMenuShellClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_menu_bar_get_type (void) ;
GtkWidget* gtk_menu_bar_new (void);
# 78 "/usr/include/gtk-2.0/gtk/gtkmenubar.h"
void _gtk_menu_bar_cycle_focus (GtkMenuBar *menubar,
                                GtkDirectionType dir);
# 99 "/usr/include/gtk-2.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h" 1
# 36 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h"
typedef enum
{
  GTK_MESSAGE_INFO,
  GTK_MESSAGE_WARNING,
  GTK_MESSAGE_QUESTION,
  GTK_MESSAGE_ERROR
} GtkMessageType;

typedef enum
{
  GTK_BUTTONS_NONE,
  GTK_BUTTONS_OK,
  GTK_BUTTONS_CLOSE,
  GTK_BUTTONS_CANCEL,
  GTK_BUTTONS_YES_NO,
  GTK_BUTTONS_OK_CANCEL
} GtkButtonsType;
# 62 "/usr/include/gtk-2.0/gtk/gtkmessagedialog.h"
typedef struct _GtkMessageDialog GtkMessageDialog;
typedef struct _GtkMessageDialogClass GtkMessageDialogClass;

struct _GtkMessageDialog
{


  GtkDialog parent_instance;

  GtkWidget *image;
  GtkWidget *label;
};

struct _GtkMessageDialogClass
{
  GtkDialogClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_message_dialog_get_type (void);

GtkWidget* gtk_message_dialog_new (GtkWindow *parent,
                                        GtkDialogFlags flags,
                                        GtkMessageType type,
                                        GtkButtonsType buttons,
                                        const gchar *message_format,
                                        ...) ;
# 102 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtknotebook.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtknotebook.h"
typedef enum
{
  GTK_NOTEBOOK_TAB_FIRST,
  GTK_NOTEBOOK_TAB_LAST
} GtkNotebookTab;

typedef struct _GtkNotebook GtkNotebook;
typedef struct _GtkNotebookClass GtkNotebookClass;
typedef struct _GtkNotebookPage GtkNotebookPage;

struct _GtkNotebook
{
  GtkContainer container;

  GtkNotebookPage *cur_page;
  GList *children;
  GList *first_tab;
  GList *focus_tab;

  GtkWidget *menu;
  GdkWindow *event_window;

  guint32 timer;

  guint16 tab_hborder;
  guint16 tab_vborder;

  guint show_tabs : 1;
  guint homogeneous : 1;
  guint show_border : 1;
  guint tab_pos : 2;
  guint scrollable : 1;
  guint in_child : 2;
  guint click_child : 2;
  guint button : 2;
  guint need_timer : 1;
  guint child_has_focus : 1;
  guint have_visible_child : 1;
  guint focus_out : 1;
};

struct _GtkNotebookClass
{
  GtkContainerClass parent_class;

  void (* switch_page) (GtkNotebook *notebook,
                              GtkNotebookPage *page,
                              guint page_num);


  gboolean (* select_page) (GtkNotebook *notebook,
                                gboolean move_focus);
  gboolean (* focus_tab) (GtkNotebook *notebook,
                                GtkNotebookTab type);
  void (* change_current_page) (GtkNotebook *notebook,
                                gint offset);
  void (* move_focus_out) (GtkNotebook *notebook,
                                GtkDirectionType direction);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};





GType gtk_notebook_get_type (void) ;
GtkWidget * gtk_notebook_new (void);
void gtk_notebook_append_page (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label);
void gtk_notebook_append_page_menu (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label,
                                     GtkWidget *menu_label);
void gtk_notebook_prepend_page (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label);
void gtk_notebook_prepend_page_menu (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label,
                                     GtkWidget *menu_label);
void gtk_notebook_insert_page (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label,
                                     gint position);
void gtk_notebook_insert_page_menu (GtkNotebook *notebook,
                                     GtkWidget *child,
                                     GtkWidget *tab_label,
                                     GtkWidget *menu_label,
                                     gint position);
void gtk_notebook_remove_page (GtkNotebook *notebook,
                                     gint page_num);





gint gtk_notebook_get_current_page (GtkNotebook *notebook);
GtkWidget* gtk_notebook_get_nth_page (GtkNotebook *notebook,
                                          gint page_num);
gint gtk_notebook_get_n_pages (GtkNotebook *notebook);
gint gtk_notebook_page_num (GtkNotebook *notebook,
                                          GtkWidget *child);
void gtk_notebook_set_current_page (GtkNotebook *notebook,
                                          gint page_num);
void gtk_notebook_next_page (GtkNotebook *notebook);
void gtk_notebook_prev_page (GtkNotebook *notebook);





void gtk_notebook_set_show_border (GtkNotebook *notebook,
                                            gboolean show_border);
gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);
void gtk_notebook_set_show_tabs (GtkNotebook *notebook,
                                            gboolean show_tabs);
gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);
void gtk_notebook_set_tab_pos (GtkNotebook *notebook,
                                            GtkPositionType pos);
GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);


void gtk_notebook_set_homogeneous_tabs (GtkNotebook *notebook,
                                            gboolean homogeneous);
void gtk_notebook_set_tab_border (GtkNotebook *notebook,
                                            guint border_width);
void gtk_notebook_set_tab_hborder (GtkNotebook *notebook,
                                            guint tab_hborder);
void gtk_notebook_set_tab_vborder (GtkNotebook *notebook,
                                            guint tab_vborder);


void gtk_notebook_set_scrollable (GtkNotebook *notebook,
                                            gboolean scrollable);
gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);





void gtk_notebook_popup_enable (GtkNotebook *notebook);
void gtk_notebook_popup_disable (GtkNotebook *notebook);





GtkWidget * gtk_notebook_get_tab_label (GtkNotebook *notebook,
                                           GtkWidget *child);
void gtk_notebook_set_tab_label (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           GtkWidget *tab_label);
void gtk_notebook_set_tab_label_text (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           const gchar *tab_text);
const gchar *gtk_notebook_get_tab_label_text (GtkNotebook *notebook,
                                                       GtkWidget *child);
GtkWidget * gtk_notebook_get_menu_label (GtkNotebook *notebook,
                                           GtkWidget *child);
void gtk_notebook_set_menu_label (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           GtkWidget *menu_label);
void gtk_notebook_set_menu_label_text (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           const gchar *menu_text);
const gchar *gtk_notebook_get_menu_label_text (GtkNotebook *notebook,
                                                        GtkWidget *child);
void gtk_notebook_query_tab_label_packing (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           gboolean *expand,
                                           gboolean *fill,
                                           GtkPackType *pack_type);
void gtk_notebook_set_tab_label_packing (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           gboolean expand,
                                           gboolean fill,
                                           GtkPackType pack_type);
void gtk_notebook_reorder_child (GtkNotebook *notebook,
                                           GtkWidget *child,
                                           gint position);
# 104 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkoldeditable.h" 1
# 50 "/usr/include/gtk-2.0/gtk/gtkoldeditable.h"
typedef struct _GtkOldEditable GtkOldEditable;
typedef struct _GtkOldEditableClass GtkOldEditableClass;

typedef void (*GtkTextFunction) (GtkOldEditable *editable, guint32 time_);

struct _GtkOldEditable
{
  GtkWidget widget;


  guint current_pos;

  guint selection_start_pos;
  guint selection_end_pos;
  guint has_selection : 1;


  guint editable : 1;
  guint visible : 1;

  gchar *clipboard_text;
};

struct _GtkOldEditableClass
{
  GtkWidgetClass parent_class;


  void (* activate) (GtkOldEditable *editable);
  void (* set_editable) (GtkOldEditable *editable,
                            gboolean is_editable);
  void (* move_cursor) (GtkOldEditable *editable,
                            gint x,
                            gint y);
  void (* move_word) (GtkOldEditable *editable,
                            gint n);
  void (* move_page) (GtkOldEditable *editable,
                            gint x,
                            gint y);
  void (* move_to_row) (GtkOldEditable *editable,
                            gint row);
  void (* move_to_column) (GtkOldEditable *editable,
                            gint row);
  void (* kill_char) (GtkOldEditable *editable,
                            gint direction);
  void (* kill_word) (GtkOldEditable *editable,
                            gint direction);
  void (* kill_line) (GtkOldEditable *editable,
                            gint direction);
  void (* cut_clipboard) (GtkOldEditable *editable);
  void (* copy_clipboard) (GtkOldEditable *editable);
  void (* paste_clipboard) (GtkOldEditable *editable);






  void (* update_text) (GtkOldEditable *editable,
                         gint start_pos,
                         gint end_pos);
  gchar* (* get_chars) (GtkOldEditable *editable,
                         gint start_pos,
                         gint end_pos);
  void (* set_selection)(GtkOldEditable *editable,
                         gint start_pos,
                         gint end_pos);
  void (* set_position) (GtkOldEditable *editable,
                         gint position);
};

GtkType gtk_old_editable_get_type (void) ;
void gtk_old_editable_claim_selection (GtkOldEditable *old_editable,
                                             gboolean claim,
                                             guint32 time_);
void gtk_old_editable_changed (GtkOldEditable *old_editable);
# 106 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkoptionmenu.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkoptionmenu.h"
typedef struct _GtkOptionMenu GtkOptionMenu;
typedef struct _GtkOptionMenuClass GtkOptionMenuClass;

struct _GtkOptionMenu
{
  GtkButton button;

  GtkWidget *menu;
  GtkWidget *menu_item;

  guint16 width;
  guint16 height;
};

struct _GtkOptionMenuClass
{
  GtkButtonClass parent_class;

  void (*changed) (GtkOptionMenu *option_menu);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_option_menu_get_type (void) ;
GtkWidget* gtk_option_menu_new (void);
GtkWidget* gtk_option_menu_get_menu (GtkOptionMenu *option_menu);
void gtk_option_menu_set_menu (GtkOptionMenu *option_menu,
                                        GtkWidget *menu);
void gtk_option_menu_remove_menu (GtkOptionMenu *option_menu);
gint gtk_option_menu_get_history (GtkOptionMenu *option_menu);
void gtk_option_menu_set_history (GtkOptionMenu *option_menu,
                                        guint index_);
# 107 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkpixmap.h" 1
# 50 "/usr/include/gtk-2.0/gtk/gtkpixmap.h"
typedef struct _GtkPixmap GtkPixmap;
typedef struct _GtkPixmapClass GtkPixmapClass;

struct _GtkPixmap
{
  GtkMisc misc;

  GdkPixmap *pixmap;
  GdkBitmap *mask;

  GdkPixmap *pixmap_insensitive;
  guint build_insensitive : 1;
};

struct _GtkPixmapClass
{
  GtkMiscClass parent_class;
};


GtkType gtk_pixmap_get_type (void) ;
GtkWidget* gtk_pixmap_new (GdkPixmap *pixmap,
                                  GdkBitmap *mask);
void gtk_pixmap_set (GtkPixmap *pixmap,
                                  GdkPixmap *val,
                                  GdkBitmap *mask);
void gtk_pixmap_get (GtkPixmap *pixmap,
                                  GdkPixmap **val,
                                  GdkBitmap **mask);

void gtk_pixmap_set_build_insensitive (GtkPixmap *pixmap,
                                             gboolean build);
# 109 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkplug.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtkplug.h"
# 1 "/usr/include/gtk-2.0/gtk/gtksocket.h" 1
# 44 "/usr/include/gtk-2.0/gtk/gtksocket.h"
typedef struct _GtkSocket GtkSocket;
typedef struct _GtkSocketClass GtkSocketClass;

struct _GtkSocket
{
  GtkContainer container;

  guint16 request_width;
  guint16 request_height;
  guint16 current_width;
  guint16 current_height;

  GdkWindow *plug_window;
  GtkWidget *plug_widget;

  gshort xembed_version;
  guint same_app : 1;
  guint focus_in : 1;
  guint have_size : 1;
  guint need_map : 1;
  guint is_mapped : 1;
  guint active : 1;

  GtkAccelGroup *accel_group;
  GtkWidget *toplevel;
};

struct _GtkSocketClass
{
  GtkContainerClass parent_class;

  void (*plug_added) (GtkSocket *socket_);
  gboolean (*plug_removed) (GtkSocket *socket_);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_socket_get_type (void) ;
GtkWidget* gtk_socket_new (void);

void gtk_socket_add_id (GtkSocket *socket_,
                                   GdkNativeWindow window_id);
GdkNativeWindow gtk_socket_get_id (GtkSocket *socket_);


void gtk_socket_steal (GtkSocket *socket_,
                                    GdkNativeWindow wid);
# 32 "/usr/include/gtk-2.0/gtk/gtkplug.h" 2
# 48 "/usr/include/gtk-2.0/gtk/gtkplug.h"
typedef struct _GtkPlug GtkPlug;
typedef struct _GtkPlugClass GtkPlugClass;


struct _GtkPlug
{
  GtkWindow window;

  GdkWindow *socket_window;
  GtkWidget *modality_window;
  GtkWindowGroup *modality_group;
  GHashTable *grabbed_keys;

  guint same_app : 1;
};

struct _GtkPlugClass
{
  GtkWindowClass parent_class;

  void (*embedded) (GtkPlug *plug);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_plug_get_type (void) ;


void gtk_plug_construct (GtkPlug *plug,
                               GdkNativeWindow socket_id);
GtkWidget* gtk_plug_new (GdkNativeWindow socket_id);


void gtk_plug_construct_for_display (GtkPlug *plug,
                                           GdkDisplay *display,
                                           GdkNativeWindow socket_id);
GtkWidget* gtk_plug_new_for_display (GdkDisplay *display,
                                           GdkNativeWindow socket_id);

GdkNativeWindow gtk_plug_get_id (GtkPlug *plug);

void _gtk_plug_add_to_socket (GtkPlug *plug,
                                   GtkSocket *socket_);
void _gtk_plug_remove_from_socket (GtkPlug *plug,
                                   GtkSocket *socket_);
# 110 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkpreview.h" 1
# 49 "/usr/include/gtk-2.0/gtk/gtkpreview.h"
typedef struct _GtkPreview GtkPreview;
typedef struct _GtkPreviewInfo GtkPreviewInfo;
typedef union _GtkDitherInfo GtkDitherInfo;
typedef struct _GtkPreviewClass GtkPreviewClass;

struct _GtkPreview
{
  GtkWidget widget;

  guchar *buffer;
  guint16 buffer_width;
  guint16 buffer_height;

  guint16 bpp;
  guint16 rowstride;

  GdkRgbDither dither;

  guint type : 1;
  guint expand : 1;
};

struct _GtkPreviewInfo
{
  guchar *lookup;

  gdouble gamma;
};

union _GtkDitherInfo
{
  gushort s[2];
  guchar c[4];
};

struct _GtkPreviewClass
{
  GtkWidgetClass parent_class;

  GtkPreviewInfo info;

};


GtkType gtk_preview_get_type (void) ;
void gtk_preview_uninit (void);
GtkWidget* gtk_preview_new (GtkPreviewType type);
void gtk_preview_size (GtkPreview *preview,
                                                gint width,
                                                gint height);
void gtk_preview_put (GtkPreview *preview,
                                                GdkWindow *window,
                                                GdkGC *gc,
                                                gint srcx,
                                                gint srcy,
                                                gint destx,
                                                gint desty,
                                                gint width,
                                                gint height);
void gtk_preview_draw_row (GtkPreview *preview,
                                                guchar *data,
                                                gint x,
                                                gint y,
                                                gint w);
void gtk_preview_set_expand (GtkPreview *preview,
                                                gboolean expand);

void gtk_preview_set_gamma (double gamma_);
void gtk_preview_set_color_cube (guint nred_shades,
                                                guint ngreen_shades,
                                                guint nblue_shades,
                                                guint ngray_shades);
void gtk_preview_set_install_cmap (gint install_cmap);
void gtk_preview_set_reserved (gint nreserved);
void gtk_preview_set_dither (GtkPreview *preview,
                                                GdkRgbDither dither);

GdkVisual* gtk_preview_get_visual (void);
GdkColormap* gtk_preview_get_cmap (void);

GtkPreviewInfo* gtk_preview_get_info (void);






void gtk_preview_reset (void);
# 111 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprogress.h" 1
# 51 "/usr/include/gtk-2.0/gtk/gtkprogress.h"
typedef struct _GtkProgress GtkProgress;
typedef struct _GtkProgressClass GtkProgressClass;


struct _GtkProgress
{
  GtkWidget widget;

  GtkAdjustment *adjustment;
  GdkPixmap *offscreen_pixmap;
  gchar *format;
  gfloat x_align;
  gfloat y_align;

  guint show_text : 1;
  guint activity_mode : 1;
  guint use_text_format : 1;
};

struct _GtkProgressClass
{
  GtkWidgetClass parent_class;

  void (* paint) (GtkProgress *progress);
  void (* update) (GtkProgress *progress);
  void (* act_mode_enter) (GtkProgress *progress);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};







GType gtk_progress_get_type (void) ;
void gtk_progress_set_show_text (GtkProgress *progress,
                                             gboolean show_text);
void gtk_progress_set_text_alignment (GtkProgress *progress,
                                             gfloat x_align,
                                             gfloat y_align);
void gtk_progress_set_format_string (GtkProgress *progress,
                                             const gchar *format);
void gtk_progress_set_adjustment (GtkProgress *progress,
                                             GtkAdjustment *adjustment);
void gtk_progress_configure (GtkProgress *progress,
                                             gdouble value,
                                             gdouble min,
                                             gdouble max);
void gtk_progress_set_percentage (GtkProgress *progress,
                                             gdouble percentage);
void gtk_progress_set_value (GtkProgress *progress,
                                             gdouble value);
gdouble gtk_progress_get_value (GtkProgress *progress);
void gtk_progress_set_activity_mode (GtkProgress *progress,
                                             gboolean activity_mode);
gchar* gtk_progress_get_current_text (GtkProgress *progress);
gchar* gtk_progress_get_text_from_value (GtkProgress *progress,
                                             gdouble value);
gdouble gtk_progress_get_current_percentage (GtkProgress *progress);
gdouble gtk_progress_get_percentage_from_value (GtkProgress *progress,
                                                   gdouble value);
# 112 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h"
typedef struct _GtkProgressBar GtkProgressBar;
typedef struct _GtkProgressBarClass GtkProgressBarClass;

typedef enum
{
  GTK_PROGRESS_CONTINUOUS,
  GTK_PROGRESS_DISCRETE
} GtkProgressBarStyle;

typedef enum
{
  GTK_PROGRESS_LEFT_TO_RIGHT,
  GTK_PROGRESS_RIGHT_TO_LEFT,
  GTK_PROGRESS_BOTTOM_TO_TOP,
  GTK_PROGRESS_TOP_TO_BOTTOM
} GtkProgressBarOrientation;

struct _GtkProgressBar
{
  GtkProgress progress;

  GtkProgressBarStyle bar_style;
  GtkProgressBarOrientation orientation;

  guint blocks;
  gint in_block;

  gint activity_pos;
  guint activity_step;
  guint activity_blocks;

  gdouble pulse_fraction;

  guint activity_dir : 1;
};

struct _GtkProgressBarClass
{
  GtkProgressClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_progress_bar_get_type (void) ;
GtkWidget* gtk_progress_bar_new (void);
# 126 "/usr/include/gtk-2.0/gtk/gtkprogressbar.h"
void gtk_progress_bar_pulse (GtkProgressBar *pbar);
void gtk_progress_bar_set_text (GtkProgressBar *pbar,
                                                  const gchar *text);
void gtk_progress_bar_set_fraction (GtkProgressBar *pbar,
                                                  gdouble fraction);

void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar,
                                                  gdouble fraction);
void gtk_progress_bar_set_orientation (GtkProgressBar *pbar,
                                                  GtkProgressBarOrientation orientation);

const gchar* gtk_progress_bar_get_text (GtkProgressBar *pbar);
gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);
gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);

GtkProgressBarOrientation gtk_progress_bar_get_orientation (GtkProgressBar *pbar);





GtkWidget* gtk_progress_bar_new_with_adjustment (GtkAdjustment *adjustment);
void gtk_progress_bar_set_bar_style (GtkProgressBar *pbar,
                                                  GtkProgressBarStyle style);
void gtk_progress_bar_set_discrete_blocks (GtkProgressBar *pbar,
                                                  guint blocks);




void gtk_progress_bar_set_activity_step (GtkProgressBar *pbar,
                                                  guint step);
void gtk_progress_bar_set_activity_blocks (GtkProgressBar *pbar,
                                                  guint blocks);
void gtk_progress_bar_update (GtkProgressBar *pbar,
                                                  gdouble percentage);
# 113 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkradiobutton.h"
typedef struct _GtkRadioButton GtkRadioButton;
typedef struct _GtkRadioButtonClass GtkRadioButtonClass;

struct _GtkRadioButton
{
  GtkCheckButton check_button;

  GSList *group;
};

struct _GtkRadioButtonClass
{
  GtkCheckButtonClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_radio_button_get_type (void) ;

GtkWidget* gtk_radio_button_new (GSList *group);
GtkWidget* gtk_radio_button_new_from_widget (GtkRadioButton *group);
GtkWidget* gtk_radio_button_new_with_label (GSList *group,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_label_from_widget (GtkRadioButton *group,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_mnemonic (GSList *group,
                                                           const gchar *label);
GtkWidget* gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *group,
                                                           const gchar *label);
GSList* gtk_radio_button_get_group (GtkRadioButton *radio_button);
void gtk_radio_button_set_group (GtkRadioButton *radio_button,
                                                           GSList *group);
# 114 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkradiomenuitem.h"
typedef struct _GtkRadioMenuItem GtkRadioMenuItem;
typedef struct _GtkRadioMenuItemClass GtkRadioMenuItemClass;

struct _GtkRadioMenuItem
{
  GtkCheckMenuItem check_menu_item;

  GSList *group;
};

struct _GtkRadioMenuItemClass
{
  GtkCheckMenuItemClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_radio_menu_item_get_type (void) ;
GtkWidget* gtk_radio_menu_item_new (GSList *group);
GtkWidget* gtk_radio_menu_item_new_with_label (GSList *group,
                                                  const gchar *label);
GtkWidget* gtk_radio_menu_item_new_with_mnemonic (GSList *group,
                                                  const gchar *label);
GSList* gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);
void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item,
                                                  GSList *group);
# 115 "/usr/include/gtk-2.0/gtk/gtk.h" 2





# 1 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 1
# 34 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
# 1 "/usr/include/gtk-2.0/gtk/gtkviewport.h" 1
# 49 "/usr/include/gtk-2.0/gtk/gtkviewport.h"
typedef struct _GtkViewport GtkViewport;
typedef struct _GtkViewportClass GtkViewportClass;

struct _GtkViewport
{
  GtkBin bin;

  GtkShadowType shadow_type;
  GdkWindow *view_window;
  GdkWindow *bin_window;
  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;
};

struct _GtkViewportClass
{
  GtkBinClass parent_class;

  void (*set_scroll_adjustments) (GtkViewport *viewport,
                                         GtkAdjustment *hadjustment,
                                         GtkAdjustment *vadjustment);
};


GType gtk_viewport_get_type (void) ;
GtkWidget* gtk_viewport_new (GtkAdjustment *hadjustment,
                                             GtkAdjustment *vadjustment);
GtkAdjustment* gtk_viewport_get_hadjustment (GtkViewport *viewport);
GtkAdjustment* gtk_viewport_get_vadjustment (GtkViewport *viewport);
void gtk_viewport_set_hadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);
void gtk_viewport_set_vadjustment (GtkViewport *viewport,
                                             GtkAdjustment *adjustment);
void gtk_viewport_set_shadow_type (GtkViewport *viewport,
                                             GtkShadowType type);
GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);
# 35 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h" 2
# 51 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
typedef struct _GtkScrolledWindow GtkScrolledWindow;
typedef struct _GtkScrolledWindowClass GtkScrolledWindowClass;

struct _GtkScrolledWindow
{
  GtkBin container;

  GtkWidget *hscrollbar;
  GtkWidget *vscrollbar;

  guint hscrollbar_policy : 2;
  guint vscrollbar_policy : 2;
  guint hscrollbar_visible : 1;
  guint vscrollbar_visible : 1;
  guint window_placement : 2;
  guint focus_out : 1;

  guint16 shadow_type;
};

struct _GtkScrolledWindowClass
{
  GtkBinClass parent_class;

  gint scrollbar_spacing;
# 84 "/usr/include/gtk-2.0/gtk/gtkscrolledwindow.h"
  void (*scroll_child) (GtkScrolledWindow *scrolled_window,
                        GtkScrollType scroll,
                        gboolean horizontal);

  void (* move_focus_out) (GtkScrolledWindow *scrolled_window,
                           GtkDirectionType direction);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_scrolled_window_get_type (void) ;
GtkWidget* gtk_scrolled_window_new (GtkAdjustment *hadjustment,
                                                      GtkAdjustment *vadjustment);
void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window,
                                                      GtkAdjustment *hadjustment);
void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window,
                                                      GtkAdjustment *hadjustment);
GtkAdjustment* gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);
GtkAdjustment* gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window,
                                                      GtkPolicyType hscrollbar_policy,
                                                      GtkPolicyType vscrollbar_policy);
void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window,
                                                      GtkPolicyType *hscrollbar_policy,
                                                      GtkPolicyType *vscrollbar_policy);
void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window,
                                                      GtkCornerType window_placement);
GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window,
                                                      GtkShadowType type);
GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);
void gtk_scrolled_window_add_with_viewport (GtkScrolledWindow *scrolled_window,
                                                      GtkWidget *child);

gint _gtk_scrolled_window_get_scrollbar_spacing (GtkScrolledWindow *scrolled_window);
# 121 "/usr/include/gtk-2.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h" 1
# 47 "/usr/include/gtk-2.0/gtk/gtkseparatormenuitem.h"
typedef struct _GtkSeparatorMenuItem GtkSeparatorMenuItem;
typedef struct _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;

struct _GtkSeparatorMenuItem
{
  GtkMenuItem menu_item;
};

struct _GtkSeparatorMenuItemClass
{
  GtkMenuItemClass parent_class;
};


GType gtk_separator_menu_item_get_type (void) ;
GtkWidget* gtk_separator_menu_item_new (void);
# 124 "/usr/include/gtk-2.0/gtk/gtk.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtksizegroup.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtksizegroup.h"
typedef struct _GtkSizeGroup GtkSizeGroup;
typedef struct _GtkSizeGroupClass GtkSizeGroupClass;

struct _GtkSizeGroup
{
  GObject parent_instance;

  GSList *widgets;

  guint8 mode;

  guint have_width : 1;
  guint have_height : 1;

  GtkRequisition requisition;
};

struct _GtkSizeGroupClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};
# 76 "/usr/include/gtk-2.0/gtk/gtksizegroup.h"
typedef enum {
  GTK_SIZE_GROUP_NONE,
  GTK_SIZE_GROUP_HORIZONTAL,
  GTK_SIZE_GROUP_VERTICAL,
  GTK_SIZE_GROUP_BOTH
} GtkSizeGroupMode;

GType gtk_size_group_get_type (void) ;

GtkSizeGroup * gtk_size_group_new (GtkSizeGroupMode mode);
void gtk_size_group_set_mode (GtkSizeGroup *size_group,
                                               GtkSizeGroupMode mode);
GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);
void gtk_size_group_add_widget (GtkSizeGroup *size_group,
                                               GtkWidget *widget);
void gtk_size_group_remove_widget (GtkSizeGroup *size_group,
                                               GtkWidget *widget);


void _gtk_size_group_get_child_requisition (GtkWidget *widget,
                                            GtkRequisition *requisition);
void _gtk_size_group_compute_requisition (GtkWidget *widget,
                                            GtkRequisition *requisition);
void _gtk_size_group_queue_resize (GtkWidget *widget);
# 127 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h" 1
# 53 "/usr/include/gtk-2.0/gtk/gtkspinbutton.h"
typedef enum
{
  GTK_UPDATE_ALWAYS,
  GTK_UPDATE_IF_VALID
} GtkSpinButtonUpdatePolicy;

typedef enum
{
  GTK_SPIN_STEP_FORWARD,
  GTK_SPIN_STEP_BACKWARD,
  GTK_SPIN_PAGE_FORWARD,
  GTK_SPIN_PAGE_BACKWARD,
  GTK_SPIN_HOME,
  GTK_SPIN_END,
  GTK_SPIN_USER_DEFINED
} GtkSpinType;


typedef struct _GtkSpinButton GtkSpinButton;
typedef struct _GtkSpinButtonClass GtkSpinButtonClass;


struct _GtkSpinButton
{
  GtkEntry entry;

  GtkAdjustment *adjustment;

  GdkWindow *panel;

  guint32 timer;

  gdouble climb_rate;
  gdouble timer_step;

  GtkSpinButtonUpdatePolicy update_policy;

  guint in_child : 2;
  guint click_child : 2;
  guint button : 2;
  guint need_timer : 1;
  guint timer_calls : 3;
  guint digits : 10;
  guint numeric : 1;
  guint wrap : 1;
  guint snap_to_ticks : 1;
};

struct _GtkSpinButtonClass
{
  GtkEntryClass parent_class;

  gint (*input) (GtkSpinButton *spin_button,
                  gdouble *new_value);
  gint (*output) (GtkSpinButton *spin_button);
  void (*value_changed) (GtkSpinButton *spin_button);


  void (*change_value) (GtkSpinButton *spin_button,
                        GtkScrollType scroll);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_spin_button_get_type (void) ;

void gtk_spin_button_configure (GtkSpinButton *spin_button,
                                                    GtkAdjustment *adjustment,
                                                    gdouble climb_rate,
                                                    guint digits);

GtkWidget* gtk_spin_button_new (GtkAdjustment *adjustment,
                                                    gdouble climb_rate,
                                                    guint digits);

GtkWidget* gtk_spin_button_new_with_range (gdouble min,
                                                    gdouble max,
                                                    gdouble step);

void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button,
                                                    GtkAdjustment *adjustment);

GtkAdjustment* gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);

void gtk_spin_button_set_digits (GtkSpinButton *spin_button,
                                                    guint digits);
guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);

void gtk_spin_button_set_increments (GtkSpinButton *spin_button,
                                                    gdouble step,
                                                    gdouble page);
void gtk_spin_button_get_increments (GtkSpinButton *spin_button,
                                                    gdouble *step,
                                                    gdouble *page);

void gtk_spin_button_set_range (GtkSpinButton *spin_button,
                                                    gdouble min,
                                                    gdouble max);
void gtk_spin_button_get_range (GtkSpinButton *spin_button,
                                                    gdouble *min,
                                                    gdouble *max);

gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);

gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);

void gtk_spin_button_set_value (GtkSpinButton *spin_button,
                                                    gdouble value);

void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button,
                                                    GtkSpinButtonUpdatePolicy policy);
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);

void gtk_spin_button_set_numeric (GtkSpinButton *spin_button,
                                                    gboolean numeric);
gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);

void gtk_spin_button_spin (GtkSpinButton *spin_button,
                                                    GtkSpinType direction,
                                                    gdouble increment);

void gtk_spin_button_set_wrap (GtkSpinButton *spin_button,
                                                    gboolean wrap);
gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);

void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button,
                                                    gboolean snap_to_ticks);
gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);
void gtk_spin_button_update (GtkSpinButton *spin_button);
# 129 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkstock.h" 1
# 37 "/usr/include/gtk-2.0/gtk/gtkstock.h"
typedef struct _GtkStockItem GtkStockItem;

struct _GtkStockItem
{
  gchar *stock_id;
  gchar *label;
  GdkModifierType modifier;
  guint keyval;
  gchar *translation_domain;
};

void gtk_stock_add (const GtkStockItem *items,
                               guint n_items);
void gtk_stock_add_static (const GtkStockItem *items,
                               guint n_items);
gboolean gtk_stock_lookup (const gchar *stock_id,
                               GtkStockItem *item);




GSList* gtk_stock_list_ids (void);

GtkStockItem *gtk_stock_item_copy (const GtkStockItem *item);
void gtk_stock_item_free (GtkStockItem *item);
# 130 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtkstatusbar.h"
typedef struct _GtkStatusbar GtkStatusbar;
typedef struct _GtkStatusbarClass GtkStatusbarClass;

struct _GtkStatusbar
{
  GtkHBox parent_widget;

  GtkWidget *frame;
  GtkWidget *label;

  GSList *messages;
  GSList *keys;

  guint seq_context_id;
  guint seq_message_id;

  GdkWindow *grip_window;

  guint has_resize_grip : 1;
};

struct _GtkStatusbarClass
{
  GtkHBoxClass parent_class;

  GMemChunk *messages_mem_chunk;

  void (*text_pushed) (GtkStatusbar *statusbar,
                         guint context_id,
                         const gchar *text);
  void (*text_popped) (GtkStatusbar *statusbar,
                         guint context_id,
                         const gchar *text);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_statusbar_get_type (void) ;
GtkWidget* gtk_statusbar_new (void);



guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar,
                                         const gchar *context_description);

guint gtk_statusbar_push (GtkStatusbar *statusbar,
                                         guint context_id,
                                         const gchar *text);
void gtk_statusbar_pop (GtkStatusbar *statusbar,
                                         guint context_id);
void gtk_statusbar_remove (GtkStatusbar *statusbar,
                                         guint context_id,
                                         guint message_id);

void gtk_statusbar_set_has_resize_grip (GtkStatusbar *statusbar,
                                            gboolean setting);
gboolean gtk_statusbar_get_has_resize_grip (GtkStatusbar *statusbar);
# 132 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktable.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtktable.h"
typedef struct _GtkTable GtkTable;
typedef struct _GtkTableClass GtkTableClass;
typedef struct _GtkTableChild GtkTableChild;
typedef struct _GtkTableRowCol GtkTableRowCol;

struct _GtkTable
{
  GtkContainer container;

  GList *children;
  GtkTableRowCol *rows;
  GtkTableRowCol *cols;
  guint16 nrows;
  guint16 ncols;
  guint16 column_spacing;
  guint16 row_spacing;
  guint homogeneous : 1;
};

struct _GtkTableClass
{
  GtkContainerClass parent_class;
};

struct _GtkTableChild
{
  GtkWidget *widget;
  guint16 left_attach;
  guint16 right_attach;
  guint16 top_attach;
  guint16 bottom_attach;
  guint16 xpadding;
  guint16 ypadding;
  guint xexpand : 1;
  guint yexpand : 1;
  guint xshrink : 1;
  guint yshrink : 1;
  guint xfill : 1;
  guint yfill : 1;
};

struct _GtkTableRowCol
{
  guint16 requisition;
  guint16 allocation;
  guint16 spacing;
  guint need_expand : 1;
  guint need_shrink : 1;
  guint expand : 1;
  guint shrink : 1;
  guint empty : 1;
};


GType gtk_table_get_type (void) ;
GtkWidget* gtk_table_new (guint rows,
                                       guint columns,
                                       gboolean homogeneous);
void gtk_table_resize (GtkTable *table,
                                       guint rows,
                                       guint columns);
void gtk_table_attach (GtkTable *table,
                                       GtkWidget *child,
                                       guint left_attach,
                                       guint right_attach,
                                       guint top_attach,
                                       guint bottom_attach,
                                       GtkAttachOptions xoptions,
                                       GtkAttachOptions yoptions,
                                       guint xpadding,
                                       guint ypadding);
void gtk_table_attach_defaults (GtkTable *table,
                                       GtkWidget *widget,
                                       guint left_attach,
                                       guint right_attach,
                                       guint top_attach,
                                       guint bottom_attach);
void gtk_table_set_row_spacing (GtkTable *table,
                                       guint row,
                                       guint spacing);
guint gtk_table_get_row_spacing (GtkTable *table,
                                       guint row);
void gtk_table_set_col_spacing (GtkTable *table,
                                       guint column,
                                       guint spacing);
guint gtk_table_get_col_spacing (GtkTable *table,
                                       guint column);
void gtk_table_set_row_spacings (GtkTable *table,
                                       guint spacing);
guint gtk_table_get_default_row_spacing (GtkTable *table);
void gtk_table_set_col_spacings (GtkTable *table,
                                       guint spacing);
guint gtk_table_get_default_col_spacing (GtkTable *table);
void gtk_table_set_homogeneous (GtkTable *table,
                                       gboolean homogeneous);
gboolean gtk_table_get_homogeneous (GtkTable *table);
# 133 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtktearoffmenuitem.h"
typedef struct _GtkTearoffMenuItem GtkTearoffMenuItem;
typedef struct _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;

struct _GtkTearoffMenuItem
{
  GtkMenuItem menu_item;

  guint torn_off : 1;
};

struct _GtkTearoffMenuItemClass
{
  GtkMenuItemClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tearoff_menu_item_get_type (void) ;
GtkWidget* gtk_tearoff_menu_item_new (void);
# 134 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktext.h" 1
# 135 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 1
# 32 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h" 1



# 1 "/usr/include/gtk-2.0/gtk/gtktexttag.h" 1
# 15 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
typedef struct _GtkTextIter GtkTextIter;
typedef struct _GtkTextTagTable GtkTextTagTable;

typedef struct _GtkTextAttributes GtkTextAttributes;
# 29 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
typedef struct _GtkTextTag GtkTextTag;
typedef struct _GtkTextTagClass GtkTextTagClass;

struct _GtkTextTag
{
  GObject parent_instance;

  GtkTextTagTable *table;

  char *name;



  int priority;
# 54 "/usr/include/gtk-2.0/gtk/gtktexttag.h"
  GtkTextAttributes *values;




  guint bg_color_set : 1;
  guint bg_stipple_set : 1;
  guint fg_color_set : 1;
  guint scale_set : 1;
  guint fg_stipple_set : 1;
  guint justification_set : 1;
  guint left_margin_set : 1;
  guint indent_set : 1;
  guint rise_set : 1;
  guint strikethrough_set : 1;
  guint right_margin_set : 1;
  guint pixels_above_lines_set : 1;
  guint pixels_below_lines_set : 1;
  guint pixels_inside_wrap_set : 1;
  guint tabs_set : 1;
  guint underline_set : 1;
  guint wrap_mode_set : 1;
  guint bg_full_height_set : 1;
  guint invisible_set : 1;
  guint editable_set : 1;
  guint language_set : 1;
  guint pad1 : 1;
  guint pad2 : 1;
  guint pad3 : 1;
};

struct _GtkTextTagClass
{
  GObjectClass parent_class;

  gboolean (* event) (GtkTextTag *tag,
                      GObject *event_object,
                      GdkEvent *event,
                      const GtkTextIter *iter);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_tag_get_type (void) ;
GtkTextTag *gtk_text_tag_new (const gchar *name);
gint gtk_text_tag_get_priority (GtkTextTag *tag);
void gtk_text_tag_set_priority (GtkTextTag *tag,
                                        gint priority);
gboolean gtk_text_tag_event (GtkTextTag *tag,
                                        GObject *event_object,
                                        GdkEvent *event,
                                        const GtkTextIter *iter);





typedef struct _GtkTextAppearance GtkTextAppearance;

struct _GtkTextAppearance
{

  GdkColor bg_color;
  GdkColor fg_color;
  GdkBitmap *bg_stipple;
  GdkBitmap *fg_stipple;


  gint rise;





  gpointer padding1;


  guint underline : 4;
  guint strikethrough : 1;






  guint draw_bg : 1;





  guint inside_selection : 1;
  guint is_text : 1;


  guint pad1 : 1;
  guint pad2 : 1;
  guint pad3 : 1;
  guint pad4 : 1;
};

struct _GtkTextAttributes
{

  guint refcount;


  GtkTextAppearance appearance;

  GtkJustification justification;
  GtkTextDirection direction;


  PangoFontDescription *font;

  gdouble font_scale;

  gint left_margin;

  gint indent;

  gint right_margin;

  gint pixels_above_lines;

  gint pixels_below_lines;

  gint pixels_inside_wrap;

  PangoTabArray *tabs;

  GtkWrapMode wrap_mode;




  PangoLanguage *language;





  gpointer padding1;



  guint invisible : 1;




  guint bg_full_height : 1;


  guint editable : 1;


  guint realized : 1;


  guint pad1 : 1;
  guint pad2 : 1;
  guint pad3 : 1;
  guint pad4 : 1;
};

GtkTextAttributes* gtk_text_attributes_new (void);
GtkTextAttributes* gtk_text_attributes_copy (GtkTextAttributes *src);
void gtk_text_attributes_copy_values (GtkTextAttributes *src,
                                                    GtkTextAttributes *dest);
void gtk_text_attributes_unref (GtkTextAttributes *values);
void gtk_text_attributes_ref (GtkTextAttributes *values);

GType gtk_text_attributes_get_type (void);
# 5 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h" 2







typedef void (* GtkTextTagTableForeach) (GtkTextTag *tag, gpointer data);
# 21 "/usr/include/gtk-2.0/gtk/gtktexttagtable.h"
typedef struct _GtkTextTagTableClass GtkTextTagTableClass;

struct _GtkTextTagTable
{
  GObject parent_instance;

  GHashTable *hash;
  GSList *anonymous;
  gint anon_count;

  GSList *buffers;
};

struct _GtkTextTagTableClass
{
  GObjectClass parent_class;

  void (* tag_changed) (GtkTextTagTable *table, GtkTextTag *tag, gboolean size_changed);
  void (* tag_added) (GtkTextTagTable *table, GtkTextTag *tag);
  void (* tag_removed) (GtkTextTagTable *table, GtkTextTag *tag);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_tag_table_get_type (void) ;

GtkTextTagTable *gtk_text_tag_table_new (void);
void gtk_text_tag_table_add (GtkTextTagTable *table,
                                              GtkTextTag *tag);
void gtk_text_tag_table_remove (GtkTextTagTable *table,
                                              GtkTextTag *tag);
GtkTextTag *gtk_text_tag_table_lookup (GtkTextTagTable *table,
                                              const gchar *name);
void gtk_text_tag_table_foreach (GtkTextTagTable *table,
                                              GtkTextTagTableForeach func,
                                              gpointer data);
gint gtk_text_tag_table_get_size (GtkTextTagTable *table);





void _gtk_text_tag_table_add_buffer (GtkTextTagTable *table,
                                        gpointer buffer);
void _gtk_text_tag_table_remove_buffer (GtkTextTagTable *table,
                                        gpointer buffer);
# 33 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 1
# 31 "/usr/include/gtk-2.0/gtk/gtktextiter.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktextchild.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtktextchild.h"
typedef struct _GtkTextChildAnchor GtkTextChildAnchor;
typedef struct _GtkTextChildAnchorClass GtkTextChildAnchorClass;
# 52 "/usr/include/gtk-2.0/gtk/gtktextchild.h"
struct _GtkTextChildAnchor
{
  GObject parent_instance;

  gpointer segment;
};

struct _GtkTextChildAnchorClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_child_anchor_get_type (void) ;

GtkTextChildAnchor* gtk_text_child_anchor_new (void);

GList* gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);
gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);
# 32 "/usr/include/gtk-2.0/gtk/gtktextiter.h" 2





typedef enum {
  GTK_TEXT_SEARCH_VISIBLE_ONLY,
  GTK_TEXT_SEARCH_TEXT_ONLY

} GtkTextSearchFlags;







typedef struct _GtkTextBuffer GtkTextBuffer;



struct _GtkTextIter {





  gpointer dummy1;
  gpointer dummy2;
  gint dummy3;
  gint dummy4;
  gint dummy5;
  gint dummy6;
  gint dummy7;
  gint dummy8;
  gpointer dummy9;
  gpointer dummy10;
  gint dummy11;
  gint dummy12;

  gint dummy13;
  gpointer dummy14;
};




GtkTextBuffer *gtk_text_iter_get_buffer (const GtkTextIter *iter);





GtkTextIter *gtk_text_iter_copy (const GtkTextIter *iter);
void gtk_text_iter_free (GtkTextIter *iter);

GType gtk_text_iter_get_type (void);





gint gtk_text_iter_get_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_line (const GtkTextIter *iter);
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_line_index (const GtkTextIter *iter);

gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);





gunichar gtk_text_iter_get_char (const GtkTextIter *iter);




gchar *gtk_text_iter_get_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);


gchar *gtk_text_iter_get_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

gchar *gtk_text_iter_get_visible_slice (const GtkTextIter *start,
                                          const GtkTextIter *end);
gchar *gtk_text_iter_get_visible_text (const GtkTextIter *start,
                                          const GtkTextIter *end);

GdkPixbuf* gtk_text_iter_get_pixbuf (const GtkTextIter *iter);
GSList * gtk_text_iter_get_marks (const GtkTextIter *iter);

GtkTextChildAnchor* gtk_text_iter_get_child_anchor (const GtkTextIter *iter);




GSList *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter,
                                          gboolean toggled_on);

gboolean gtk_text_iter_begins_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);

gboolean gtk_text_iter_has_tag (const GtkTextIter *iter,
                                          GtkTextTag *tag);
GSList *gtk_text_iter_get_tags (const GtkTextIter *iter);

gboolean gtk_text_iter_editable (const GtkTextIter *iter,
                                          gboolean default_setting);
gboolean gtk_text_iter_can_insert (const GtkTextIter *iter,
                                          gboolean default_editability);

gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);
gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);
gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);
gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);
gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);

gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);
gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);

gboolean gtk_text_iter_get_attributes (const GtkTextIter *iter,
                                             GtkTextAttributes *values);
PangoLanguage* gtk_text_iter_get_language (const GtkTextIter *iter);
gboolean gtk_text_iter_is_end (const GtkTextIter *iter);
gboolean gtk_text_iter_is_start (const GtkTextIter *iter);





gboolean gtk_text_iter_forward_char (GtkTextIter *iter);
gboolean gtk_text_iter_backward_char (GtkTextIter *iter);
gboolean gtk_text_iter_forward_chars (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_chars (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_forward_line (GtkTextIter *iter);
gboolean gtk_text_iter_backward_line (GtkTextIter *iter);
gboolean gtk_text_iter_forward_lines (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_lines (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);
gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);
gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter,
                                             gint count);
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter,
                                             gint count);

gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);
gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);
gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter,
                                                 gint count);
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter,
                                                 gint count);





gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);
gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter,
                                                  gint count);
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter,
                                                  gint count);


void gtk_text_iter_set_offset (GtkTextIter *iter,
                                           gint char_offset);
void gtk_text_iter_set_line (GtkTextIter *iter,
                                           gint line_number);
void gtk_text_iter_set_line_offset (GtkTextIter *iter,
                                           gint char_on_line);
void gtk_text_iter_set_line_index (GtkTextIter *iter,
                                           gint byte_on_line);
void gtk_text_iter_forward_to_end (GtkTextIter *iter);
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);

void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter,
                                                gint char_on_line);
void gtk_text_iter_set_visible_line_index (GtkTextIter *iter,
                                                gint byte_on_line);





gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter,
                                              GtkTextTag *tag);

gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter,
                                               GtkTextTag *tag);

typedef gboolean (* GtkTextCharPredicate) (gunichar ch, gpointer user_data);

gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);
gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter,
                                           GtkTextCharPredicate pred,
                                           gpointer user_data,
                                           const GtkTextIter *limit);

gboolean gtk_text_iter_forward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);

gboolean gtk_text_iter_backward_search (const GtkTextIter *iter,
                                        const gchar *str,
                                        GtkTextSearchFlags flags,
                                        GtkTextIter *match_start,
                                        GtkTextIter *match_end,
                                        const GtkTextIter *limit);





gboolean gtk_text_iter_equal (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
gint gtk_text_iter_compare (const GtkTextIter *lhs,
                                        const GtkTextIter *rhs);
gboolean gtk_text_iter_in_range (const GtkTextIter *iter,
                                        const GtkTextIter *start,
                                        const GtkTextIter *end);


void gtk_text_iter_order (GtkTextIter *first,
                                        GtkTextIter *second);
# 34 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextmark.h" 1
# 59 "/usr/include/gtk-2.0/gtk/gtktextmark.h"
typedef struct _GtkTextMark GtkTextMark;
typedef struct _GtkTextMarkClass GtkTextMarkClass;
# 69 "/usr/include/gtk-2.0/gtk/gtktextmark.h"
struct _GtkTextMark
{
  GObject parent_instance;

  gpointer segment;
};

struct _GtkTextMarkClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_text_mark_get_type (void) ;

void gtk_text_mark_set_visible (GtkTextMark *mark,
                                          gboolean setting);
gboolean gtk_text_mark_get_visible (GtkTextMark *mark);

const gchar* gtk_text_mark_get_name (GtkTextMark *mark);
gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);
GtkTextBuffer* gtk_text_mark_get_buffer (GtkTextMark *mark);
gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);
# 35 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h" 2
# 46 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
typedef struct _GtkTextBTree GtkTextBTree;

typedef struct _GtkTextLogAttrCache GtkTextLogAttrCache;
# 57 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
typedef struct _GtkTextBufferClass GtkTextBufferClass;

struct _GtkTextBuffer
{
  GObject parent_instance;

  GtkTextTagTable *tag_table;
  GtkTextBTree *btree;

  GSList *clipboard_contents_buffers;
  GSList *selection_clipboards;

  GtkTextLogAttrCache *log_attr_cache;

  guint user_action_count;


  guint modified : 1;
};

struct _GtkTextBufferClass
{
  GObjectClass parent_class;

  void (* insert_text) (GtkTextBuffer *buffer,
                            GtkTextIter *pos,
                            const gchar *text,
                            gint length);

  void (* insert_pixbuf) (GtkTextBuffer *buffer,
                            GtkTextIter *pos,
                            GdkPixbuf *pixbuf);

  void (* insert_child_anchor) (GtkTextBuffer *buffer,
                                  GtkTextIter *pos,
                                  GtkTextChildAnchor *anchor);

  void (* delete_range) (GtkTextBuffer *buffer,
                             GtkTextIter *start,
                             GtkTextIter *end);




  void (* changed) (GtkTextBuffer *buffer);



  void (* modified_changed) (GtkTextBuffer *buffer);


  void (* mark_set) (GtkTextBuffer *buffer,
                               const GtkTextIter *location,
                               GtkTextMark *mark);

  void (* mark_deleted) (GtkTextBuffer *buffer,
                               GtkTextMark *mark);

  void (* apply_tag) (GtkTextBuffer *buffer,
                               GtkTextTag *tag,
                               const GtkTextIter *start_char,
                               const GtkTextIter *end_char);

  void (* remove_tag) (GtkTextBuffer *buffer,
                               GtkTextTag *tag,
                               const GtkTextIter *start_char,
                               const GtkTextIter *end_char);


  void (* begin_user_action) (GtkTextBuffer *buffer);
  void (* end_user_action) (GtkTextBuffer *buffer);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
};

GType gtk_text_buffer_get_type (void) ;




GtkTextBuffer *gtk_text_buffer_new (GtkTextTagTable *table);
gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);
gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);


GtkTextTagTable* gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);


void gtk_text_buffer_set_text (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);


void gtk_text_buffer_insert (GtkTextBuffer *buffer,
                                        GtkTextIter *iter,
                                        const gchar *text,
                                        gint len);
void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer,
                                        const gchar *text,
                                        gint len);

gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer,
                                                       GtkTextIter *iter,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer,
                                                       const gchar *text,
                                                       gint len,
                                                       gboolean default_editable);

void gtk_text_buffer_insert_range (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end);
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const GtkTextIter *start,
                                                   const GtkTextIter *end,
                                                   gboolean default_editable);

void gtk_text_buffer_insert_with_tags (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   GtkTextTag *first_tag,
                                                   ...);

void gtk_text_buffer_insert_with_tags_by_name (GtkTextBuffer *buffer,
                                                   GtkTextIter *iter,
                                                   const gchar *text,
                                                   gint len,
                                                   const gchar *first_tag_name,
                                                   ...);


void gtk_text_buffer_delete (GtkTextBuffer *buffer,
                                             GtkTextIter *start,
                                             GtkTextIter *end);
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer,
                                             GtkTextIter *start_iter,
                                             GtkTextIter *end_iter,
                                             gboolean default_editable);




gchar *gtk_text_buffer_get_text (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);

gchar *gtk_text_buffer_get_slice (GtkTextBuffer *buffer,
                                                     const GtkTextIter *start,
                                                     const GtkTextIter *end,
                                                     gboolean include_hidden_chars);


void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer,
                                            GtkTextIter *iter,
                                            GdkPixbuf *pixbuf);


void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer,
                                                        GtkTextIter *iter,
                                                        GtkTextChildAnchor *anchor);


GtkTextChildAnchor *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer,
                                                         GtkTextIter *iter);


GtkTextMark *gtk_text_buffer_create_mark (GtkTextBuffer *buffer,
                                            const gchar *mark_name,
                                            const GtkTextIter *where,
                                            gboolean left_gravity);
void gtk_text_buffer_move_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark,
                                            const GtkTextIter *where);
void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer,
                                            GtkTextMark *mark);
GtkTextMark* gtk_text_buffer_get_mark (GtkTextBuffer *buffer,
                                            const gchar *name);

void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name,
                                          const GtkTextIter *where);
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer,
                                          const gchar *name);

GtkTextMark* gtk_text_buffer_get_insert (GtkTextBuffer *buffer);
GtkTextMark* gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);


void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer,
                                   const GtkTextIter *where);




void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer,
                                            GtkTextTag *tag,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer,
                                            const gchar *name,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);
void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer,
                                            const GtkTextIter *start,
                                            const GtkTextIter *end);





GtkTextTag *gtk_text_buffer_create_tag (GtkTextBuffer *buffer,
                                           const gchar *tag_name,
                                           const gchar *first_property_name,
                                           ...);




void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint char_offset);
void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number,
                                              gint byte_index);
void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint char_offset);
void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              gint line_number);
void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer,
                                              GtkTextIter *iter);
void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer,
                                              GtkTextIter *start,
                                              GtkTextIter *end);
void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer,
                                              GtkTextIter *iter,
                                              GtkTextMark *mark);

void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer,
                                               GtkTextIter *iter,
                                               GtkTextChildAnchor *anchor);
# 333 "/usr/include/gtk-2.0/gtk/gtktextbuffer.h"
gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);
void gtk_text_buffer_set_modified (GtkTextBuffer *buffer,
                                                         gboolean setting);

void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer,
                                                 GtkClipboard *clipboard);
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer,
                                                 GtkClipboard *clipboard);

void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer,
                                                         GtkClipboard *clipboard,
                                                         gboolean default_editable);
void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer,
                                                         GtkClipboard *clipboard);
void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer,
                                                         GtkClipboard *clipboard,
                                                         GtkTextIter *override_location,
                                                         gboolean default_editable);

gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer,
                                                         GtkTextIter *start,
                                                         GtkTextIter *end);
gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer,
                                                         gboolean interactive,
                                                         gboolean default_editable);


void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);
void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);


void _gtk_text_buffer_spew (GtkTextBuffer *buffer);

GtkTextBTree* _gtk_text_buffer_get_btree (GtkTextBuffer *buffer);

const PangoLogAttr* _gtk_text_buffer_get_line_log_attrs (GtkTextBuffer *buffer,
                                                         const GtkTextIter *anywhere_in_line,
                                                         gint *char_len);

void _gtk_text_buffer_notify_will_remove_tag (GtkTextBuffer *buffer,
                                              GtkTextTag *tag);
# 136 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktextview.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtktextview.h"
typedef enum
{
  GTK_TEXT_WINDOW_PRIVATE,
  GTK_TEXT_WINDOW_WIDGET,
  GTK_TEXT_WINDOW_TEXT,
  GTK_TEXT_WINDOW_LEFT,
  GTK_TEXT_WINDOW_RIGHT,
  GTK_TEXT_WINDOW_TOP,
  GTK_TEXT_WINDOW_BOTTOM
} GtkTextWindowType;



typedef struct _GtkTextView GtkTextView;
typedef struct _GtkTextViewClass GtkTextViewClass;


typedef struct _GtkTextWindow GtkTextWindow;
typedef struct _GtkTextPendingScroll GtkTextPendingScroll;

struct _GtkTextView
{
  GtkContainer parent_instance;

  struct _GtkTextLayout *layout;
  GtkTextBuffer *buffer;

  guint selection_drag_handler;
  guint scroll_timeout;


  gint pixels_above_lines;
  gint pixels_below_lines;
  gint pixels_inside_wrap;
  GtkWrapMode wrap_mode;
  GtkJustification justify;
  gint left_margin;
  gint right_margin;
  gint indent;
  PangoTabArray *tabs;
  guint editable : 1;



  guint overwrite_mode : 1;
  guint cursor_visible : 1;
  guint need_im_reset : 1;

  guint just_selected_element : 1;


  guint reserved2 : 1;




  guint onscreen_validated : 1;

  guint mouse_cursor_obscured : 1;

  GtkTextWindow *text_window;
  GtkTextWindow *left_window;
  GtkTextWindow *right_window;
  GtkTextWindow *top_window;
  GtkTextWindow *bottom_window;

  GtkAdjustment *hadjustment;
  GtkAdjustment *vadjustment;

  gint xoffset;
  gint yoffset;
  gint width;
  gint height;
# 129 "/usr/include/gtk-2.0/gtk/gtktextview.h"
  gint virtual_cursor_x;
  gint virtual_cursor_y;

  GtkTextMark *first_para_mark;
  gint first_para_pixels;

  GtkTextMark *dnd_mark;
  guint blink_timeout;

  guint first_validate_idle;
  guint incremental_validate_idle;

  GtkIMContext *im_context;
  GtkWidget *popup_menu;

  gint drag_start_x;
  gint drag_start_y;

  GSList *children;

  GtkTextPendingScroll *pending_scroll;

  gint pending_place_cursor_button;
};

struct _GtkTextViewClass
{
  GtkContainerClass parent_class;

  void (* set_scroll_adjustments) (GtkTextView *text_view,
                                     GtkAdjustment *hadjustment,
                                     GtkAdjustment *vadjustment);

  void (* populate_popup) (GtkTextView *text_view,
                                     GtkMenu *menu);




  void (* move_cursor) (GtkTextView *text_view,
                        GtkMovementStep step,
                        gint count,
                        gboolean extend_selection);





  void (* page_horizontally) (GtkTextView *text_view,
                              gint count,
                              gboolean extend_selection);


  void (* set_anchor) (GtkTextView *text_view);


  void (* insert_at_cursor) (GtkTextView *text_view,
                                  const gchar *str);
  void (* delete_from_cursor) (GtkTextView *text_view,
                                  GtkDeleteType type,
                                  gint count);


  void (* cut_clipboard) (GtkTextView *text_view);
  void (* copy_clipboard) (GtkTextView *text_view);
  void (* paste_clipboard) (GtkTextView *text_view);

  void (* toggle_overwrite) (GtkTextView *text_view);


  void (* move_focus) (GtkTextView *text_view,
                             GtkDirectionType direction);



  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
  void (*_gtk_reserved5) (void);
  void (*_gtk_reserved6) (void);
  void (*_gtk_reserved7) (void);
  void (*_gtk_reserved8) (void);
};

GType gtk_text_view_get_type (void) ;
GtkWidget * gtk_text_view_new (void);
GtkWidget * gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);
void gtk_text_view_set_buffer (GtkTextView *text_view,
                                                    GtkTextBuffer *buffer);
GtkTextBuffer *gtk_text_view_get_buffer (GtkTextView *text_view);
gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
void gtk_text_view_scroll_to_mark (GtkTextView *text_view,
                                                    GtkTextMark *mark,
                                                    gdouble within_margin,
                                                    gboolean use_align,
                                                    gdouble xalign,
                                                    gdouble yalign);
void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view,
                                                    GtkTextMark *mark);
gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);

void gtk_text_view_get_visible_rect (GtkTextView *text_view,
                                                    GdkRectangle *visible_rect);
void gtk_text_view_set_cursor_visible (GtkTextView *text_view,
                                                    gboolean setting);
gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);

void gtk_text_view_get_iter_location (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    GdkRectangle *location);
void gtk_text_view_get_iter_at_location (GtkTextView *text_view,
                                                    GtkTextIter *iter,
                                                    gint x,
                                                    gint y);
void gtk_text_view_get_line_yrange (GtkTextView *text_view,
                                                    const GtkTextIter *iter,
                                                    gint *y,
                                                    gint *height);

void gtk_text_view_get_line_at_y (GtkTextView *text_view,
                                                    GtkTextIter *target_iter,
                                                    gint y,
                                                    gint *line_top);

void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint buffer_x,
                                            gint buffer_y,
                                            gint *window_x,
                                            gint *window_y);
void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view,
                                            GtkTextWindowType win,
                                            gint window_x,
                                            gint window_y,
                                            gint *buffer_x,
                                            gint *buffer_y);

GdkWindow* gtk_text_view_get_window (GtkTextView *text_view,
                                                 GtkTextWindowType win);
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view,
                                                 GdkWindow *window);

void gtk_text_view_set_border_window_size (GtkTextView *text_view,
                                           GtkTextWindowType type,
                                           gint size);
gint gtk_text_view_get_border_window_size (GtkTextView *text_view,
                                           GtkTextWindowType type);

gboolean gtk_text_view_forward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_backward_display_line (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view,
                                                       GtkTextIter *iter);
gboolean gtk_text_view_starts_display_line (GtkTextView *text_view,
                                                       const GtkTextIter *iter);
gboolean gtk_text_view_move_visually (GtkTextView *text_view,
                                                       GtkTextIter *iter,
                                                       gint count);


void gtk_text_view_add_child_at_anchor (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextChildAnchor *anchor);

void gtk_text_view_add_child_in_window (GtkTextView *text_view,
                                        GtkWidget *child,
                                        GtkTextWindowType which_window,

                                        gint xpos,
                                        gint ypos);

void gtk_text_view_move_child (GtkTextView *text_view,
                                        GtkWidget *child,

                                        gint xpos,
                                        gint ypos);



void gtk_text_view_set_wrap_mode (GtkTextView *text_view,
                                                       GtkWrapMode wrap_mode);
GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);
void gtk_text_view_set_editable (GtkTextView *text_view,
                                                       gboolean setting);
gboolean gtk_text_view_get_editable (GtkTextView *text_view);
void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view,
                                                       gint pixels_above_lines);
gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);
void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view,
                                                       gint pixels_below_lines);
gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);
void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view,
                                                       gint pixels_inside_wrap);
gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);
void gtk_text_view_set_justification (GtkTextView *text_view,
                                                       GtkJustification justification);
GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);
void gtk_text_view_set_left_margin (GtkTextView *text_view,
                                                       gint left_margin);
gint gtk_text_view_get_left_margin (GtkTextView *text_view);
void gtk_text_view_set_right_margin (GtkTextView *text_view,
                                                       gint right_margin);
gint gtk_text_view_get_right_margin (GtkTextView *text_view);
void gtk_text_view_set_indent (GtkTextView *text_view,
                                                       gint indent);
gint gtk_text_view_get_indent (GtkTextView *text_view);
void gtk_text_view_set_tabs (GtkTextView *text_view,
                                                       PangoTabArray *tabs);
PangoTabArray* gtk_text_view_get_tabs (GtkTextView *text_view);


GtkTextAttributes* gtk_text_view_get_default_attributes (GtkTextView *text_view);
# 137 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktipsquery.h" 1
# 54 "/usr/include/gtk-2.0/gtk/gtktipsquery.h"
typedef struct _GtkTipsQuery GtkTipsQuery;
typedef struct _GtkTipsQueryClass GtkTipsQueryClass;



struct _GtkTipsQuery
{
  GtkLabel label;

  guint emit_always : 1;
  guint in_query : 1;
  gchar *label_inactive;
  gchar *label_no_tip;

  GtkWidget *caller;
  GtkWidget *last_crossed;

  GdkCursor *query_cursor;
};

struct _GtkTipsQueryClass
{
  GtkLabelClass parent_class;

  void (*start_query) (GtkTipsQuery *tips_query);
  void (*stop_query) (GtkTipsQuery *tips_query);
  void (*widget_entered) (GtkTipsQuery *tips_query,
                                 GtkWidget *widget,
                                 const gchar *tip_text,
                                 const gchar *tip_private);
  gint (*widget_selected) (GtkTipsQuery *tips_query,
                                 GtkWidget *widget,
                                 const gchar *tip_text,
                                 const gchar *tip_private,
                                 GdkEventButton *event);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};



GtkType gtk_tips_query_get_type (void) ;
GtkWidget* gtk_tips_query_new (void);
void gtk_tips_query_start_query (GtkTipsQuery *tips_query);
void gtk_tips_query_stop_query (GtkTipsQuery *tips_query);
void gtk_tips_query_set_caller (GtkTipsQuery *tips_query,
                                                 GtkWidget *caller);
void gtk_tips_query_set_labels (GtkTipsQuery *tips_query,
                                                 const gchar *label_inactive,
                                                 const gchar *label_no_tip);
# 138 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktoolbar.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktooltips.h" 1
# 46 "/usr/include/gtk-2.0/gtk/gtktooltips.h"
typedef struct _GtkTooltips GtkTooltips;
typedef struct _GtkTooltipsClass GtkTooltipsClass;
typedef struct _GtkTooltipsData GtkTooltipsData;

struct _GtkTooltipsData
{
  GtkTooltips *tooltips;
  GtkWidget *widget;
  gchar *tip_text;
  gchar *tip_private;
};

struct _GtkTooltips
{
  GtkObject parent_instance;

  GtkWidget *tip_window;
  GtkWidget *tip_label;
  GtkTooltipsData *active_tips_data;
  GList *tips_data_list;

  guint delay : 30;
  guint enabled : 1;
  guint have_grab : 1;
  guint use_sticky_delay : 1;
  gint timer_tag;
  GTimeVal last_popdown;
};

struct _GtkTooltipsClass
{
  GtkObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_tooltips_get_type (void) ;
GtkTooltips* gtk_tooltips_new (void);

void gtk_tooltips_enable (GtkTooltips *tooltips);
void gtk_tooltips_disable (GtkTooltips *tooltips);

void gtk_tooltips_set_delay (GtkTooltips *tooltips,
                                            guint delay);

void gtk_tooltips_set_tip (GtkTooltips *tooltips,
                                            GtkWidget *widget,
                                            const gchar *tip_text,
                                            const gchar *tip_private);
GtkTooltipsData* gtk_tooltips_data_get (GtkWidget *widget);
void gtk_tooltips_force_window (GtkTooltips *tooltips);


void _gtk_tooltips_toggle_keyboard_mode (GtkWidget *widget);
# 36 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2


# 1 "/usr/include/gtk-2.0/gtk/gtkpixmap.h" 1
# 39 "/usr/include/gtk-2.0/gtk/gtktoolbar.h" 2
# 55 "/usr/include/gtk-2.0/gtk/gtktoolbar.h"
typedef enum
{
  GTK_TOOLBAR_CHILD_SPACE,
  GTK_TOOLBAR_CHILD_BUTTON,
  GTK_TOOLBAR_CHILD_TOGGLEBUTTON,
  GTK_TOOLBAR_CHILD_RADIOBUTTON,
  GTK_TOOLBAR_CHILD_WIDGET
} GtkToolbarChildType;

typedef enum
{
  GTK_TOOLBAR_SPACE_EMPTY,
  GTK_TOOLBAR_SPACE_LINE
} GtkToolbarSpaceStyle;

typedef struct _GtkToolbarChild GtkToolbarChild;
typedef struct _GtkToolbar GtkToolbar;
typedef struct _GtkToolbarClass GtkToolbarClass;

struct _GtkToolbarChild
{
  GtkToolbarChildType type;
  GtkWidget *widget;
  GtkWidget *icon;
  GtkWidget *label;
};

struct _GtkToolbar
{
  GtkContainer container;

  gint num_children;
  GList *children;
  GtkOrientation orientation;
  GtkToolbarStyle style;
  GtkIconSize icon_size;

  GtkTooltips *tooltips;

  gint button_maxw;
  gint button_maxh;

  guint style_set_connection;
  guint icon_size_connection;

  guint style_set : 1;
  guint icon_size_set : 1;
};

struct _GtkToolbarClass
{
  GtkContainerClass parent_class;

  void (* orientation_changed) (GtkToolbar *toolbar,
                                GtkOrientation orientation);
  void (* style_changed) (GtkToolbar *toolbar,
                                GtkToolbarStyle style);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_toolbar_get_type (void) ;
GtkWidget* gtk_toolbar_new (void);


GtkWidget* gtk_toolbar_append_item (GtkToolbar *toolbar,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data);
GtkWidget* gtk_toolbar_prepend_item (GtkToolbar *toolbar,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data);
GtkWidget* gtk_toolbar_insert_item (GtkToolbar *toolbar,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data,
                                        gint position);


GtkWidget* gtk_toolbar_insert_stock (GtkToolbar *toolbar,
                                        const gchar *stock_id,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkSignalFunc callback,
                                        gpointer user_data,
                                        gint position);




void gtk_toolbar_append_space (GtkToolbar *toolbar);
void gtk_toolbar_prepend_space (GtkToolbar *toolbar);
void gtk_toolbar_insert_space (GtkToolbar *toolbar,
                                        gint position);
void gtk_toolbar_remove_space (GtkToolbar *toolbar,
                                        gint position);


GtkWidget* gtk_toolbar_append_element (GtkToolbar *toolbar,
                                        GtkToolbarChildType type,
                                        GtkWidget *widget,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data);

GtkWidget* gtk_toolbar_prepend_element (GtkToolbar *toolbar,
                                        GtkToolbarChildType type,
                                        GtkWidget *widget,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data);

GtkWidget* gtk_toolbar_insert_element (GtkToolbar *toolbar,
                                        GtkToolbarChildType type,
                                        GtkWidget *widget,
                                        const char *text,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        GtkWidget *icon,
                                        GtkSignalFunc callback,
                                        gpointer user_data,
                                        gint position);


void gtk_toolbar_append_widget (GtkToolbar *toolbar,
                                        GtkWidget *widget,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text);
void gtk_toolbar_prepend_widget (GtkToolbar *toolbar,
                                        GtkWidget *widget,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text);
void gtk_toolbar_insert_widget (GtkToolbar *toolbar,
                                        GtkWidget *widget,
                                        const char *tooltip_text,
                                        const char *tooltip_private_text,
                                        gint position);


void gtk_toolbar_set_orientation (GtkToolbar *toolbar,
                                              GtkOrientation orientation);
void gtk_toolbar_set_style (GtkToolbar *toolbar,
                                              GtkToolbarStyle style);
void gtk_toolbar_set_icon_size (GtkToolbar *toolbar,
                                              GtkIconSize icon_size);
void gtk_toolbar_set_tooltips (GtkToolbar *toolbar,
                                              gboolean enable);
void gtk_toolbar_unset_style (GtkToolbar *toolbar);
void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);

GtkOrientation gtk_toolbar_get_orientation (GtkToolbar *toolbar);
GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);
GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);
gboolean gtk_toolbar_get_tooltips (GtkToolbar *toolbar);
# 140 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtktree.h" 1
# 142 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreednd.h" 1
# 35 "/usr/include/gtk-2.0/gtk/gtktreednd.h"
typedef struct _GtkTreeDragSource GtkTreeDragSource;
typedef struct _GtkTreeDragSourceIface GtkTreeDragSourceIface;

struct _GtkTreeDragSourceIface
{
  GTypeInterface g_iface;



  gboolean (* row_draggable) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);

  gboolean (* drag_data_get) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path,
                                         GtkSelectionData *selection_data);

  gboolean (* drag_data_delete) (GtkTreeDragSource *drag_source,
                                         GtkTreePath *path);
};

GType gtk_tree_drag_source_get_type (void) ;


gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);


gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path);




gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source,
                                                GtkTreePath *path,
                                                GtkSelectionData *selection_data);






typedef struct _GtkTreeDragDest GtkTreeDragDest;
typedef struct _GtkTreeDragDestIface GtkTreeDragDestIface;

struct _GtkTreeDragDestIface
{
  GTypeInterface g_iface;



  gboolean (* drag_data_received) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest,
                                       GtkSelectionData *selection_data);

  gboolean (* row_drop_possible) (GtkTreeDragDest *drag_dest,
                                       GtkTreePath *dest_path,
                                       GtkSelectionData *selection_data);
};

GType gtk_tree_drag_dest_get_type (void) ;




gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest,
                                                GtkTreePath *dest,
                                                GtkSelectionData *selection_data);



gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest,
                                                GtkTreePath *dest_path,
                                                GtkSelectionData *selection_data);





gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data,
                                                GtkTreeModel *tree_model,
                                                GtkTreePath *path);
gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data,
                                                GtkTreeModel **tree_model,
                                                GtkTreePath **path);
# 143 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeitem.h" 1
# 144 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h" 1
# 26 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h"

# 35 "/usr/include/gtk-2.0/gtk/gtktreemodelsort.h"
typedef struct _GtkTreeModelSort GtkTreeModelSort;
typedef struct _GtkTreeModelSortClass GtkTreeModelSortClass;

struct _GtkTreeModelSort
{
  GObject parent;


  gpointer root;
  gint stamp;
  guint child_flags;
  GtkTreeModel *child_model;
  gint zero_ref_count;


  GList *sort_list;
  gint sort_column_id;
  GtkSortType order;


  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GtkDestroyNotify default_sort_destroy;


  guint changed_id;
  guint inserted_id;
  guint has_child_toggled_id;
  guint deleted_id;
  guint reordered_id;
};

struct _GtkTreeModelSortClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_model_sort_get_type (void) ;
GtkTreeModel *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);

GtkTreeModel *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);
GtkTreePath *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreePath *child_path);
void gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *sort_iter,
                                                              GtkTreeIter *child_iter);
GtkTreePath *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreePath *sorted_path);
void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *child_iter,
                                                              GtkTreeIter *sorted_iter);
void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);
void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);
gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort,
                                                              GtkTreeIter *iter);



# 146 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreeselection.h" 1
# 24 "/usr/include/gtk-2.0/gtk/gtktreeselection.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 1
# 25 "/usr/include/gtk-2.0/gtk/gtktreeview.h"
# 1 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h" 1
# 42 "/usr/include/gtk-2.0/gtk/gtktreeviewcolumn.h"
typedef enum
{
  GTK_TREE_VIEW_COLUMN_GROW_ONLY,
  GTK_TREE_VIEW_COLUMN_AUTOSIZE,
  GTK_TREE_VIEW_COLUMN_FIXED
} GtkTreeViewColumnSizing;

typedef struct _GtkTreeViewColumn GtkTreeViewColumn;
typedef struct _GtkTreeViewColumnClass GtkTreeViewColumnClass;

typedef void (* GtkTreeCellDataFunc) (GtkTreeViewColumn *tree_column,
                                      GtkCellRenderer *cell,
                                      GtkTreeModel *tree_model,
                                      GtkTreeIter *iter,
                                      gpointer data);


struct _GtkTreeViewColumn
{
  GtkObject parent;

  GtkWidget *tree_view;
  GtkWidget *button;
  GtkWidget *child;
  GtkWidget *arrow;
  GtkWidget *alignment;
  GdkWindow *window;
  GtkCellEditable *editable_widget;
  gfloat xalign;
  guint property_changed_signal;
  gint spacing;



  GtkTreeViewColumnSizing column_type;
  gint requested_width;
  gint button_request;
  gint resized_width;
  gint width;
  gint fixed_width;
  gint min_width;
  gint max_width;


  gint drag_x;
  gint drag_y;

  gchar *title;
  GList *cell_list;


  guint sort_clicked_signal;
  guint sort_column_changed_signal;
  gint sort_column_id;
  GtkSortType sort_order;


  guint visible : 1;
  guint resizable : 1;
  guint clickable : 1;
  guint dirty : 1;
  guint show_sort_indicator : 1;
  guint maybe_reordered : 1;
  guint reorderable : 1;
  guint use_resized_width : 1;
};

struct _GtkTreeViewColumnClass
{
  GtkObjectClass parent_class;

  void (*clicked) (GtkTreeViewColumn *tree_column);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};

GType gtk_tree_view_column_get_type (void);
GtkTreeViewColumn *gtk_tree_view_column_new (void);
GtkTreeViewColumn *gtk_tree_view_column_new_with_attributes (const gchar *title,
                                                                  GtkCellRenderer *cell,
                                                                  ...);
void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell,
                                                                  gboolean expand);
void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell,
                                                                  gboolean expand);
void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);
GList *gtk_tree_view_column_get_cell_renderers (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell_renderer,
                                                                  const gchar *attribute,
                                                                  gint column);
void gtk_tree_view_column_set_attributes (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell_renderer,
                                                                  ...);
void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell_renderer,
                                                                  GtkTreeCellDataFunc func,
                                                                  gpointer func_data,
                                                                  GtkDestroyNotify destroy);
void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell_renderer);
void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column,
                                                                  gint spacing);
gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column,
                                                                  gboolean visible);
gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column,
                                                                  gboolean resizable);
gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column,
                                                                  GtkTreeViewColumnSizing type);
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);
gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);
gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column,
                                                                  gint fixed_width);
void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column,
                                                                  gint min_width);
gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column,
                                                                  gint max_width);
gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);





void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column,
                                                                  const gchar *title);
const gchar *gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column,
                                                                  gboolean clickable);
gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column,
                                                                  GtkWidget *widget);
GtkWidget *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column,
                                                                  gfloat xalign);
gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column,
                                                                  gboolean reorderable);
gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);






void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column,
                                                                  gint sort_column_id);
gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column,
                                                                  gboolean setting);
gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column,
                                                                  GtkSortType order);
GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);




void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column,
                                                                  GtkTreeModel *tree_model,
                                                                  GtkTreeIter *iter,
                                                                  gboolean is_expander,
                                                                  gboolean is_expanded);
void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column,
                                                                  GdkRectangle *cell_area,
                                                                  gint *x_offset,
                                                                  gint *y_offset,
                                                                  gint *width,
                                                                  gint *height);
gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);
void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell);
gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column,
                                                                  GtkCellRenderer *cell_renderer,
                                                                  gint *start_pos,
                                                                  gint *width);
# 26 "/usr/include/gtk-2.0/gtk/gtktreeview.h" 2






typedef enum
{

  GTK_TREE_VIEW_DROP_BEFORE,
  GTK_TREE_VIEW_DROP_AFTER,



  GTK_TREE_VIEW_DROP_INTO_OR_BEFORE,
  GTK_TREE_VIEW_DROP_INTO_OR_AFTER
} GtkTreeViewDropPosition;
# 51 "/usr/include/gtk-2.0/gtk/gtktreeview.h"
typedef struct _GtkTreeView GtkTreeView;
typedef struct _GtkTreeViewClass GtkTreeViewClass;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct _GtkTreeSelectionClass GtkTreeSelectionClass;

struct _GtkTreeView
{
  GtkContainer parent;

  GtkTreeViewPrivate *priv;
};

struct _GtkTreeViewClass
{
  GtkContainerClass parent_class;

  void (* set_scroll_adjustments) (GtkTreeView *tree_view,
                                           GtkAdjustment *hadjustment,
                                           GtkAdjustment *vadjustment);
  void (* row_activated) (GtkTreeView *tree_view,
                                           GtkTreePath *path,
                                           GtkTreeViewColumn *column);
  gboolean (* test_expand_row) (GtkTreeView *tree_view,
                                           GtkTreeIter *iter,
                                           GtkTreePath *path);
  gboolean (* test_collapse_row) (GtkTreeView *tree_view,
                                           GtkTreeIter *iter,
                                           GtkTreePath *path);
  void (* row_expanded) (GtkTreeView *tree_view,
                                           GtkTreeIter *iter,
                                           GtkTreePath *path);
  void (* row_collapsed) (GtkTreeView *tree_view,
                                           GtkTreeIter *iter,
                                           GtkTreePath *path);
  void (* columns_changed) (GtkTreeView *tree_view);
  void (* cursor_changed) (GtkTreeView *tree_view);


  gboolean (* move_cursor) (GtkTreeView *tree_view,
                                           GtkMovementStep step,
                                           gint count);
  gboolean (* select_all) (GtkTreeView *tree_view);
  gboolean (* unselect_all) (GtkTreeView *tree_view);
  gboolean (* select_cursor_row) (GtkTreeView *tree_view,
                                           gboolean start_editing);
  gboolean (* toggle_cursor_row) (GtkTreeView *tree_view);
  gboolean (* expand_collapse_cursor_row) (GtkTreeView *tree_view,
                                           gboolean logical,
                                           gboolean expand,
                                           gboolean open_all);
  gboolean (* select_cursor_parent) (GtkTreeView *tree_view);
  gboolean (* start_interactive_search) (GtkTreeView *tree_view);


  void (*_gtk_reserved0) (void);
  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


typedef gboolean (* GtkTreeViewColumnDropFunc) (GtkTreeView *tree_view,
                                                GtkTreeViewColumn *column,
                                                GtkTreeViewColumn *prev_column,
                                                GtkTreeViewColumn *next_column,
                                                gpointer data);
typedef void (* GtkTreeViewMappingFunc) (GtkTreeView *tree_view,
                                                GtkTreePath *path,
                                                gpointer user_data);
typedef gboolean (*GtkTreeViewSearchEqualFunc) (GtkTreeModel *model,
                                                gint column,
                                                const gchar *key,
                                                GtkTreeIter *iter,
                                                gpointer search_data);



GType gtk_tree_view_get_type (void);
GtkWidget *gtk_tree_view_new (void);
GtkWidget *gtk_tree_view_new_with_model (GtkTreeModel *model);


GtkTreeModel *gtk_tree_view_get_model (GtkTreeView *tree_view);
void gtk_tree_view_set_model (GtkTreeView *tree_view,
                                                                    GtkTreeModel *model);
GtkTreeSelection *gtk_tree_view_get_selection (GtkTreeView *tree_view);
GtkAdjustment *gtk_tree_view_get_hadjustment (GtkTreeView *tree_view);
void gtk_tree_view_set_hadjustment (GtkTreeView *tree_view,
                                                                    GtkAdjustment *adjustment);
GtkAdjustment *gtk_tree_view_get_vadjustment (GtkTreeView *tree_view);
void gtk_tree_view_set_vadjustment (GtkTreeView *tree_view,
                                                                    GtkAdjustment *adjustment);
gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);
void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view,
                                                                    gboolean headers_visible);
void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);
void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view,
                                                                    gboolean setting);
void gtk_tree_view_set_rules_hint (GtkTreeView *tree_view,
                                                                    gboolean setting);
gboolean gtk_tree_view_get_rules_hint (GtkTreeView *tree_view);


gint gtk_tree_view_append_column (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumn *column);
gint gtk_tree_view_remove_column (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumn *column);
gint gtk_tree_view_insert_column (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumn *column,
                                                                    gint position);
gint gtk_tree_view_insert_column_with_attributes (GtkTreeView *tree_view,
                                                                    gint position,
                                                                    const gchar *title,
                                                                    GtkCellRenderer *cell,
                                                                    ...);
gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view,
                                                                    gint position,
                                                                    const gchar *title,
                                                                    GtkCellRenderer *cell,
                                                                    GtkTreeCellDataFunc func,
                                                                    gpointer data,
                                                                    GDestroyNotify dnotify);
GtkTreeViewColumn *gtk_tree_view_get_column (GtkTreeView *tree_view,
                                                                    gint n);
GList *gtk_tree_view_get_columns (GtkTreeView *tree_view);
void gtk_tree_view_move_column_after (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumn *column,
                                                                    GtkTreeViewColumn *base_column);
void gtk_tree_view_set_expander_column (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumn *column);
GtkTreeViewColumn *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);
void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view,
                                                                    GtkTreeViewColumnDropFunc func,
                                                                    gpointer user_data,
                                                                    GtkDestroyNotify destroy);


void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view,
                                                                    gint tree_x,
                                                                    gint tree_y);
void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *column,
                                                                    gboolean use_align,
                                                                    gfloat row_align,
                                                                    gfloat col_align);
void gtk_tree_view_row_activated (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *column);
void gtk_tree_view_expand_all (GtkTreeView *tree_view);
void gtk_tree_view_collapse_all (GtkTreeView *tree_view);
void gtk_tree_view_expand_to_path (GtkTreeView *tree_view,
                                                                    GtkTreePath *path);
gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    gboolean open_all);
gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view,
                                                                    GtkTreePath *path);
void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view,
                                                                    GtkTreeViewMappingFunc func,
                                                                    gpointer data);
gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view,
                                                                    GtkTreePath *path);
void gtk_tree_view_set_reorderable (GtkTreeView *tree_view,
                                                                    gboolean reorderable);
gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);
void gtk_tree_view_set_cursor (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *focus_column,
                                                                    gboolean start_editing);
void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *focus_column,
                                                                    GtkCellRenderer *focus_cell,
                                                                    gboolean start_editing);
void gtk_tree_view_get_cursor (GtkTreeView *tree_view,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewColumn **focus_column);



GdkWindow *gtk_tree_view_get_bin_window (GtkTreeView *tree_view);
gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view,
                                                                    gint x,
                                                                    gint y,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewColumn **column,
                                                                    gint *cell_x,
                                                                    gint *cell_y);
void gtk_tree_view_get_cell_area (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *column,
                                                                    GdkRectangle *rect);
void gtk_tree_view_get_background_area (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewColumn *column,
                                                                    GdkRectangle *rect);
void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view,
                                                                    GdkRectangle *visible_rect);
void gtk_tree_view_widget_to_tree_coords (GtkTreeView *tree_view,
                                                                    gint wx,
                                                                    gint wy,
                                                                    gint *tx,
                                                                    gint *ty);
void gtk_tree_view_tree_to_widget_coords (GtkTreeView *tree_view,
                                                                    gint tx,
                                                                    gint ty,
                                                                    gint *wx,
                                                                    gint *wy);


void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view,
                                                                    GdkModifierType start_button_mask,
                                                                    const GtkTargetEntry *targets,
                                                                    gint n_targets,
                                                                    GdkDragAction actions);
void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view,
                                                                    const GtkTargetEntry *targets,
                                                                    gint n_targets,
                                                                    GdkDragAction actions);
void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);
void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);



void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view,
                                                                    GtkTreePath *path,
                                                                    GtkTreeViewDropPosition pos);
void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewDropPosition *pos);
gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view,
                                                                    gint drag_x,
                                                                    gint drag_y,
                                                                    GtkTreePath **path,
                                                                    GtkTreeViewDropPosition *pos);
GdkPixmap *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view,
                                                                    GtkTreePath *path);


void gtk_tree_view_set_enable_search (GtkTreeView *tree_view,
                                                                gboolean enable_search);
gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);
gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);
void gtk_tree_view_set_search_column (GtkTreeView *tree_view,
                                                                gint column);
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);
void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view,
                                                                GtkTreeViewSearchEqualFunc search_equal_func,
                                                                gpointer search_user_data,
                                                                GtkDestroyNotify search_destroy);



typedef void (* GtkTreeDestroyCountFunc) (GtkTreeView *tree_view,
                                           GtkTreePath *path,
                                           gint children,
                                           gpointer user_data);
void gtk_tree_view_set_destroy_count_func (GtkTreeView *tree_view,
                                           GtkTreeDestroyCountFunc func,
                                           gpointer data,
                                           GtkDestroyNotify destroy);
# 25 "/usr/include/gtk-2.0/gtk/gtktreeselection.h" 2
# 37 "/usr/include/gtk-2.0/gtk/gtktreeselection.h"
typedef gboolean (* GtkTreeSelectionFunc) (GtkTreeSelection *selection,
                                              GtkTreeModel *model,
                                              GtkTreePath *path,
                                              gboolean path_currently_selected,
                                              gpointer data);
typedef void (* GtkTreeSelectionForeachFunc) (GtkTreeModel *model,
                                              GtkTreePath *path,
                                              GtkTreeIter *iter,
                                              gpointer data);

struct _GtkTreeSelection
{
  GObject parent;



  GtkTreeView *tree_view;
  GtkSelectionMode type;
  GtkTreeSelectionFunc user_func;
  gpointer user_data;
  GtkDestroyNotify destroy;
};

struct _GtkTreeSelectionClass
{
  GObjectClass parent_class;

  void (* changed) (GtkTreeSelection *selection);


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_selection_get_type (void);

void gtk_tree_selection_set_mode (GtkTreeSelection *selection,
                                                         GtkSelectionMode type);
GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);
void gtk_tree_selection_set_select_function (GtkTreeSelection *selection,
                                                         GtkTreeSelectionFunc func,
                                                         gpointer data,
                                                         GtkDestroyNotify destroy);
gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);
GtkTreeView* gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);



gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection,
                                                         GtkTreeModel **model,
                                                         GtkTreeIter *iter);
GList * gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection,
                                                         GtkTreeModel **model);
gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);
void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection,
                                                         GtkTreeSelectionForeachFunc func,
                                                         gpointer data);
void gtk_tree_selection_select_path (GtkTreeSelection *selection,
                                                         GtkTreePath *path);
void gtk_tree_selection_unselect_path (GtkTreeSelection *selection,
                                                         GtkTreePath *path);
void gtk_tree_selection_select_iter (GtkTreeSelection *selection,
                                                         GtkTreeIter *iter);
void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection,
                                                         GtkTreeIter *iter);
gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection,
                                                         GtkTreePath *path);
gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection,
                                                         GtkTreeIter *iter);
void gtk_tree_selection_select_all (GtkTreeSelection *selection);
void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);
void gtk_tree_selection_select_range (GtkTreeSelection *selection,
                                                         GtkTreePath *start_path,
                                                         GtkTreePath *end_path);
void gtk_tree_selection_unselect_range (GtkTreeSelection *selection,
                                                         GtkTreePath *start_path,
                                                         GtkTreePath *end_path);
# 147 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtktreestore.h" 1
# 38 "/usr/include/gtk-2.0/gtk/gtktreestore.h"
typedef struct _GtkTreeStore GtkTreeStore;
typedef struct _GtkTreeStoreClass GtkTreeStoreClass;

struct _GtkTreeStore
{
  GObject parent;

  gint stamp;
  gpointer root;
  gpointer last;
  gint n_columns;
  gint sort_column_id;
  GList *sort_list;
  GtkSortType order;
  GType *column_headers;
  GtkTreeIterCompareFunc default_sort_func;
  gpointer default_sort_data;
  GtkDestroyNotify default_sort_destroy;
  guint columns_dirty : 1;
};

struct _GtkTreeStoreClass
{
  GObjectClass parent_class;


  void (*_gtk_reserved1) (void);
  void (*_gtk_reserved2) (void);
  void (*_gtk_reserved3) (void);
  void (*_gtk_reserved4) (void);
};


GType gtk_tree_store_get_type (void);
GtkTreeStore *gtk_tree_store_new (gint n_columns,
                                               ...);
GtkTreeStore *gtk_tree_store_newv (gint n_columns,
                                               GType *types);
void gtk_tree_store_set_column_types (GtkTreeStore *tree_store,
                                               gint n_columns,
                                               GType *types);



void gtk_tree_store_set_value (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               gint column,
                                               GValue *value);
void gtk_tree_store_set (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               ...);
void gtk_tree_store_set_valist (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               va_list var_args);
gboolean gtk_tree_store_remove (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
void gtk_tree_store_insert (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *parent,
                                               gint position);
void gtk_tree_store_insert_before (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *parent,
                                               GtkTreeIter *sibling);
void gtk_tree_store_insert_after (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *parent,
                                               GtkTreeIter *sibling);
void gtk_tree_store_prepend (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *parent);
void gtk_tree_store_append (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *parent);
gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *descendant);
gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
void gtk_tree_store_clear (GtkTreeStore *tree_store);
gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter);
void gtk_tree_store_reorder (GtkTreeStore *tree_store,
                                               GtkTreeIter *parent,
                                               gint *new_order);
void gtk_tree_store_swap (GtkTreeStore *tree_store,
                                               GtkTreeIter *a,
                                               GtkTreeIter *b);
void gtk_tree_store_move_before (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
void gtk_tree_store_move_after (GtkTreeStore *tree_store,
                                               GtkTreeIter *iter,
                                               GtkTreeIter *position);
# 148 "/usr/include/gtk-2.0/gtk/gtk.h" 2




# 1 "/usr/include/gtk-2.0/gtk/gtkvbbox.h" 1
# 47 "/usr/include/gtk-2.0/gtk/gtkvbbox.h"
typedef struct _GtkVButtonBox GtkVButtonBox;
typedef struct _GtkVButtonBoxClass GtkVButtonBoxClass;

struct _GtkVButtonBox
{
  GtkButtonBox button_box;
};

struct _GtkVButtonBoxClass
{
  GtkButtonBoxClass parent_class;
};


GType gtk_vbutton_box_get_type (void) ;
GtkWidget *gtk_vbutton_box_new (void);




gint gtk_vbutton_box_get_spacing_default (void);
void gtk_vbutton_box_set_spacing_default (gint spacing);

GtkButtonBoxStyle gtk_vbutton_box_get_layout_default (void);
void gtk_vbutton_box_set_layout_default (GtkButtonBoxStyle layout);
# 153 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkversion.h" 1
# 154 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkvpaned.h" 1
# 45 "/usr/include/gtk-2.0/gtk/gtkvpaned.h"
typedef struct _GtkVPaned GtkVPaned;
typedef struct _GtkVPanedClass GtkVPanedClass;

struct _GtkVPaned
{
  GtkPaned paned;
};

struct _GtkVPanedClass
{
  GtkPanedClass parent_class;
};

GType gtk_vpaned_get_type (void) ;
GtkWidget *gtk_vpaned_new (void);
# 156 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvruler.h" 1
# 58 "/usr/include/gtk-2.0/gtk/gtkvruler.h"
typedef struct _GtkVRuler GtkVRuler;
typedef struct _GtkVRulerClass GtkVRulerClass;

struct _GtkVRuler
{
  GtkRuler ruler;
};

struct _GtkVRulerClass
{
  GtkRulerClass parent_class;
};


GType gtk_vruler_get_type (void) ;
GtkWidget* gtk_vruler_new (void);
# 157 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 1 "/usr/include/gtk-2.0/gtk/gtkvscale.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkvscale.h"
typedef struct _GtkVScale GtkVScale;
typedef struct _GtkVScaleClass GtkVScaleClass;

struct _GtkVScale
{
  GtkScale scale;
};

struct _GtkVScaleClass
{
  GtkScaleClass parent_class;
};


GType gtk_vscale_get_type (void) ;
GtkWidget* gtk_vscale_new (GtkAdjustment *adjustment);
GtkWidget* gtk_vscale_new_with_range (gdouble min,
                                      gdouble max,
                                      gdouble step);
# 158 "/usr/include/gtk-2.0/gtk/gtk.h" 2

# 1 "/usr/include/gtk-2.0/gtk/gtkvseparator.h" 1
# 48 "/usr/include/gtk-2.0/gtk/gtkvseparator.h"
typedef struct _GtkVSeparator GtkVSeparator;
typedef struct _GtkVSeparatorClass GtkVSeparatorClass;

struct _GtkVSeparator
{
  GtkSeparator separator;
};

struct _GtkVSeparatorClass
{
  GtkSeparatorClass parent_class;
};


GType gtk_vseparator_get_type (void) ;
GtkWidget* gtk_vseparator_new (void);
# 160 "/usr/include/gtk-2.0/gtk/gtk.h" 2
# 5 "<stdin>" 2
# 1 "/usr/include/math.h" 1 3 4
# 29 "/usr/include/math.h" 3 4




# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 39 "/usr/include/bits/huge_val.h" 3 4
static union { unsigned char __c[8]; double __d; } __huge_val = { { 0, 0, 0, 0, 0, 0, 0xf0, 0x7f } };
# 34 "/usr/include/math.h" 2 3 4






# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4
# 65 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) ; extern double __acos (double __x) ;

extern double asin (double __x) ; extern double __asin (double __x) ;

extern double atan (double __x) ; extern double __atan (double __x) ;

extern double atan2 (double __y, double __x) ; extern double __atan2 (double __y, double __x) ;


extern double cos (double __x) ; extern double __cos (double __x) ;

extern double sin (double __x) ; extern double __sin (double __x) ;

extern double tan (double __x) ; extern double __tan (double __x) ;




extern double cosh (double __x) ; extern double __cosh (double __x) ;

extern double sinh (double __x) ; extern double __sinh (double __x) ;

extern double tanh (double __x) ; extern double __tanh (double __x) ;

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern double acosh (double __x) ; extern double __acosh (double __x) ;

extern double asinh (double __x) ; extern double __asinh (double __x) ;

extern double atanh (double __x) ; extern double __atanh (double __x) ;







extern double exp (double __x) ; extern double __exp (double __x) ;


extern double frexp (double __x, int *__exponent) ; extern double __frexp (double __x, int *__exponent) ;


extern double ldexp (double __x, int __exponent) ; extern double __ldexp (double __x, int __exponent) ;


extern double log (double __x) ; extern double __log (double __x) ;


extern double log10 (double __x) ; extern double __log10 (double __x) ;


extern double modf (double __x, double *__iptr) ; extern double __modf (double __x, double *__iptr) ;

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern double expm1 (double __x) ; extern double __expm1 (double __x) ;


extern double log1p (double __x) ; extern double __log1p (double __x) ;


extern double logb (double __x) ; extern double __logb (double __x) ;

# 152 "/usr/include/bits/mathcalls.h" 3 4


extern double pow (double __x, double __y) ; extern double __pow (double __x, double __y) ;


extern double sqrt (double __x) ; extern double __sqrt (double __x) ;





extern double hypot (double __x, double __y) ; extern double __hypot (double __x, double __y) ;






extern double cbrt (double __x) ; extern double __cbrt (double __x) ;








extern double ceil (double __x) ; extern double __ceil (double __x) ;


extern double fabs (double __x) ; extern double __fabs (double __x) ;


extern double floor (double __x) ; extern double __floor (double __x) ;


extern double fmod (double __x, double __y) ; extern double __fmod (double __x, double __y) ;




extern int __isinf (double __value) ;


extern int __finite (double __value) ;





extern int isinf (double __value) ;


extern int finite (double __value) ;


extern double drem (double __x, double __y) ; extern double __drem (double __x, double __y) ;



extern double significand (double __x) ; extern double __significand (double __x) ;





extern double copysign (double __x, double __y) ; extern double __copysign (double __x, double __y) ;

# 231 "/usr/include/bits/mathcalls.h" 3 4
extern int __isnan (double __value) ;



extern int isnan (double __value) ;


extern double j0 (double) ; extern double __j0 (double) ;
extern double j1 (double) ; extern double __j1 (double) ;
extern double jn (int, double) ; extern double __jn (int, double) ;
extern double y0 (double) ; extern double __y0 (double) ;
extern double y1 (double) ; extern double __y1 (double) ;
extern double yn (int, double) ; extern double __yn (int, double) ;






extern double erf (double) ; extern double __erf (double) ;
extern double erfc (double) ; extern double __erfc (double) ;
extern double lgamma (double) ; extern double __lgamma (double) ;

# 265 "/usr/include/bits/mathcalls.h" 3 4
extern double gamma (double) ; extern double __gamma (double) ;






extern double lgamma_r (double, int *__signgamp) ; extern double __lgamma_r (double, int *__signgamp) ;







extern double rint (double __x) ; extern double __rint (double __x) ;


extern double nextafter (double __x, double __y) ; extern double __nextafter (double __x, double __y) ;





extern double remainder (double __x, double __y) ; extern double __remainder (double __x, double __y) ;



extern double scalbn (double __x, int __n) ; extern double __scalbn (double __x, int __n) ;



extern int ilogb (double __x) ; extern int __ilogb (double __x) ;
# 66 "/usr/include/math.h" 2 3 4
# 88 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) ; extern float __acosf (float __x) ;

extern float asinf (float __x) ; extern float __asinf (float __x) ;

extern float atanf (float __x) ; extern float __atanf (float __x) ;

extern float atan2f (float __y, float __x) ; extern float __atan2f (float __y, float __x) ;


extern float cosf (float __x) ; extern float __cosf (float __x) ;

extern float sinf (float __x) ; extern float __sinf (float __x) ;

extern float tanf (float __x) ; extern float __tanf (float __x) ;




extern float coshf (float __x) ; extern float __coshf (float __x) ;

extern float sinhf (float __x) ; extern float __sinhf (float __x) ;

extern float tanhf (float __x) ; extern float __tanhf (float __x) ;

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern float acoshf (float __x) ; extern float __acoshf (float __x) ;

extern float asinhf (float __x) ; extern float __asinhf (float __x) ;

extern float atanhf (float __x) ; extern float __atanhf (float __x) ;







extern float expf (float __x) ; extern float __expf (float __x) ;


extern float frexpf (float __x, int *__exponent) ; extern float __frexpf (float __x, int *__exponent) ;


extern float ldexpf (float __x, int __exponent) ; extern float __ldexpf (float __x, int __exponent) ;


extern float logf (float __x) ; extern float __logf (float __x) ;


extern float log10f (float __x) ; extern float __log10f (float __x) ;


extern float modff (float __x, float *__iptr) ; extern float __modff (float __x, float *__iptr) ;

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern float expm1f (float __x) ; extern float __expm1f (float __x) ;


extern float log1pf (float __x) ; extern float __log1pf (float __x) ;


extern float logbf (float __x) ; extern float __logbf (float __x) ;

# 152 "/usr/include/bits/mathcalls.h" 3 4


extern float powf (float __x, float __y) ; extern float __powf (float __x, float __y) ;


extern float sqrtf (float __x) ; extern float __sqrtf (float __x) ;





extern float hypotf (float __x, float __y) ; extern float __hypotf (float __x, float __y) ;






extern float cbrtf (float __x) ; extern float __cbrtf (float __x) ;








extern float ceilf (float __x) ; extern float __ceilf (float __x) ;


extern float fabsf (float __x) ; extern float __fabsf (float __x) ;


extern float floorf (float __x) ; extern float __floorf (float __x) ;


extern float fmodf (float __x, float __y) ; extern float __fmodf (float __x, float __y) ;




extern int __isinff (float __value) ;


extern int __finitef (float __value) ;





extern int isinff (float __value) ;


extern int finitef (float __value) ;


extern float dremf (float __x, float __y) ; extern float __dremf (float __x, float __y) ;



extern float significandf (float __x) ; extern float __significandf (float __x) ;





extern float copysignf (float __x, float __y) ; extern float __copysignf (float __x, float __y) ;

# 231 "/usr/include/bits/mathcalls.h" 3 4
extern int __isnanf (float __value) ;



extern int isnanf (float __value) ;


extern float j0f (float) ; extern float __j0f (float) ;
extern float j1f (float) ; extern float __j1f (float) ;
extern float jnf (int, float) ; extern float __jnf (int, float) ;
extern float y0f (float) ; extern float __y0f (float) ;
extern float y1f (float) ; extern float __y1f (float) ;
extern float ynf (int, float) ; extern float __ynf (int, float) ;






extern float erff (float) ; extern float __erff (float) ;
extern float erfcf (float) ; extern float __erfcf (float) ;
extern float lgammaf (float) ; extern float __lgammaf (float) ;

# 265 "/usr/include/bits/mathcalls.h" 3 4
extern float gammaf (float) ; extern float __gammaf (float) ;






extern float lgammaf_r (float, int *__signgamp) ; extern float __lgammaf_r (float, int *__signgamp) ;







extern float rintf (float __x) ; extern float __rintf (float __x) ;


extern float nextafterf (float __x, float __y) ; extern float __nextafterf (float __x, float __y) ;





extern float remainderf (float __x, float __y) ; extern float __remainderf (float __x, float __y) ;



extern float scalbnf (float __x, int __n) ; extern float __scalbnf (float __x, int __n) ;



extern int ilogbf (float __x) ; extern int __ilogbf (float __x) ;
# 89 "/usr/include/math.h" 2 3 4
# 109 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) ; extern long double __acosl (long double __x) ;

extern long double asinl (long double __x) ; extern long double __asinl (long double __x) ;

extern long double atanl (long double __x) ; extern long double __atanl (long double __x) ;

extern long double atan2l (long double __y, long double __x) ; extern long double __atan2l (long double __y, long double __x) ;


extern long double cosl (long double __x) ; extern long double __cosl (long double __x) ;

extern long double sinl (long double __x) ; extern long double __sinl (long double __x) ;

extern long double tanl (long double __x) ; extern long double __tanl (long double __x) ;




extern long double coshl (long double __x) ; extern long double __coshl (long double __x) ;

extern long double sinhl (long double __x) ; extern long double __sinhl (long double __x) ;

extern long double tanhl (long double __x) ; extern long double __tanhl (long double __x) ;

# 87 "/usr/include/bits/mathcalls.h" 3 4


extern long double acoshl (long double __x) ; extern long double __acoshl (long double __x) ;

extern long double asinhl (long double __x) ; extern long double __asinhl (long double __x) ;

extern long double atanhl (long double __x) ; extern long double __atanhl (long double __x) ;







extern long double expl (long double __x) ; extern long double __expl (long double __x) ;


extern long double frexpl (long double __x, int *__exponent) ; extern long double __frexpl (long double __x, int *__exponent) ;


extern long double ldexpl (long double __x, int __exponent) ; extern long double __ldexpl (long double __x, int __exponent) ;


extern long double logl (long double __x) ; extern long double __logl (long double __x) ;


extern long double log10l (long double __x) ; extern long double __log10l (long double __x) ;


extern long double modfl (long double __x, long double *__iptr) ; extern long double __modfl (long double __x, long double *__iptr) ;

# 127 "/usr/include/bits/mathcalls.h" 3 4


extern long double expm1l (long double __x) ; extern long double __expm1l (long double __x) ;


extern long double log1pl (long double __x) ; extern long double __log1pl (long double __x) ;


extern long double logbl (long double __x) ; extern long double __logbl (long double __x) ;

# 152 "/usr/include/bits/mathcalls.h" 3 4


extern long double powl (long double __x, long double __y) ; extern long double __powl (long double __x, long double __y) ;


extern long double sqrtl (long double __x) ; extern long double __sqrtl (long double __x) ;





extern long double hypotl (long double __x, long double __y) ; extern long double __hypotl (long double __x, long double __y) ;






extern long double cbrtl (long double __x) ; extern long double __cbrtl (long double __x) ;








extern long double ceill (long double __x) ; extern long double __ceill (long double __x) ;


extern long double fabsl (long double __x) ; extern long double __fabsl (long double __x) ;


extern long double floorl (long double __x) ; extern long double __floorl (long double __x) ;


extern long double fmodl (long double __x, long double __y) ; extern long double __fmodl (long double __x, long double __y) ;




extern int __isinfl (long double __value) ;


extern int __finitel (long double __value) ;





extern int isinfl (long double __value) ;


extern int finitel (long double __value) ;


extern long double dreml (long double __x, long double __y) ; extern long double __dreml (long double __x, long double __y) ;



extern long double significandl (long double __x) ; extern long double __significandl (long double __x) ;





extern long double copysignl (long double __x, long double __y) ; extern long double __copysignl (long double __x, long double __y) ;

# 231 "/usr/include/bits/mathcalls.h" 3 4
extern int __isnanl (long double __value) ;



extern int isnanl (long double __value) ;


extern long double j0l (long double) ; extern long double __j0l (long double) ;
extern long double j1l (long double) ; extern long double __j1l (long double) ;
extern long double jnl (int, long double) ; extern long double __jnl (int, long double) ;
extern long double y0l (long double) ; extern long double __y0l (long double) ;
extern long double y1l (long double) ; extern long double __y1l (long double) ;
extern long double ynl (int, long double) ; extern long double __ynl (int, long double) ;






extern long double erfl (long double) ; extern long double __erfl (long double) ;
extern long double erfcl (long double) ; extern long double __erfcl (long double) ;
extern long double lgammal (long double) ; extern long double __lgammal (long double) ;

# 265 "/usr/include/bits/mathcalls.h" 3 4
extern long double gammal (long double) ; extern long double __gammal (long double) ;






extern long double lgammal_r (long double, int *__signgamp) ; extern long double __lgammal_r (long double, int *__signgamp) ;







extern long double rintl (long double __x) ; extern long double __rintl (long double __x) ;


extern long double nextafterl (long double __x, long double __y) ; extern long double __nextafterl (long double __x, long double __y) ;





extern long double remainderl (long double __x, long double __y) ; extern long double __remainderl (long double __x, long double __y) ;



extern long double scalbnl (long double __x, int __n) ; extern long double __scalbnl (long double __x, int __n) ;



extern int ilogbl (long double __x) ; extern int __ilogbl (long double __x) ;
# 110 "/usr/include/math.h" 2 3 4
# 125 "/usr/include/math.h" 3 4
extern int signgam;
# 252 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 277 "/usr/include/math.h" 3 4
struct exception

  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };




extern int matherr (struct exception *__exc);
# 423 "/usr/include/math.h" 3 4

# 6 "<stdin>" 2

# 1 "robot.h" 1






extern char mensaje[256];

extern double x, y;

extern double dir;

extern double volante;

extern double ox, oy;

extern int motor_trasero;

extern int sensores;

extern int volante_control;
extern double giro_objetivo, angulo;

void robot_init();
void robot_step();
void robot_close();
# 8 "<stdin>" 2
# 16 "<stdin>"
GtkWidget *main_window;
GtkWidget *main_vbox;
GtkWidget *main_drawing_area;
GtkWidget *status;
GtkWidget *motor;
GtkWidget *sensor[4];
GtkWidget *giro;
GtkWidget *init_window;

GdkDrawable *main_map;
GdkGC *gc;
GdkColor negro, blanco, amarillo, verde, gris;
GdkColormap *colourmap;
GdkPixmap *buffer;

int inicializando, paso, clicked;

gint interval;

void draw_cruz() {
        int x, y;
        x = (int) ox + 100;
        y = (int) oy + 100;
        gdk_draw_line(buffer, gc, x - 4, y - 4, x + 4, y + 4);
        gdk_draw_line(buffer, gc, x - 4, y + 4, x + 4, y - 4);
}

void draw_mike(int trace) {
        int x0, y0, x1, y1, x2, y2;
        x0 = (int) (x - 2.0 * cos(dir)) + 100;
        y0 = (int) (y + 2.0 * sin(dir)) + 100;
        x1 = (int) (x + 2.0 * cos(dir)) + 100;
        y1 = (int) (y - 2.0 * sin(dir)) + 100;
        x2 = (int) (x + 2.0 * 5 * sin(dir)) + 100;
        y2 = (int) (y + 2.0 * 5 * cos(dir)) + 100;
        gdk_draw_line(buffer, gc, x0, y0, x2, y2);
        gdk_draw_line(buffer, gc, x1, y1, x2, y2);
        x0 = (int) (x - 5 * sin(dir)) + 100;
        y0 = (int) (y - 5 * cos(dir)) + 100;
        x1 = (int) x + 100;
        y1 = (int) y + 100;
        gdk_gc_set_foreground(gc, &gris);
        if (trace)
                gdk_draw_line(buffer, gc, x0, y0, x1, y1);
}

void draw_sensores() {
        int i;
        for (i = 0; i < 4; i ++) {
                if ((sensores >> i) & 1)
                        gdk_gc_set_foreground(gc, &negro);
                else
                        gdk_gc_set_foreground(gc, &blanco);
                gdk_draw_rectangle(sensor[i]->window, gc, (!(0)), 0, 0, 20, 20);
        }
}

gint init() {
        switch (inicializando ++) {
        case 5:
                gtk_widget_show(init_window);
                gtk_widget_hide(main_window);
                break;
        case 10:
                robot_init();
                break;
        case 15:
                gtk_widget_hide(init_window);
                gtk_widget_show(main_window);
                inicializando = 0;
        }
        return (!(0));
}

gint step_handler(gpointer data) {
        if (inicializando)
                return init();

        paso ++;

        gdk_gc_set_foreground(gc, &negro);
        draw_mike(1);

        robot_step();

        gdk_gc_set_foreground(gc, &blanco);
        draw_mike(0);

        gdk_draw_drawable(main_map, gc, buffer, 0, 0, 0, 0, 200, 200);
        draw_sensores();

        if (!clicked)
                gtk_range_set_value(((((GtkRange*) g_type_check_instance_cast ((GTypeInstance*) ((giro)), ((gtk_range_get_type ())))))), volante * -1.25);
        if ((((g_type_check_instance_is_a ((GTypeInstance*) ((status)), ((gtk_label_get_type ())))))))
                gtk_label_set_text(((((GtkLabel*) g_type_check_instance_cast ((GTypeInstance*) ((status)), ((gtk_label_get_type ())))))), mensaje);

        return (!(0));
}

static gint main_configure(GtkWidget *widget, GdkEventConfigure *event) {
        main_map = widget->window;
        buffer = gdk_pixmap_new(main_drawing_area->window, 200, 200, -1);
        gc = gdk_gc_new(main_drawing_area->window);
        colourmap = gdk_drawable_get_colormap(main_drawing_area->window);

        negro.red = negro.green = negro.blue = 0;
        verde.red = verde.blue = amarillo.blue = 0;
        blanco.red = blanco.green = blanco.blue = 65535;
        amarillo.red = amarillo.green = verde.green = 65535;
        gris.red = gris.green = gris.blue = 20000;
        gdk_color_alloc(colourmap, &negro);
        gdk_color_alloc(colourmap, &blanco);
        gdk_color_alloc(colourmap, &amarillo);
        gdk_color_alloc(colourmap, &verde);
        gdk_color_alloc(colourmap, &gris);

        gdk_gc_set_background(gc, &negro);
        gdk_gc_set_foreground(gc, &negro);
        gdk_draw_rectangle(buffer, gc, (!(0)), 0, 0, 200, 200);

        inicializando = 1;
        paso = 0;
        motor_trasero = 1;
        clicked = 0;
        interval = gtk_timeout_add(50, step_handler, ((void *)0));

        return (0);
}

static gint main_expose(GtkWidget *widget, GdkEventExpose *event) {
        gdk_draw_drawable(
                        main_map, gc, buffer,
                        event->area.x, event->area.y,
                        event->area.x, event->area.y,
                        event->area.width, event->area.height);
        return (!(0));
}

static gint handle_button_press(GtkWidget *widget, GdkEventButton *event) {
        if (event->button == 1) {
                volante_control = 0;
                angulo = dir;

                gdk_gc_set_foreground(gc, &negro);
                draw_cruz();
                ox = event->x - 100;
                oy = event->y - 100;
                gdk_gc_set_foreground(gc, &verde);
                draw_cruz();
        }
        return (!(0));
}

static gint motor_toggle(GtkWidget *widget, GdkEventButton *event) {
        motor_trasero = !gtk_toggle_button_get_active(
                        ((((GtkToggleButton*) g_type_check_instance_cast ((GTypeInstance*) ((motor)), ((gtk_toggle_button_get_type ())))))));
        volante_control = 0;
        return (!(0));
}

static gint giro_clicked0(GtkWidget *widget, GdkEventButton *event) {
        clicked = 1;
        return (0);
}

static gint giro_clicked1(GtkWidget *widget, GdkEventButton *event) {
        clicked = 0;
        return (0);
}

static gint giro_cambio(GtkWidget *widget, GdkEventButton *event) {
        if (clicked) {
                volante_control = 1;
                giro_objetivo = gtk_range_get_value(((((GtkRange*) g_type_check_instance_cast ((GTypeInstance*) ((giro)), ((gtk_range_get_type ()))))))) / -1.25;
        }
        return (!(0));
}

void create_drawing_area() {
        GtkWidget *frame = gtk_frame_new(((void *)0));
        gtk_frame_set_shadow_type(((((GtkFrame*) g_type_check_instance_cast ((GTypeInstance*) ((frame)), ((gtk_frame_get_type ())))))), GTK_SHADOW_IN);
        gtk_box_pack_start(
                        ((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_box_get_type ())))))),
                        frame,
                        (0), (0), 0);
        gtk_widget_show(frame);

        main_drawing_area = gtk_drawing_area_new();
        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((main_drawing_area)), ((gtk_object_get_type ()))))))), ("expose_event"), ((GtkSignalFunc) main_expose), 0, (((void *)0)), 0, 0, 0);


        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((main_drawing_area)), ((gtk_object_get_type ()))))))), ("configure_event"), ((GtkSignalFunc) main_configure), 0, (((void *)0)), 0, 0, 0);


        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((main_drawing_area)), ((gtk_object_get_type ()))))))), ("button_press_event"), ((GtkSignalFunc) handle_button_press), 0, (((void *)0)), 0, 0, 0);


        gtk_drawing_area_size(
                        ((((GtkDrawingArea*) g_type_check_instance_cast ((GTypeInstance*) ((main_drawing_area)), ((gtk_drawing_area_get_type ())))))), 200, 200);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((frame)), ((gtk_container_get_type ())))))), main_drawing_area);
        gtk_widget_set_events(
                        main_drawing_area,
                        GDK_BUTTON_PRESS_MASK);
        gtk_widget_show(main_drawing_area);
}

void create_sensores() {
        GtkWidget *frame[4], *slabel, *sensor_hbox;

        slabel = gtk_label_new("\nEstados de sensores");
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_container_get_type ())))))), slabel);
        gtk_widget_show(slabel);

        sensor_hbox = gtk_hbox_new((!(0)), 0);
        gtk_container_set_border_width(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((sensor_hbox)), ((gtk_container_get_type ())))))), 3);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_container_get_type ())))))), sensor_hbox);
        gtk_widget_show(sensor_hbox);

        sensor[0] = gtk_drawing_area_new();
        sensor[1] = gtk_drawing_area_new();
        sensor[2] = gtk_drawing_area_new();
        sensor[3] = gtk_drawing_area_new();
        frame[0] = gtk_frame_new(((void *)0));
        frame[1] = gtk_frame_new(((void *)0));
        frame[2] = gtk_frame_new(((void *)0));
        frame[3] = gtk_frame_new(((void *)0));

        gtk_drawing_area_size(((((GtkDrawingArea*) g_type_check_instance_cast ((GTypeInstance*) ((sensor[0])), ((gtk_drawing_area_get_type ())))))), 20, 20);
        gtk_drawing_area_size(((((GtkDrawingArea*) g_type_check_instance_cast ((GTypeInstance*) ((sensor[1])), ((gtk_drawing_area_get_type ())))))), 20, 20);
        gtk_drawing_area_size(((((GtkDrawingArea*) g_type_check_instance_cast ((GTypeInstance*) ((sensor[2])), ((gtk_drawing_area_get_type ())))))), 20, 20);
        gtk_drawing_area_size(((((GtkDrawingArea*) g_type_check_instance_cast ((GTypeInstance*) ((sensor[3])), ((gtk_drawing_area_get_type ())))))), 20, 20);
        gtk_frame_set_shadow_type(((((GtkFrame*) g_type_check_instance_cast ((GTypeInstance*) ((frame[0])), ((gtk_frame_get_type ())))))), GTK_SHADOW_OUT);
        gtk_frame_set_shadow_type(((((GtkFrame*) g_type_check_instance_cast ((GTypeInstance*) ((frame[1])), ((gtk_frame_get_type ())))))), GTK_SHADOW_OUT);
        gtk_frame_set_shadow_type(((((GtkFrame*) g_type_check_instance_cast ((GTypeInstance*) ((frame[2])), ((gtk_frame_get_type ())))))), GTK_SHADOW_OUT);
        gtk_frame_set_shadow_type(((((GtkFrame*) g_type_check_instance_cast ((GTypeInstance*) ((frame[3])), ((gtk_frame_get_type ())))))), GTK_SHADOW_OUT);

        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((sensor_hbox)), ((gtk_box_get_type ())))))), frame[0], (0), (0), 0);
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((sensor_hbox)), ((gtk_box_get_type ())))))), frame[1], (0), (0), 0);
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((sensor_hbox)), ((gtk_box_get_type ())))))), frame[2], (0), (0), 0);
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((sensor_hbox)), ((gtk_box_get_type ())))))), frame[3], (0), (0), 0);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((frame[0])), ((gtk_container_get_type ())))))), sensor[0]);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((frame[1])), ((gtk_container_get_type ())))))), sensor[1]);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((frame[2])), ((gtk_container_get_type ())))))), sensor[2]);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((frame[3])), ((gtk_container_get_type ())))))), sensor[3]);

        gtk_widget_show(sensor[0]);
        gtk_widget_show(sensor[1]);
        gtk_widget_show(sensor[2]);
        gtk_widget_show(sensor[3]);
        gtk_widget_show(frame[0]);
        gtk_widget_show(frame[1]);
        gtk_widget_show(frame[2]);
        gtk_widget_show(frame[3]);
}

void create_init_window() {
        GtkWidget *init_status;

        init_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
        gtk_window_set_title(((((GtkWindow*) g_type_check_instance_cast ((GTypeInstance*) ((init_window)), ((gtk_window_get_type ())))))), "GPBot");
        gtk_window_set_policy(((((GtkWindow*) g_type_check_instance_cast ((GTypeInstance*) ((init_window)), ((gtk_window_get_type ())))))), (0), (0), (0));
        gtk_container_set_border_width(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((init_window)), ((gtk_container_get_type ())))))), 20);

        init_status = gtk_label_new("Conectando ...");
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((init_window)), ((gtk_container_get_type ())))))), init_status);
        gtk_widget_show(init_status);

        gtk_window_set_position(((((GtkWindow*) g_type_check_instance_cast ((GTypeInstance*) ((init_window)), ((gtk_window_get_type ())))))), GTK_WIN_POS_CENTER);
}

int main(int argc, char *argv[]) {
        gtk_init(&argc, &argv);

        main_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((main_window)), ((gtk_object_get_type ()))))))), ("destroy"), (((GtkSignalFunc) (gtk_main_quit))), 0, ("WM destroy"), 0, 0, 0);


        gtk_window_set_title(((((GtkWindow*) g_type_check_instance_cast ((GTypeInstance*) ((main_window)), ((gtk_window_get_type ())))))), "GPBot Control");
        gtk_window_set_policy(((((GtkWindow*) g_type_check_instance_cast ((GTypeInstance*) ((main_window)), ((gtk_window_get_type ())))))), (0), (0), (0));

        main_vbox = gtk_vbox_new((0), 1);
        gtk_container_set_border_width(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_container_get_type ())))))), 15);
        gtk_container_add(((((GtkContainer*) g_type_check_instance_cast ((GTypeInstance*) ((main_window)), ((gtk_container_get_type ())))))), main_vbox);
        gtk_widget_show(main_vbox);

        create_drawing_area();

        status = gtk_label_new("Status");
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_box_get_type ())))))), status, (0), (0), 4);
        gtk_widget_show(status);

        motor = gtk_check_button_new_with_label("Parar el motor trasero");
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_box_get_type ())))))), motor, (0), (0), 10);
        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((motor)), ((gtk_object_get_type ()))))))), ("toggled"), ((GtkSignalFunc) motor_toggle), 0, (((void *)0)), 0, 0, 0);


        gtk_widget_show(motor);

        giro = gtk_label_new("\nVolante");
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_box_get_type ())))))), giro, (0), (0), 0);
        gtk_widget_show(giro);

        giro = gtk_hscale_new_with_range(-1.0, 1.0, 0.1);
        gtk_box_pack_start(((((GtkBox*) g_type_check_instance_cast ((GTypeInstance*) ((main_vbox)), ((gtk_box_get_type ())))))), giro, (0), (0), 0);
        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((giro)), ((gtk_object_get_type ()))))))), ("value_changed"), ((GtkSignalFunc) giro_cambio), 0, (((void *)0)), 0, 0, 0);


        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((giro)), ((gtk_object_get_type ()))))))), ("button_press_event"), ((GtkSignalFunc) giro_clicked0), 0, (((void *)0)), 0, 0, 0);


        gtk_signal_connect_full ((((((GtkObject*) g_type_check_instance_cast ((GTypeInstance*) ((giro)), ((gtk_object_get_type ()))))))), ("button_release_event"), ((GtkSignalFunc) giro_clicked1), 0, (((void *)0)), 0, 0, 0);


        gtk_widget_show(giro);

        create_sensores();

        gtk_widget_show(main_window);

        create_init_window();
        gtk_main();

        robot_close();

        return 0;
	main_window->

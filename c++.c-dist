/* A Bison parser, made by GNU Bison 1.875a.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     T_IDENTIFIER = 258,
     T_TYPEDEF_ID = 259,
     T_ENUM_ID = 260,
     T_NAMESPACE_ID = 261,
     T_ALIAS_ID = 262,
     T_CLASS_ID = 263,
     T_TEMPLATE_ID = 264,
     T_NUM_LITERAL = 265,
     T_CHAR_LITERAL = 266,
     T_STRING_LITERAL = 267,
     T_BOOLEAN_LITERAL = 268,
     T_LANGLE = 269,
     T_RANGLE = 270,
     T_LPAREN = 271,
     T_RPAREN = 272,
     T_ELIPSIS = 273,
     T_COMMA = 274,
     T_LBRACK = 275,
     T_RBRACK = 276,
     T_LBRACE = 277,
     T_RBRACE = 278,
     T_EQ = 279,
     T_SCOPE = 280,
     T_SEMIC = 281,
     T_COLON = 282,
     T_DOTSTAR = 283,
     T_QUESTION = 284,
     T_DOT = 285,
     T_DYNAMIC_CAST = 286,
     T_STATIC_CAST = 287,
     T_REINTERPRET_CAST = 288,
     T_CONST_CAST = 289,
     T_TYPEID = 290,
     T_THIS = 291,
     T_TEMPLATE = 292,
     T_TYPENAME = 293,
     T_THROW = 294,
     T_TRY = 295,
     T_CATCH = 296,
     T_TYPEDEF = 297,
     T_FRIEND = 298,
     T_CLASS = 299,
     T_NAMESPACE = 300,
     T_ENUM = 301,
     T_STRUCT = 302,
     T_UNION = 303,
     T_VIRTUAL = 304,
     T_PRIVATE = 305,
     T_PROTECTED = 306,
     T_PUBLIC = 307,
     T_EXPORT = 308,
     T_AUTO = 309,
     T_REGISTER = 310,
     T_EXTERN = 311,
     T_MUTABLE = 312,
     T_ASM = 313,
     T_USING = 314,
     T_INLINE = 315,
     T_EXPLICIT = 316,
     T_STATIC = 317,
     T_CONST = 318,
     T_VOLATILE = 319,
     T_OVERLOAD = 320,
     T_OPERATOR = 321,
     T_SIZEOF = 322,
     T_NEW = 323,
     T_DELETE = 324,
     T_PLUS = 325,
     T_MINUS = 326,
     T_STAR = 327,
     T_SLASH = 328,
     T_PERCENT = 329,
     T_HAT = 330,
     T_AND = 331,
     T_OR = 332,
     T_TILDE = 333,
     T_NOT = 334,
     T_PLUS_EQ = 335,
     T_MINUS_EQ = 336,
     T_STAR_EQ = 337,
     T_SLASH_EQ = 338,
     T_PERCENT_EQ = 339,
     T_HAT_EQ = 340,
     T_AND_EQ = 341,
     T_OR_EQ = 342,
     T_LTLT = 343,
     T_GTGT = 344,
     T_GTGT_EQ = 345,
     T_LTLT_EQ = 346,
     T_EQEQ = 347,
     T_NE = 348,
     T_LE = 349,
     T_GE = 350,
     T_ANDAND = 351,
     T_OROR = 352,
     T_INCR = 353,
     T_DECR = 354,
     T_ARROW_STAR = 355,
     T_ARROW = 356,
     T_FUNCTION = 357,
     T_SUBSCRIPT = 358,
     T_CHAR = 359,
     T_WCHAR = 360,
     T_BOOL = 361,
     T_SHORT = 362,
     T_INT = 363,
     T_LONG = 364,
     T_SIGNED = 365,
     T_UNSIGNED = 366,
     T_FLOAT = 367,
     T_DOUBLE = 368,
     T_VOID = 369,
     T_CASE = 370,
     T_DEFAULT = 371,
     T_IF = 372,
     T_ELSE = 373,
     T_SWITCH = 374,
     T_WHILE = 375,
     T_DO = 376,
     T_FOR = 377,
     T_BREAK = 378,
     T_CONTINUE = 379,
     T_GOTO = 380,
     T_RETURN = 381,
     T_TYPEOF = 382,
     T_THREAD = 383,
     T_MINIMUM = 384,
     T_MAXIMUM = 385,
     T_RESTRICT = 386,
     T_SPECIAL = 387,
     T_LAST_TOKEN = 388,
     PREC = 389
   };
#endif
#define T_IDENTIFIER 258
#define T_TYPEDEF_ID 259
#define T_ENUM_ID 260
#define T_NAMESPACE_ID 261
#define T_ALIAS_ID 262
#define T_CLASS_ID 263
#define T_TEMPLATE_ID 264
#define T_NUM_LITERAL 265
#define T_CHAR_LITERAL 266
#define T_STRING_LITERAL 267
#define T_BOOLEAN_LITERAL 268
#define T_LANGLE 269
#define T_RANGLE 270
#define T_LPAREN 271
#define T_RPAREN 272
#define T_ELIPSIS 273
#define T_COMMA 274
#define T_LBRACK 275
#define T_RBRACK 276
#define T_LBRACE 277
#define T_RBRACE 278
#define T_EQ 279
#define T_SCOPE 280
#define T_SEMIC 281
#define T_COLON 282
#define T_DOTSTAR 283
#define T_QUESTION 284
#define T_DOT 285
#define T_DYNAMIC_CAST 286
#define T_STATIC_CAST 287
#define T_REINTERPRET_CAST 288
#define T_CONST_CAST 289
#define T_TYPEID 290
#define T_THIS 291
#define T_TEMPLATE 292
#define T_TYPENAME 293
#define T_THROW 294
#define T_TRY 295
#define T_CATCH 296
#define T_TYPEDEF 297
#define T_FRIEND 298
#define T_CLASS 299
#define T_NAMESPACE 300
#define T_ENUM 301
#define T_STRUCT 302
#define T_UNION 303
#define T_VIRTUAL 304
#define T_PRIVATE 305
#define T_PROTECTED 306
#define T_PUBLIC 307
#define T_EXPORT 308
#define T_AUTO 309
#define T_REGISTER 310
#define T_EXTERN 311
#define T_MUTABLE 312
#define T_ASM 313
#define T_USING 314
#define T_INLINE 315
#define T_EXPLICIT 316
#define T_STATIC 317
#define T_CONST 318
#define T_VOLATILE 319
#define T_OVERLOAD 320
#define T_OPERATOR 321
#define T_SIZEOF 322
#define T_NEW 323
#define T_DELETE 324
#define T_PLUS 325
#define T_MINUS 326
#define T_STAR 327
#define T_SLASH 328
#define T_PERCENT 329
#define T_HAT 330
#define T_AND 331
#define T_OR 332
#define T_TILDE 333
#define T_NOT 334
#define T_PLUS_EQ 335
#define T_MINUS_EQ 336
#define T_STAR_EQ 337
#define T_SLASH_EQ 338
#define T_PERCENT_EQ 339
#define T_HAT_EQ 340
#define T_AND_EQ 341
#define T_OR_EQ 342
#define T_LTLT 343
#define T_GTGT 344
#define T_GTGT_EQ 345
#define T_LTLT_EQ 346
#define T_EQEQ 347
#define T_NE 348
#define T_LE 349
#define T_GE 350
#define T_ANDAND 351
#define T_OROR 352
#define T_INCR 353
#define T_DECR 354
#define T_ARROW_STAR 355
#define T_ARROW 356
#define T_FUNCTION 357
#define T_SUBSCRIPT 358
#define T_CHAR 359
#define T_WCHAR 360
#define T_BOOL 361
#define T_SHORT 362
#define T_INT 363
#define T_LONG 364
#define T_SIGNED 365
#define T_UNSIGNED 366
#define T_FLOAT 367
#define T_DOUBLE 368
#define T_VOID 369
#define T_CASE 370
#define T_DEFAULT 371
#define T_IF 372
#define T_ELSE 373
#define T_SWITCH 374
#define T_WHILE 375
#define T_DO 376
#define T_FOR 377
#define T_BREAK 378
#define T_CONTINUE 379
#define T_GOTO 380
#define T_RETURN 381
#define T_TYPEOF 382
#define T_THREAD 383
#define T_MINIMUM 384
#define T_MAXIMUM 385
#define T_RESTRICT 386
#define T_SPECIAL 387
#define T_LAST_TOKEN 388
#define PREC 389




/* Copy the first part of user declarations.  */
#line 37 "c++.y"

#	include <string.h>
#	include <stdio.h>

#	include "parser.h"
#	include "cguess.h"
#	include "scope.h"
#	include "sstack.h"
#	include "fifo.h"

#	define YYSTYPE	token_val_t
#	define yyparse	parse
#	define yyerror	error
#	define yydebug	debug
#	define yylex	lexer

#	define PARSER_INIT()	\
		scope_init();	\
		sstack_init(&id_stack, sizeof(char *));	\
		sstack_init(&type_stack, sizeof(struct type_s));	\
		fifo_init(id_fifo)

#	define PARSER_DONE()	\
		scope_done();	\
		sstack_done(&id_stack);	\
		sstack_done(&type_stack)

#	define IDENTIFIER_EMPTY()	\
		last_id[0] = 0

#	define IDENTIFIER_AUTO()	\
		sprintf(last_id, "%i", auto_id ++)

#	define IDENTIFIER(str)	\
		strncpy(last_id, str, MAX_ID_LEN)

#	define PUSH_ID(x)	\
		*(char **) sstack_push(&id_stack) = x

#	define PUSH_AUTO_ID()	\
		PUSH_ID(0)
/* TODO: move automatic ID generation to scope.c */

#	define PUSH_OP_ID(op)	/* TODO */	\
		PUSH_ID(op.definition->name)

#	define POP_ID()	\
		(*(char **) sstack_pop(&id_stack))

#	define TOP_ID()	\
		(*(char **) sstack_top(&id_stack))

#	define POPFREE_ID()	\
		sstack_pop(&id_stack)

#	define PUSH_TYPE(x)	\
		(*(struct type_s *) sstack_push(&type_stack)) = x

#	define POP_TYPE()	\
		(*(struct type_s *) sstack_pop(&type_stack))

#	define TOP_TYPE()	\
		(*(struct type_s *) sstack_top(&type_stack))

#	define PASS_ID()	\
		PUSH_ID(fifo_pop(id_fifo))

#	define POPFREE_TYPE()	\
		type_dispose(POP_TYPE())

#	define ENTER(class)	\
		scope_open(POP_ID(), class, POP_TYPE())

#	define ENTER_ANONYMOUS()	/* TODO: Assign an AUTO_ID */	\
		scope_open(0, unnamed_c, type_simple(void_t))

#	define LEAVE()	\
		scope_close()

#	define ENTER_PARAMS_AT(type)	\
		type.nested ? scope_open_params(type.definition) : \
		scope_open_params(0)

#	define ENTER_PARAMS()	\
		scope_open_params(0)

#	define TYPE_SET(type)	\
		type_dispose(last_type); \
		last_type = type

#	define TYPE_GET()	/* TODO: */	\
		(__extension__ ({ struct identifier_s *__id =	\
			scope_lookup(TOP_ID());	\
			__id ? type_copy(__id->type) :	\
					type_simple(void_t); }))

#	define TYPE_THIS()	\
		scope_this()

#	define TYPE_LOOKUP(class)	\
		type_copy(scope_local_lookup(class, POP_ID()))

#	define TYPE_FN_OR_CTOR(type, is_ctor)	\
		is_ctor.nested ? type_return(type) : type

#	define TYPE_OP(op)	\
		({ scope_stmt_pop(); scope_define_operator(op); })

#	define DEFINE(class)	\
		type_copy(scope_define(POP_ID(), class, POP_TYPE()))

#	define DEFINE_VAR_OR_FUNC(x)	\
		if (is_type_def)	\
			scope_define(POP_ID(), typename_c,	\
			type_connect(type_copy(TOP_TYPE()), x));	\
		else	\
			scope_define(POP_ID(), variable_c, \
			type_connect(type_copy(TOP_TYPE()), x))

#	define DEFINE_VA_LIST()	\
		scope_define("...", variable_c, type_simple(void_t))

#	define USING()	\
		scope_using(POP_TYPE())

#	define USING_ID(type)	\
		scope_using_id(type, id_class, POP_ID())

#	define DESTRUCTOR_ID()	\
		POPFREE_TYPE();	\
		TOP_ID() = identifier_destructor(TOP_ID())

#	define ID_CLASS(class)	\
		id_class = class

#	define ID_MANGLE()	\
		TOP_ID() = is_destructor ? identifier_destructor(TOP_ID()) : \
			identifier_constructor(TOP_ID()); is_destructor = 0

/* TODO: check for destructors */
#	define ID_FROM_TYPE()	\
		(__extension__ ({ struct identifier_s *__id =	\
			POP_TYPE().definition;	\
			if (!__id)	\
				PUSH_ID("bad_constructor");	\
			else if (__id->name[0] == '%')	\
				PUSH_ID(__id->name + 1);	\
			else	\
				PUSH_ID(__id->name); }))

	/*
	 * We have these global variables for the purpose of
	 * inheritance of attributes between siblings in the
	 * grammar tree.
	 */
	int is_type_def = 0;

	/*
	 * The stacks of attributes.
	 */
	struct sstack_s id_stack;
	struct sstack_s type_stack;
	fifo(char *) id_fifo;

	/*
	 * The class of identifier returned by
	 * NESTED_TYPE_OR_NAME_SPECIFIER.
	 */
	identifier_class_t id_class;
	int is_destructor = 0;

	/*
	 * yydebug tells the parser if it should display information
	 * on the shifts and reductions that it is doing on stderr.
	 */
	int yydebug = 1;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 533 "y.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   6319

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  135
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  273
/* YYNRULES -- Number of rules. */
#define YYNRULES  708
/* YYNRULES -- Number of states. */
#define YYNSTATES  1186

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   389

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     4,     8,    10,    12,    15,    17,    18,
      21,    22,    24,    26,    27,    29,    30,    32,    34,    37,
      38,    40,    42,    44,    46,    48,    50,    52,    54,    56,
      58,    60,    62,    64,    67,    72,    77,    82,    86,    88,
      90,    93,    96,    99,   102,   105,   108,   111,   113,   117,
     121,   122,   125,   128,   131,   134,   137,   138,   141,   144,
     147,   150,   153,   156,   158,   161,   163,   165,   167,   169,
     171,   173,   175,   177,   179,   181,   183,   185,   190,   192,
     194,   199,   201,   203,   205,   207,   209,   211,   213,   215,
     217,   219,   221,   223,   225,   227,   229,   231,   236,   238,
     240,   245,   248,   251,   253,   255,   258,   261,   263,   264,
     267,   269,   271,   273,   276,   279,   282,   283,   285,   286,
     289,   290,   291,   294,   296,   299,   303,   305,   307,   311,
     313,   317,   319,   321,   323,   325,   327,   329,   331,   333,
     334,   341,   342,   349,   350,   356,   358,   360,   366,   368,
     370,   375,   380,   387,   395,   396,   400,   404,   405,   407,
     410,   414,   417,   421,   425,   426,   433,   437,   438,   442,
     443,   445,   447,   451,   454,   457,   460,   462,   465,   468,
     471,   473,   476,   479,   482,   484,   487,   490,   493,   495,
     498,   501,   503,   506,   508,   514,   519,   524,   527,   531,
     533,   539,   544,   549,   552,   556,   558,   564,   569,   574,
     577,   583,   588,   593,   596,   601,   604,   607,   610,   613,
     616,   618,   622,   625,   627,   629,   631,   632,   634,   636,
     638,   641,   644,   645,   647,   650,   652,   653,   655,   661,
     666,   667,   673,   676,   680,   683,   684,   686,   689,   693,
     695,   699,   700,   702,   705,   710,   713,   718,   720,   722,
     725,   728,   731,   735,   737,   740,   742,   743,   746,   750,
     752,   756,   757,   759,   762,   764,   768,   770,   772,   777,
     780,   782,   785,   787,   789,   791,   792,   795,   799,   802,
     807,   810,   815,   818,   823,   826,   830,   834,   836,   838,
     840,   841,   845,   851,   859,   864,   869,   876,   881,   888,
     889,   892,   895,   898,   900,   904,   907,   909,   913,   916,
     918,   922,   924,   925,   928,   930,   932,   934,   938,   940,
     943,   946,   948,   950,   952,   955,   958,   960,   962,   967,
     969,   971,   974,   977,   978,   981,   983,   986,   987,   990,
     992,   996,  1001,  1004,  1006,  1009,  1011,  1013,  1015,  1017,
    1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,  1037,
    1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,  1057,
    1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,  1077,
    1079,  1081,  1083,  1085,  1087,  1089,  1091,  1093,  1095,  1097,
    1103,  1110,  1115,  1121,  1127,  1134,  1136,  1138,  1140,  1144,
    1146,  1148,  1151,  1156,  1159,  1164,  1171,  1180,  1185,  1187,
    1189,  1193,  1194,  1196,  1198,  1200,  1203,  1208,  1211,  1216,
    1219,  1224,  1227,  1230,  1233,  1236,  1239,  1242,  1245,  1246,
    1247,  1253,  1254,  1255,  1262,  1265,  1266,  1268,  1269,  1276,
    1279,  1282,  1285,  1288,  1293,  1296,  1297,  1299,  1301,  1305,
    1306,  1308,  1310,  1312,  1314,  1316,  1318,  1320,  1322,  1324,
    1328,  1333,  1337,  1340,  1344,  1346,  1349,  1350,  1352,  1353,
    1354,  1355,  1365,  1366,  1373,  1374,  1378,  1379,  1381,  1385,
    1388,  1390,  1391,  1393,  1394,  1401,  1402,  1403,  1413,  1414,
    1424,  1426,  1428,  1431,  1434,  1438,  1442,  1444,  1446,  1448,
    1450,  1452,  1454,  1458,  1460,  1462,  1466,  1468,  1470,  1472,
    1474,  1479,  1481,  1482,  1484,  1486,  1489,  1492,  1496,  1498,
    1500,  1503,  1506,  1508,  1511,  1515,  1518,  1520,  1523,  1525,
    1528,  1531,  1535,  1538,  1540,  1543,  1546,  1550,  1553,  1556,
    1560,  1562,  1565,  1568,  1572,  1575,  1579,  1583,  1588,  1590,
    1593,  1596,  1600,  1603,  1605,  1608,  1611,  1613,  1616,  1619,
    1621,  1624,  1626,  1629,  1631,  1634,  1640,  1643,  1649,  1656,
    1659,  1661,  1666,  1671,  1675,  1678,  1683,  1686,  1691,  1694,
    1699,  1704,  1708,  1712,  1716,  1720,  1723,  1726,  1734,  1742,
    1750,  1758,  1766,  1774,  1782,  1790,  1795,  1800,  1802,  1806,
    1807,  1809,  1812,  1816,  1818,  1821,  1824,  1827,  1830,  1835,
    1837,  1839,  1841,  1843,  1845,  1847,  1849,  1851,  1856,  1863,
    1867,  1868,  1870,  1873,  1876,  1878,  1879,  1881,  1885,  1890,
    1894,  1896,  1897,  1899,  1902,  1905,  1907,  1912,  1914,  1918,
    1922,  1924,  1928,  1932,  1936,  1938,  1942,  1946,  1948,  1952,
    1956,  1958,  1962,  1966,  1970,  1974,  1978,  1980,  1984,  1988,
    1992,  1996,  1998,  2002,  2004,  2008,  2010,  2014,  2016,  2020,
    2022,  2026,  2028,  2034,  2036,  2040,  2042,  2043,  2045,  2047,
    2049,  2051,  2053,  2055,  2057,  2059,  2061,  2063,  2065,  2067,
    2069,  2073,  2074,  2076,  2078,  2079,  2081,  2085,  2088
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     136,     0,    -1,    -1,   137,   144,   132,    -1,    10,    -1,
      11,    -1,    12,   139,    -1,    13,    -1,    -1,    12,   139,
      -1,    -1,   141,    -1,     3,    -1,    -1,    18,    -1,    -1,
      38,    -1,   146,    -1,   144,   146,    -1,    -1,   144,    -1,
     147,    -1,   245,    -1,   294,    -1,   306,    -1,   307,    -1,
     203,    -1,   183,    -1,   148,    -1,   197,    -1,   193,    -1,
     195,    -1,   196,    -1,   149,    26,    -1,   149,   209,   205,
      26,    -1,   149,   210,   205,    26,    -1,   149,   267,   205,
      26,    -1,   215,   205,    26,    -1,    26,    -1,   150,    -1,
      43,   151,    -1,    42,   151,    -1,   155,   151,    -1,   156,
     151,    -1,   227,   151,    -1,   161,   154,    -1,   158,   153,
      -1,   152,    -1,   152,   161,   154,    -1,   152,   158,   153,
      -1,    -1,    43,   152,    -1,    42,   152,    -1,   155,   152,
      -1,   156,   152,    -1,   227,   152,    -1,    -1,    43,   153,
      -1,    42,   153,    -1,   155,   153,    -1,   156,   153,    -1,
     227,   153,    -1,   161,   153,    -1,   153,    -1,   153,   216,
      -1,    54,    -1,    55,    -1,    62,    -1,    56,    -1,    57,
      -1,   128,    -1,    60,    -1,    49,    -1,    61,    -1,     4,
      -1,   361,    -1,   163,    -1,   127,    16,   355,    17,    -1,
     362,    -1,   163,    -1,   127,    16,   355,    17,    -1,   361,
      -1,   161,    -1,   163,    -1,   227,    -1,   104,    -1,   105,
      -1,   106,    -1,   107,    -1,   108,    -1,   109,    -1,   110,
      -1,   111,    -1,   112,    -1,   113,    -1,   114,    -1,   253,
      -1,   253,    14,   304,    15,    -1,   169,    -1,   157,    -1,
     157,    14,   304,    15,    -1,   257,   165,    -1,   164,   170,
      -1,    46,    -1,   167,    -1,   141,   166,    -1,   171,   254,
      -1,   254,    -1,    -1,   168,   254,    -1,   361,    -1,   361,
      -1,     5,    -1,   361,   173,    -1,   141,   172,    -1,   171,
     175,    -1,    -1,   175,    -1,    -1,   174,   175,    -1,    -1,
      -1,   176,   177,    -1,    22,    -1,   178,    23,    -1,   178,
      19,    23,    -1,    23,    -1,   179,    -1,   178,    19,   179,
      -1,   180,    -1,   180,    24,   403,    -1,   141,    -1,   182,
      -1,   192,    -1,     6,    -1,   184,    -1,   189,    -1,   185,
      -1,   187,    -1,    -1,    45,   141,    22,   186,   191,    23,
      -1,    -1,    45,   363,    22,   188,   191,    23,    -1,    -1,
      45,    22,   190,   191,    23,    -1,   145,    -1,     7,    -1,
      45,   141,    24,   194,    26,    -1,   363,    -1,   365,    -1,
      59,   143,   360,    26,    -1,    59,    45,   194,    26,    -1,
      58,    16,    12,   198,    17,    26,    -1,    58,    64,    16,
      12,   198,    17,    26,    -1,    -1,   198,    27,   199,    -1,
     198,    19,   199,    -1,    -1,   200,    -1,   200,   201,    -1,
     202,   200,   201,    -1,    12,   139,    -1,    16,   386,    17,
      -1,    20,   354,    21,    -1,    -1,    56,    12,    22,   204,
     145,    23,    -1,    56,    12,   146,    -1,    -1,   205,    19,
     208,    -1,    -1,   207,    -1,   208,    -1,   207,    19,   208,
      -1,   211,   249,    -1,   213,   249,    -1,   214,   249,    -1,
     217,    -1,   225,   211,    -1,   217,   216,    -1,   217,   287,
      -1,   218,    -1,   225,   211,    -1,   218,   216,    -1,   218,
     287,    -1,   219,    -1,   225,   211,    -1,   219,   216,    -1,
     219,   287,    -1,   220,    -1,   220,   216,    -1,   220,   287,
      -1,   212,    -1,    27,    10,    -1,   229,    -1,   221,   244,
      17,   228,   323,    -1,   217,   102,   228,   323,    -1,   217,
      20,   404,    21,    -1,   217,   103,    -1,    16,   211,    17,
      -1,   230,    -1,   222,   240,    17,   228,   323,    -1,   218,
     102,   228,   323,    -1,   218,    20,   404,    21,    -1,   218,
     103,    -1,    16,   211,    17,    -1,   229,    -1,   223,   244,
      17,   228,   323,    -1,   219,   102,   228,   323,    -1,   219,
      20,   404,    21,    -1,   219,   103,    -1,   224,   244,    17,
     228,   323,    -1,   220,   102,   228,   323,    -1,   220,    20,
     404,    21,    -1,   220,   103,    -1,   263,    16,   212,    17,
      -1,   217,    16,    -1,   218,    16,    -1,   219,    16,    -1,
     220,    16,    -1,    72,   228,    -1,    76,    -1,   358,    72,
     228,    -1,   227,   228,    -1,    63,    -1,    64,    -1,    65,
      -1,    -1,   226,    -1,   360,    -1,   357,    -1,   232,   235,
      -1,   160,   233,    -1,    -1,   232,    -1,   225,   235,    -1,
     236,    -1,    -1,   234,    -1,   238,   240,    17,   228,   323,
      -1,   239,   102,   228,   323,    -1,    -1,   239,    20,   237,
     404,    21,    -1,   239,   103,    -1,    16,   234,    17,    -1,
     239,    16,    -1,    -1,   236,    -1,   242,   142,    -1,   241,
      19,    18,    -1,   243,    -1,   241,    19,   243,    -1,    -1,
     241,    -1,   150,   211,    -1,   150,   211,    24,   398,    -1,
     150,   235,    -1,   150,   235,    24,   398,    -1,   240,    -1,
     370,    -1,   149,   268,    -1,   149,   270,    -1,   149,   272,
      -1,   215,   246,   247,    -1,    22,    -1,   331,    23,    -1,
     329,    -1,    -1,    24,   250,    -1,    16,   370,    17,    -1,
     398,    -1,    22,   251,    23,    -1,    -1,   252,    -1,   252,
      19,    -1,   250,    -1,   252,    19,   250,    -1,     8,    -1,
     301,    -1,   275,   276,    22,   256,    -1,   255,   256,    -1,
      22,    -1,   258,    23,    -1,    44,    -1,    47,    -1,    48,
      -1,    -1,   258,   259,    -1,   258,   279,    27,    -1,   149,
      26,    -1,   149,   265,   260,    26,    -1,   149,   268,    -1,
     149,   266,   260,    26,    -1,   149,   270,    -1,   149,   267,
     260,    26,    -1,   149,   272,    -1,   215,   260,    26,    -1,
     215,   246,   247,    -1,   195,    -1,   295,    -1,    26,    -1,
      -1,   260,    19,   264,    -1,   262,    17,   228,   323,   288,
      -1,   262,    19,   240,    17,   228,   323,   288,    -1,   102,
     228,   323,   288,    -1,   263,    16,   150,   211,    -1,   263,
      16,   150,   211,    24,   398,    -1,   263,    16,   150,   235,
      -1,   263,    16,   150,   235,    24,   398,    -1,    -1,   211,
     274,    -1,   213,   274,    -1,   214,   274,    -1,   261,    -1,
     269,   246,   247,    -1,   269,   313,    -1,   213,    -1,   271,
     246,   247,    -1,   271,   313,    -1,   214,    -1,   273,   246,
     247,    -1,   261,    -1,    -1,    24,   403,    -1,    27,    -1,
     277,    -1,   278,    -1,   278,    19,   277,    -1,   361,    -1,
      49,   278,    -1,   279,   278,    -1,    50,    -1,    51,    -1,
      52,    -1,   286,   281,    -1,   282,   285,    -1,   283,    -1,
     361,    -1,   361,    14,   304,    15,    -1,   161,    -1,   284,
      -1,   257,   361,    -1,    46,   361,    -1,    -1,   285,   225,
      -1,    66,    -1,    27,   289,    -1,    -1,    27,   289,    -1,
     290,    -1,   290,    19,   289,    -1,   291,    16,   371,    17,
      -1,   291,   102,    -1,   360,    -1,   286,   293,    -1,    68,
      -1,    69,    -1,   406,    -1,   407,    -1,    70,    -1,    71,
      -1,    72,    -1,    73,    -1,    74,    -1,    75,    -1,    76,
      -1,    77,    -1,    78,    -1,    79,    -1,    24,    -1,    14,
      -1,    15,    -1,    80,    -1,    81,    -1,    82,    -1,    83,
      -1,    84,    -1,    85,    -1,    86,    -1,    87,    -1,    88,
      -1,    89,    -1,    90,    -1,    91,    -1,    92,    -1,    93,
      -1,    94,    -1,    95,    -1,    96,    -1,    97,    -1,    98,
      -1,    99,    -1,    19,    -1,   100,    -1,   101,    -1,   102,
      -1,   103,    -1,   129,    -1,   130,    -1,    37,   296,   298,
     297,   146,    -1,    53,    37,   296,   298,   297,   146,    -1,
      56,    37,   150,    26,    -1,    56,    37,   150,   211,    26,
      -1,    37,   296,   298,   297,   259,    -1,    53,    37,   296,
     298,   297,   259,    -1,    14,    -1,    15,    -1,   299,    -1,
     298,    19,   299,    -1,   300,    -1,   308,    -1,    44,   140,
      -1,    44,   140,    24,   231,    -1,    38,   140,    -1,    38,
     140,    24,   231,    -1,    37,    14,   298,    15,    44,   140,
      -1,    37,    14,   298,    15,    44,   140,    24,   354,    -1,
     302,    14,   304,    15,    -1,     9,    -1,   305,    -1,   303,
      19,   305,    -1,    -1,   303,    -1,   389,    -1,   231,    -1,
      37,   146,    -1,    37,   296,   297,   146,    -1,   309,   211,
      -1,   309,   211,    24,   389,    -1,   309,   235,    -1,   309,
     235,    24,   389,    -1,    43,   151,    -1,    42,   151,    -1,
     155,   151,    -1,   156,   151,    -1,   227,   151,    -1,   161,
     154,    -1,   159,   153,    -1,    -1,    -1,    40,   311,   329,
     312,   316,    -1,    -1,    -1,    40,   314,   288,   248,   315,
     316,    -1,   318,   317,    -1,    -1,   316,    -1,    -1,    41,
      16,   320,    17,   319,   329,    -1,   232,   211,    -1,   232,
     234,    -1,   232,    18,    -1,    39,   399,    -1,    39,    16,
     325,    17,    -1,    39,   102,    -1,    -1,   322,    -1,   231,
      -1,   324,    19,   231,    -1,    -1,   324,    -1,   327,    -1,
     328,    -1,   329,    -1,   332,    -1,   343,    -1,   349,    -1,
     350,    -1,   310,    -1,   141,    27,   326,    -1,   115,   403,
      27,   326,    -1,   116,    27,   326,    -1,   402,    26,    -1,
      22,   331,    23,    -1,   326,    -1,   330,   326,    -1,    -1,
     330,    -1,    -1,    -1,    -1,   117,    16,   333,   339,    17,
     334,   326,   335,   337,    -1,    -1,   119,    16,   336,   339,
      17,   326,    -1,    -1,   118,   338,   326,    -1,    -1,   401,
      -1,   340,    24,   398,    -1,   341,   211,    -1,   232,    -1,
      -1,   339,    -1,    -1,   120,    16,   344,   339,    17,   326,
      -1,    -1,    -1,   121,   345,   326,   346,   120,    16,   401,
      17,    26,    -1,    -1,   122,    16,   347,   348,   342,    26,
     402,    17,   326,    -1,   328,    -1,   352,    -1,   123,    26,
      -1,   124,    26,    -1,   126,   402,    26,    -1,   125,   141,
      26,    -1,   351,    -1,   352,    -1,   197,    -1,   193,    -1,
     195,    -1,   196,    -1,   149,   206,    26,    -1,   138,    -1,
      36,    -1,    16,   401,    17,    -1,   354,    -1,   405,    -1,
     357,    -1,   141,    -1,   141,    14,   304,    15,    -1,   292,
      -1,    -1,    37,    -1,   355,    -1,   359,   355,    -1,   367,
     355,    -1,   367,   359,   355,    -1,   359,    -1,   367,    -1,
     367,   359,    -1,   367,   132,    -1,   368,    -1,   359,   368,
      -1,   359,    37,   368,    -1,   359,   132,    -1,   355,    -1,
     358,   355,    -1,   162,    -1,   359,   162,    -1,   367,   162,
      -1,   367,   359,   162,    -1,   367,   132,    -1,   162,    -1,
     359,   162,    -1,   367,   162,    -1,   367,   359,   162,    -1,
      38,   357,    -1,    38,   162,    -1,    38,   359,   162,    -1,
     280,    -1,   359,   280,    -1,   367,   280,    -1,   367,   359,
     280,    -1,    78,   253,    -1,   359,    78,   253,    -1,   367,
      78,   253,    -1,   367,   359,    78,   253,    -1,   162,    -1,
     359,   162,    -1,   367,   162,    -1,   367,   359,   162,    -1,
     367,   132,    -1,   364,    -1,   367,   364,    -1,   367,   132,
      -1,   182,    -1,   368,   364,    -1,   368,   132,    -1,   366,
      -1,   367,   366,    -1,   192,    -1,   368,   366,    -1,    25,
      -1,   157,    25,    -1,   157,    14,   304,    15,    25,    -1,
     253,    25,    -1,   253,    14,   304,    15,    25,    -1,    37,
     141,    14,   304,    15,    25,    -1,   181,    25,    -1,   353,
      -1,   369,    20,   401,    21,    -1,   369,    16,   371,    17,
      -1,   369,    16,   132,    -1,   369,   102,    -1,   161,    16,
     371,    17,    -1,   161,   102,    -1,   361,    16,   371,    17,
      -1,   361,   102,    -1,   369,    30,   356,   355,    -1,   369,
     101,   356,   355,    -1,   369,    30,   132,    -1,   369,   101,
     132,    -1,   369,    30,   372,    -1,   369,   101,   372,    -1,
     369,    98,    -1,   369,    99,    -1,    31,    14,   231,    15,
      16,   401,    17,    -1,    32,    14,   231,    15,    16,   401,
      17,    -1,    33,    14,   231,    15,    16,   401,    17,    -1,
      34,    14,   231,    15,    16,   401,    17,    -1,    31,    94,
     231,    15,    16,   401,    17,    -1,    32,    94,   231,    15,
      16,   401,    17,    -1,    33,    94,   231,    15,    16,   401,
      17,    -1,    34,    94,   231,    15,    16,   401,    17,    -1,
      35,    16,   401,    17,    -1,    35,    16,   231,    17,    -1,
     398,    -1,   370,    19,   398,    -1,    -1,   370,    -1,    78,
     253,    -1,   359,    78,   253,    -1,   369,    -1,    98,   385,
      -1,    99,   385,    -1,   374,   385,    -1,    67,   373,    -1,
      67,    16,   231,    17,    -1,   375,    -1,   384,    -1,    72,
      -1,    76,    -1,    70,    -1,    71,    -1,    79,    -1,    78,
      -1,    68,   377,   378,   383,    -1,    68,   377,    16,   231,
      17,   383,    -1,    16,   370,    17,    -1,    -1,   376,    -1,
     282,   380,    -1,   225,   380,    -1,   381,    -1,    -1,   379,
      -1,    20,   401,    21,    -1,   381,    20,   403,    21,    -1,
      16,   371,    17,    -1,   102,    -1,    -1,   382,    -1,    69,
     385,    -1,   407,   385,    -1,   373,    -1,    16,   231,    17,
     385,    -1,   385,    -1,   386,    28,   385,    -1,   386,   100,
     385,    -1,   386,    -1,   387,    72,   386,    -1,   387,    73,
     386,    -1,   387,    74,   386,    -1,   387,    -1,   388,    70,
     387,    -1,   388,    71,   387,    -1,   388,    -1,   389,    88,
     388,    -1,   389,    89,   388,    -1,   389,    -1,   390,    15,
     389,    -1,   390,    94,   389,    -1,   390,    95,   389,    -1,
     390,   129,   389,    -1,   390,   130,   389,    -1,   390,    -1,
     391,    92,   390,    -1,   391,    93,   390,    -1,   391,    92,
     132,    -1,   391,    93,   132,    -1,   391,    -1,   392,    76,
     391,    -1,   392,    -1,   393,    75,   392,    -1,   393,    -1,
     394,    77,   393,    -1,   394,    -1,   395,    96,   394,    -1,
     395,    -1,   396,    97,   395,    -1,   396,    -1,   396,    29,
     401,    27,   398,    -1,   397,    -1,   396,   400,   398,    -1,
     321,    -1,    -1,   398,    -1,    24,    -1,    82,    -1,    83,
      -1,    84,    -1,    80,    -1,    81,    -1,    90,    -1,    91,
      -1,    86,    -1,    85,    -1,    87,    -1,   398,    -1,   401,
      19,   398,    -1,    -1,   401,    -1,   397,    -1,    -1,   403,
      -1,    16,   329,    17,    -1,    68,   103,    -1,    69,   103,
      -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   429,   429,   429,   436,   437,   438,   439,   443,   445,
     449,   450,   454,   457,   459,   462,   464,   473,   474,   477,
     479,   483,   484,   485,   486,   487,   488,   489,   493,   494,
     495,   496,   497,   517,   519,   522,   525,   528,   530,   566,
     570,   572,   574,   576,   578,   580,   583,   589,   591,   595,
     604,   606,   607,   609,   611,   613,   623,   624,   627,   630,
     633,   636,   639,   651,   653,   658,   659,   660,   661,   662,
     663,   667,   668,   669,   673,   693,   696,   697,   706,   708,
     709,   721,   722,   723,   724,   742,   743,   744,   745,   746,
     747,   748,   750,   752,   753,   754,   758,   759,   760,   761,
     762,   777,   778,   785,   801,   802,   803,   816,   817,   834,
     835,   847,   854,   881,   883,   884,   888,   902,   903,   918,
     920,   926,   933,   944,   953,   954,   956,   963,   964,   976,
     977,   984,   990,   991,   995,   999,  1000,  1004,  1005,  1013,
    1012,  1025,  1023,  1047,  1047,  1055,  1059,  1063,  1070,  1071,
    1080,  1085,  1096,  1098,  1108,  1110,  1111,  1114,  1116,  1117,
    1118,  1123,  1130,  1134,  1148,  1147,  1150,  1155,  1157,  1160,
    1162,  1166,  1167,  1175,  1179,  1184,  1210,  1211,  1212,  1214,
    1223,  1224,  1226,  1228,  1236,  1237,  1238,  1240,  1248,  1250,
    1252,  1261,  1268,  1290,  1291,  1296,  1298,  1301,  1302,  1311,
    1312,  1315,  1317,  1320,  1322,  1326,  1327,  1332,  1334,  1337,
    1342,  1347,  1349,  1352,  1354,  1361,  1366,  1372,  1378,  1384,
    1385,  1386,  1391,  1395,  1396,  1397,  1400,  1402,  1409,  1416,
    1429,  1440,  1445,  1446,  1450,  1452,  1456,  1457,  1464,  1467,
    1472,  1471,  1475,  1477,  1482,  1488,  1489,  1496,  1497,  1502,
    1503,  1506,  1508,  1520,  1523,  1528,  1532,  1546,  1547,  1572,
    1574,  1576,  1578,  1589,  1593,  1598,  1607,  1609,  1610,  1619,
    1620,  1629,  1631,  1632,  1636,  1637,  1644,  1645,  1655,  1657,
    1669,  1677,  1684,  1685,  1686,  1692,  1694,  1695,  1754,  1756,
    1759,  1761,  1764,  1766,  1769,  1771,  1773,  1774,  1775,  1776,
    1779,  1781,  1804,  1807,  1810,  1817,  1822,  1829,  1835,  1846,
    1858,  1863,  1868,  1873,  1878,  1880,  1885,  1890,  1892,  1897,
    1902,  1907,  1931,  1933,  1947,  1951,  1958,  1959,  1972,  1973,
    1974,  1978,  1979,  1980,  1986,  2026,  2035,  2039,  2040,  2042,
    2043,  2051,  2053,  2061,  2062,  2067,  2071,  2074,  2076,  2083,
    2084,  2088,  2089,  2094,  2103,  2111,  2112,  2113,  2114,  2116,
    2117,  2118,  2119,  2120,  2121,  2122,  2123,  2124,  2125,  2126,
    2127,  2128,  2129,  2130,  2131,  2132,  2133,  2134,  2135,  2136,
    2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,  2145,  2146,
    2147,  2148,  2149,  2150,  2151,  2152,  2153,  2154,  2155,  2171,
    2174,  2177,  2180,  2187,  2190,  2196,  2200,  2204,  2205,  2209,
    2210,  2214,  2216,  2220,  2223,  2227,  2229,  2237,  2242,  2246,
    2247,  2250,  2252,  2270,  2271,  2275,  2279,  2287,  2290,  2295,
    2299,  2308,  2310,  2312,  2314,  2316,  2318,  2321,  2336,  2337,
    2336,  2343,  2345,  2343,  2350,  2353,  2355,  2364,  2363,  2369,
    2370,  2371,  2375,  2380,  2381,  2384,  2386,  2390,  2391,  2394,
    2396,  2402,  2403,  2404,  2405,  2406,  2407,  2408,  2409,  2423,
    2424,  2426,  2430,  2434,  2438,  2439,  2442,  2444,  2448,  2449,
    2450,  2448,  2452,  2452,  2458,  2458,  2460,  2464,  2465,  2473,
    2478,  2481,  2483,  2487,  2487,  2490,  2491,  2490,  2494,  2494,
    2505,  2506,  2511,  2512,  2513,  2514,  2518,  2526,  2527,  2528,
    2529,  2530,  2538,  2551,  2552,  2553,  2554,  2555,  2559,  2567,
    2568,  2570,  2573,  2575,  2579,  2581,  2584,  2587,  2605,  2606,
    2607,  2608,  2618,  2619,  2620,  2621,  2625,  2626,  2629,  2631,
    2633,  2635,  2638,  2663,  2664,  2665,  2666,  2668,  2670,  2671,
    2673,  2674,  2676,  2678,  2680,  2681,  2683,  2685,  2690,  2691,
    2692,  2693,  2695,  2707,  2709,  2712,  2722,  2723,  2726,  2738,
    2740,  2752,  2753,  2759,  2776,  2778,  2781,  2783,  2786,  2789,
    2802,  2803,  2806,  2809,  2811,  2812,  2814,  2816,  2820,  2824,
    2826,  2829,  2831,  2833,  2836,  2840,  2841,  2843,  2845,  2847,
    2849,  2851,  2853,  2855,  2857,  2859,  2861,  2869,  2870,  2875,
    2876,  2880,  2881,  2886,  2887,  2888,  2889,  2890,  2892,  2895,
    2896,  2901,  2903,  2905,  2906,  2907,  2908,  2915,  2917,  2922,
    2926,  2928,  2946,  2951,  2953,  2957,  2958,  2962,  2965,  2971,
    2973,  2976,  2978,  2985,  2986,  2990,  2991,  2997,  2998,  3001,
    3018,  3019,  3021,  3023,  3028,  3029,  3031,  3036,  3037,  3040,
    3053,  3054,  3057,  3060,  3063,  3066,  3072,  3073,  3076,  3079,
    3081,  3086,  3087,  3092,  3093,  3098,  3099,  3104,  3105,  3111,
    3112,  3118,  3119,  3125,  3126,  3129,  3133,  3134,  3138,  3139,
    3140,  3141,  3142,  3143,  3144,  3145,  3146,  3147,  3148,  3152,
    3153,  3158,  3159,  3163,  3167,  3168,  3180,  3187,  3195
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "T_IDENTIFIER", "T_TYPEDEF_ID", 
  "T_ENUM_ID", "T_NAMESPACE_ID", "T_ALIAS_ID", "T_CLASS_ID", 
  "T_TEMPLATE_ID", "T_NUM_LITERAL", "T_CHAR_LITERAL", "T_STRING_LITERAL", 
  "T_BOOLEAN_LITERAL", "T_LANGLE", "T_RANGLE", "T_LPAREN", "T_RPAREN", 
  "T_ELIPSIS", "T_COMMA", "T_LBRACK", "T_RBRACK", "T_LBRACE", "T_RBRACE", 
  "T_EQ", "T_SCOPE", "T_SEMIC", "T_COLON", "T_DOTSTAR", "T_QUESTION", 
  "T_DOT", "T_DYNAMIC_CAST", "T_STATIC_CAST", "T_REINTERPRET_CAST", 
  "T_CONST_CAST", "T_TYPEID", "T_THIS", "T_TEMPLATE", "T_TYPENAME", 
  "T_THROW", "T_TRY", "T_CATCH", "T_TYPEDEF", "T_FRIEND", "T_CLASS", 
  "T_NAMESPACE", "T_ENUM", "T_STRUCT", "T_UNION", "T_VIRTUAL", 
  "T_PRIVATE", "T_PROTECTED", "T_PUBLIC", "T_EXPORT", "T_AUTO", 
  "T_REGISTER", "T_EXTERN", "T_MUTABLE", "T_ASM", "T_USING", "T_INLINE", 
  "T_EXPLICIT", "T_STATIC", "T_CONST", "T_VOLATILE", "T_OVERLOAD", 
  "T_OPERATOR", "T_SIZEOF", "T_NEW", "T_DELETE", "T_PLUS", "T_MINUS", 
  "T_STAR", "T_SLASH", "T_PERCENT", "T_HAT", "T_AND", "T_OR", "T_TILDE", 
  "T_NOT", "T_PLUS_EQ", "T_MINUS_EQ", "T_STAR_EQ", "T_SLASH_EQ", 
  "T_PERCENT_EQ", "T_HAT_EQ", "T_AND_EQ", "T_OR_EQ", "T_LTLT", "T_GTGT", 
  "T_GTGT_EQ", "T_LTLT_EQ", "T_EQEQ", "T_NE", "T_LE", "T_GE", "T_ANDAND", 
  "T_OROR", "T_INCR", "T_DECR", "T_ARROW_STAR", "T_ARROW", "T_FUNCTION", 
  "T_SUBSCRIPT", "T_CHAR", "T_WCHAR", "T_BOOL", "T_SHORT", "T_INT", 
  "T_LONG", "T_SIGNED", "T_UNSIGNED", "T_FLOAT", "T_DOUBLE", "T_VOID", 
  "T_CASE", "T_DEFAULT", "T_IF", "T_ELSE", "T_SWITCH", "T_WHILE", "T_DO", 
  "T_FOR", "T_BREAK", "T_CONTINUE", "T_GOTO", "T_RETURN", "T_TYPEOF", 
  "T_THREAD", "T_MINIMUM", "T_MAXIMUM", "T_RESTRICT", "T_SPECIAL", 
  "T_LAST_TOKEN", "PREC", "$accept", "TRANSLATION_UNIT", "@1", "LITERAL", 
  "STRING_LIST", "IDENTIFIER_OPT", "IDENTIFIER_C", "ELIPSIS_OPT", 
  "TYPENAME_OPT", "DECLARATION_SEQ", "DECLARATION_SEQ_OPT", "DECLARATION", 
  "BLOCK_DECLARATION", "SIMPLE_DECLARATION", "DECL_SPECIFIER_SEQ_START", 
  "DECL_SPECIFIER_SEQ", "DECL_SPECIFIER_SEQ_RIGHT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_OR_TYPEDEF_SPEC_LIST_OPT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_TYPEDEF_OR_SIMPLE_SPEC_LIST_OPT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_TYPEDEF_BIT_FLD_OR_SIMPLE_SPEC_LIST_OPT", 
  "STORAGE_CLASS_SPECIFIER", "FUNCTION_SPECIFIER", "TYPEDEF_NAME", 
  "NAMED_TYPE_SPECIFIER", "STRICT_NAMED_TYPE_SPECIFIER", "TYPE_SPECIFIER", 
  "SIMPLE_TYPE_SPECIFIER", "TYPE_NAME", "CLASS_ENUM_OR_ET_SPECIFIER", 
  "ENUM_PUSH", "CLASS_ET_SHORT", "CLASS_OR_ET_SHORT", "CLASS_REDEF_OR_ET", 
  "TYPE_POP", "ENUM_NAME", "ENUM_ET_SHORT", "TEMP_ID", "ENUM_OR_ET_SHORT", 
  "ENUM_REDEF_OR_ET", "TYPE_TO_ENUM", "ENUM_SPECIFIER_SHORT", 
  "ENUMERATOR_CLAUSE_LEFT", "ENUMERATOR_CLAUSE_RIGHT", "ENUMERATOR_LIST", 
  "ENUMERATOR_DEFINITION", "ENUMERATOR", "NAMESPACE_NAME", 
  "ORIGINAL_NAMESPACE_NAME", "NAMESPACE_DEFINITION", 
  "NAMED_NAMESPACE_DEFINITION", "ORIGINAL_NAMESPACE_DEFINITION", "@2", 
  "EXTENSION_NAMESPACE_DEFINITION", "@3", "UNNAMED_NAMESPACE_DEFINITION", 
  "@4", "NAMESPACE_BODY", "NAMESPACE_ALIAS", "NAMESPACE_ALIAS_DEFINITION", 
  "QUALIFIED_NAMESPACE_SPECIFIER", "USING_DECLARATION", "USING_DIRECTIVE", 
  "ASM_DEFINITION", "ASM_EXTENSION_LIST_OPT", "ASM_EXTENSION", 
  "ASM_OPERAND_CONSTRAINT_STRING", "ASM_OPERAND_EXPRESSION", 
  "ASM_OPERAND_SYMBOLIC", "LINKAGE_SPECIFICATION", "@5", 
  "COMMA_INIT_DECLARATOR_LIST_OPT", "INIT_DECLARATOR_LIST_OPT", 
  "INIT_DECLARATOR_LIST", "INIT_DECLARATOR", "NON_PAREN_INIT_DECLARATOR", 
  "PAREN_NON_REDEF_INIT_DECLARATOR", "DECLARATOR", "NON_REDEF_DECLARATOR", 
  "NON_PAREN_DECLARATOR", "PAREN_NON_REDEF_DECLARATOR", 
  "OBVIOUSLY_A_DECLARATOR", "BIT_FIELD_DECLARATOR", "DIRECT_DECLARATOR", 
  "DIRECT_NON_REDEF_DECLARATOR", "DIRECT_NON_PAREN_DECLARATOR", 
  "DIRECT_PAREN_NON_REDEF_DECLARATOR", 
  "DIRECT_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_NON_REDEF_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_NON_PAREN_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_PAREN_NON_REDEF_DECLARATOR_PARAMETRIZED_LEFT", "PTR_OPERATOR", 
  "CV_QUALIFIER_SEQ", "CV_QUALIFIER", "CV_QUALIFIER_SEQ_OPT", 
  "DECLARATOR_ID", "NON_REDEF_DECLARATOR_ID", "TYPE_ID", 
  "TYPE_SPECIFIER_SEQ", "TYPE_SPECIFIER_SEQ_OPT", "ABSTRACT_DECLARATOR", 
  "ABSTRACT_DECLARATOR_OPT", "DIRECT_ABSTRACT_DECLARATOR", "@6", 
  "DIRECT_ABSTRACT_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_ABSTRACT_DECLARATOR_OPT", "PARAMETER_DECLARATION_CLAUSE", 
  "PARAMETER_DECLARATION_LIST", "PARAMETER_DECLARATION_LIST_OPT", 
  "PARAMETER_DECLARATION", 
  "PARAMETER_DECLARATION_CLAUSE_OR_CONTRUCTOR_CALL", 
  "FUNCTION_DEFINITION", "FUNCTION_BODY_LEFT", "FUNCTION_BODY_RIGHT", 
  "FUNCTION_BODY", "INITIALIZER_OPT", "INITIALIZER_CLAUSE", 
  "INITIALIZER_LIST", "INITIALIZER_LIST_LEFT", "CLASS_NAME", 
  "CLASS_SPECIFIER_SHORT", "CLASS_SPECIFIER_LEFT", 
  "CLASS_SPECIFIER_RIGHT", "CLASS_KEY", "MEMBER_SPECIFICATION", 
  "MEMBER_DECLARATION", "MEMBER_DECLARATOR_LIST_OPT", 
  "MEMBER_PARAMETER_LIST", "PARAMETERS_LEFT", "PARAM_PAREN", 
  "MEMBER_DECLARATOR", "NON_PAREN_MEMBER_DECLARATOR", 
  "PAREN_NON_REDEF_MEMBER_DECLARATOR", "PARAMETER_LIST_MEMBER_DECLARATOR", 
  "NON_PAREN_MEMBER_FUNCTION_DEFINITION", 
  "NON_PAREN_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "PAREN_NON_REDEF_MEMBER_FUNCTION_DEFINITION", 
  "PAREN_NON_REDEF_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "PARAMETER_LIST_MEMBER_FUNCTION_DEFINITION", 
  "PARAMETER_LIST_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "CONSTANT_INITIALIZER_OPT", "BASE_CLAUSE_LEFT", "BASE_CLAUSE_RIGHT", 
  "BASE_SPECIFIER_LIST", "BASE_SPECIFIER", "ACCESS_SPECIFIER", 
  "CONVERSION_FUNCTION_ID", "CONVERSION_TYPE_ID", 
  "NON_ELABORATING_TYPE_SPECIFIER_SEQ", "NON_ELABORATING_TYPE_SPECIFIER", 
  "NE_CLASS_OR_ENUM_SPECIFIER", "CONVERSION_DECLARATOR_OPT", 
  "OPERATOR_SCOPE", "CTOR_INITIALIZER", "CTOR_INITIALIZER_OPT", 
  "MEM_INITIALIZER_LIST", "MEM_INITIALIZER", "MEM_INITIALIZER_ID", 
  "OPERATOR_FUNCTION_ID", "OPERATOR_NAME", "TEMPLATE_DECLARATION", 
  "MEMBER_TEMPLATE_DECLARATION", "TEMPLATE_PARAM_LEFT", 
  "TEMPLATE_PARAM_RIGHT", "TEMPLATE_PARAMETER_LIST", "TEMPLATE_PARAMETER", 
  "TYPE_PARAMETER", "TEMPLATE_ID", "TEMPLATE_NAME", 
  "TEMPLATE_ARGUMENT_LIST", "TEMPLATE_ARGUMENT_LIST_OPT", 
  "TEMPLATE_ARGUMENT", "EXPLICIT_INSTANTIATION", 
  "EXPLICIT_SPECIALIZATION", "TEMPLATE_PARAMETER_DECLARATION", 
  "TEMPLATE_DECL_SPECIFIER_SEQ", "TRY_BLOCK", "@7", "@8", 
  "FUNCTION_TRY_BLOCK", "@9", "@10", "HANDLER_SEQ", "HANDLER_SEQ_OPT", 
  "HANDLER", "@11", "EXCEPTION_DECLARATION", "THROW_EXPRESSION", 
  "EXCEPTION_SPECIFICATION", "EXCEPTION_SPECIFICATION_OPT", 
  "TYPE_ID_LIST", "TYPE_ID_LIST_OPT", "STATEMENT", "LABELED_STATEMENT", 
  "EXPRESSION_STATEMENT", "COMPOUND_STATEMENT", "STATEMENT_SEQ", 
  "STATEMENT_SEQ_OPT", "SELECTION_STATEMENT", "@12", "@13", "@14", "@15", 
  "SELECTION_STATEMENT_RIGHT", "@16", "CONDITION", "CONDITION_DECLARATOR", 
  "CONDITION_TYPE_SPECIFIER_SEQ", "CONDITION_OPT", "ITERATION_STATEMENT", 
  "@17", "@18", "@19", "@20", "FOR_INIT_STATEMENT", "JUMP_STATEMENT", 
  "DECLARATION_STATEMENT", "BLOCK_DECLARATION_STATEMENT", 
  "SIMPLE_DECLARATION_STATEMENT", "PRIMARY_EXPRESSION", "ID_EXPRESSION", 
  "UNQUALIFIED_ID", "TEMPLATE_OPT", "NESTED_NAME_SPECIFIER", 
  "NESTED_SCOPE_SPECIFIER", "LOCAL_SCOPE_SEQ", 
  "NESTED_TYPE_OR_NAME_SPECIFIER", "NESTED_TYPE_NAME_SPECIFIER", 
  "STRICT_NESTED_TYPE_NAME_SPECIFIER", 
  "NESTED_ORIGINAL_NAMESPACE_NAME_SPECIFIER", 
  "NESTED_ORIGINAL_NAMESPACE_NAME_SPECIFIER_LOCAL", 
  "NESTED_NAMESPACE_ALIAS_SPECIFIER", 
  "NESTED_NAMESPACE_ALIAS_SPECIFIER_LOCAL", "GLOBAL_SCOPE", "LOCAL_SCOPE", 
  "POSTFIX_EXPRESSION", "EXPRESSION_LIST", "EXPRESSION_LIST_OPT", 
  "PSEUDO_DESTRUCTOR_NAME", "UNARY_EXPRESSION", "UNARY_OPERATOR", 
  "NEW_EXPRESSION", "NEW_PLACEMENT", "NEW_PLACEMENT_OPT", "NEW_TYPE_ID", 
  "NEW_DECLARATOR", "NEW_DECLARATOR_OPT", "DIRECT_NEW_DECLARATOR", 
  "NEW_INITIALIZER", "NEW_INITIALIZER_OPT", "DELETE_EXPRESSION", 
  "CAST_EXPRESSION", "PM_EXPRESSION", "MULTIPLICATIVE_EXPRESSION", 
  "ADDITIVE_EXPRESSION", "SHIFT_EXPRESSION", "RELATIONAL_EXPRESSION", 
  "EQUALITY_EXPRESSION", "AND_EXPRESSION", "EXCLUSIVE_OR_EXPRESSION", 
  "INCLUSIVE_OR_EXPRESSION", "LOGICAL_AND_EXPRESSION", 
  "LOGICAL_OR_EXPRESSION", "CONDITIONAL_EXPRESSION", 
  "ASSIGNMENT_EXPRESSION", "ASSIGNMENT_EXPRESSION_OPT", 
  "ASSIGNMENT_OPERATOR", "EXPRESSION", "EXPRESSION_OPT", 
  "CONSTANT_EXPRESSION", "CONSTANT_EXPRESSION_OPT", 
  "STATEMENT_EXPRESSION", "NEW_ARRAY", "DELETE_ARRAY", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] =
{
       0,   135,   137,   136,   138,   138,   138,   138,   139,   139,
     140,   140,   141,   142,   142,   143,   143,   144,   144,   145,
     145,   146,   146,   146,   146,   146,   146,   146,   147,   147,
     147,   147,   147,   148,   148,   148,   148,   148,   148,   149,
     150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
     152,   152,   152,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   153,   154,   154,   155,   155,   155,   155,   155,
     155,   156,   156,   156,   157,   158,   158,   158,   159,   159,
     159,   160,   160,   160,   160,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   162,   162,   162,   162,
     162,   163,   163,   164,   165,   165,   165,   166,   166,   167,
     167,   168,   169,   170,   170,   170,   171,   172,   172,   173,
     173,   174,   175,   176,   177,   177,   177,   178,   178,   179,
     179,   180,   181,   181,   182,   183,   183,   184,   184,   186,
     185,   188,   187,   190,   189,   191,   192,   193,   194,   194,
     195,   196,   197,   197,   198,   198,   198,   199,   199,   199,
     199,   200,   201,   202,   204,   203,   203,   205,   205,   206,
     206,   207,   207,   208,   209,   210,   211,   211,   211,   211,
     212,   212,   212,   212,   213,   213,   213,   213,   214,   214,
     214,   215,   216,   217,   217,   217,   217,   217,   217,   218,
     218,   218,   218,   218,   218,   219,   219,   219,   219,   219,
     220,   220,   220,   220,   220,   221,   222,   223,   224,   225,
     225,   225,   226,   227,   227,   227,   228,   228,   229,   230,
     231,   232,   233,   233,   234,   234,   235,   235,   236,   236,
     237,   236,   236,   236,   238,   239,   239,   240,   240,   241,
     241,   242,   242,   243,   243,   243,   243,   244,   244,   245,
     245,   245,   245,   246,   247,   248,   249,   249,   249,   250,
     250,   251,   251,   251,   252,   252,   253,   253,   254,   254,
     255,   256,   257,   257,   257,   258,   258,   258,   259,   259,
     259,   259,   259,   259,   259,   259,   259,   259,   259,   259,
     260,   260,   261,   261,   261,   262,   262,   262,   262,   263,
     264,   265,   266,   267,   268,   268,   269,   270,   270,   271,
     272,   273,   274,   274,   275,   276,   277,   277,   278,   278,
     278,   279,   279,   279,   280,   281,   282,   283,   283,   283,
     283,   284,   284,   285,   285,   286,   287,   288,   288,   289,
     289,   290,   290,   291,   292,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   293,   293,
     293,   293,   293,   293,   293,   293,   293,   293,   293,   294,
     294,   294,   294,   295,   295,   296,   297,   298,   298,   299,
     299,   300,   300,   300,   300,   300,   300,   301,   302,   303,
     303,   304,   304,   305,   305,   306,   307,   308,   308,   308,
     308,   309,   309,   309,   309,   309,   309,   309,   311,   312,
     310,   314,   315,   313,   316,   317,   317,   319,   318,   320,
     320,   320,   321,   322,   322,   323,   323,   324,   324,   325,
     325,   326,   326,   326,   326,   326,   326,   326,   326,   327,
     327,   327,   328,   329,   330,   330,   331,   331,   333,   334,
     335,   332,   336,   332,   338,   337,   337,   339,   339,   340,
     341,   342,   342,   344,   343,   345,   346,   343,   347,   343,
     348,   348,   349,   349,   349,   349,   350,   351,   351,   351,
     351,   351,   352,   353,   353,   353,   353,   353,   354,   355,
     355,   355,   356,   356,   357,   357,   357,   357,   358,   358,
     358,   358,   359,   359,   359,   359,   360,   360,   360,   360,
     360,   360,   360,   361,   361,   361,   361,   361,   361,   361,
     361,   361,   361,   361,   361,   361,   361,   361,   362,   362,
     362,   362,   362,   363,   363,   363,   364,   364,   364,   365,
     365,   366,   366,   367,   368,   368,   368,   368,   368,   368,
     369,   369,   369,   369,   369,   369,   369,   369,   369,   369,
     369,   369,   369,   369,   369,   369,   369,   369,   369,   369,
     369,   369,   369,   369,   369,   369,   369,   370,   370,   371,
     371,   372,   372,   373,   373,   373,   373,   373,   373,   373,
     373,   374,   374,   374,   374,   374,   374,   375,   375,   376,
     377,   377,   378,   379,   379,   380,   380,   381,   381,   382,
     382,   383,   383,   384,   384,   385,   385,   386,   386,   386,
     387,   387,   387,   387,   388,   388,   388,   389,   389,   389,
     390,   390,   390,   390,   390,   390,   391,   391,   391,   391,
     391,   392,   392,   393,   393,   394,   394,   395,   395,   396,
     396,   397,   397,   398,   398,   398,   399,   399,   400,   400,
     400,   400,   400,   400,   400,   400,   400,   400,   400,   401,
     401,   402,   402,   403,   404,   404,   405,   406,   407
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     3,     1,     1,     2,     1,     0,     2,
       0,     1,     1,     0,     1,     0,     1,     1,     2,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     4,     4,     3,     1,     1,
       2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       0,     2,     2,     2,     2,     2,     0,     2,     2,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       4,     2,     2,     1,     1,     2,     2,     1,     0,     2,
       1,     1,     1,     2,     2,     2,     0,     1,     0,     2,
       0,     0,     2,     1,     2,     3,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       6,     0,     6,     0,     5,     1,     1,     5,     1,     1,
       4,     4,     6,     7,     0,     3,     3,     0,     1,     2,
       3,     2,     3,     3,     0,     6,     3,     0,     3,     0,
       1,     1,     3,     2,     2,     2,     1,     2,     2,     2,
       1,     2,     2,     2,     1,     2,     2,     2,     1,     2,
       2,     1,     2,     1,     5,     4,     4,     2,     3,     1,
       5,     4,     4,     2,     3,     1,     5,     4,     4,     2,
       5,     4,     4,     2,     4,     2,     2,     2,     2,     2,
       1,     3,     2,     1,     1,     1,     0,     1,     1,     1,
       2,     2,     0,     1,     2,     1,     0,     1,     5,     4,
       0,     5,     2,     3,     2,     0,     1,     2,     3,     1,
       3,     0,     1,     2,     4,     2,     4,     1,     1,     2,
       2,     2,     3,     1,     2,     1,     0,     2,     3,     1,
       3,     0,     1,     2,     1,     3,     1,     1,     4,     2,
       1,     2,     1,     1,     1,     0,     2,     3,     2,     4,
       2,     4,     2,     4,     2,     3,     3,     1,     1,     1,
       0,     3,     5,     7,     4,     4,     6,     4,     6,     0,
       2,     2,     2,     1,     3,     2,     1,     3,     2,     1,
       3,     1,     0,     2,     1,     1,     1,     3,     1,     2,
       2,     1,     1,     1,     2,     2,     1,     1,     4,     1,
       1,     2,     2,     0,     2,     1,     2,     0,     2,     1,
       3,     4,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     5,
       6,     4,     5,     5,     6,     1,     1,     1,     3,     1,
       1,     2,     4,     2,     4,     6,     8,     4,     1,     1,
       3,     0,     1,     1,     1,     2,     4,     2,     4,     2,
       4,     2,     2,     2,     2,     2,     2,     2,     0,     0,
       5,     0,     0,     6,     2,     0,     1,     0,     6,     2,
       2,     2,     2,     4,     2,     0,     1,     1,     3,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       4,     3,     2,     3,     1,     2,     0,     1,     0,     0,
       0,     9,     0,     6,     0,     3,     0,     1,     3,     2,
       1,     0,     1,     0,     6,     0,     0,     9,     0,     9,
       1,     1,     2,     2,     3,     3,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     3,     1,     1,     1,     1,
       4,     1,     0,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     2,     1,     2,     1,     2,
       2,     3,     2,     1,     2,     2,     3,     2,     2,     3,
       1,     2,     2,     3,     2,     3,     3,     4,     1,     2,
       2,     3,     2,     1,     2,     2,     1,     2,     2,     1,
       2,     1,     2,     1,     2,     5,     2,     5,     6,     2,
       1,     4,     4,     3,     2,     4,     2,     4,     2,     4,
       4,     3,     3,     3,     3,     2,     2,     7,     7,     7,
       7,     7,     7,     7,     7,     4,     4,     1,     3,     0,
       1,     2,     3,     1,     2,     2,     2,     2,     4,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     6,     3,
       0,     1,     2,     2,     1,     0,     1,     3,     4,     3,
       1,     0,     1,     2,     2,     1,     4,     1,     3,     3,
       1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
       1,     3,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
       3,     1,     5,     1,     3,     1,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     0,     1,     1,     0,     1,     3,     2,     2
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
       2,     0,     0,     1,    12,    74,   112,   134,   146,   276,
     418,     0,   573,    38,     0,     0,    50,    50,   282,     0,
     103,   283,   284,    72,     0,    65,    66,    68,    69,     0,
      15,    71,    73,    67,   223,   224,   225,   345,   226,   220,
       0,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,     0,    70,   519,     0,    17,    21,    28,   309,
      39,    50,    50,    99,    56,    56,   543,    76,   116,    98,
       0,   132,    27,   135,   137,   138,   136,   133,    30,    31,
      32,    29,    26,   191,   167,   180,   251,     0,    50,   199,
      22,    96,   116,   550,     0,   521,    23,   277,     0,    24,
      25,   524,   229,     0,   528,    75,   529,   532,     0,     0,
     538,     0,   176,   251,     0,   193,     0,   536,     0,   528,
     228,   529,   405,   519,   425,     0,   548,   547,     0,     0,
      50,    50,    68,    41,    47,    50,    50,    50,    40,   143,
       0,     0,   566,     0,     0,   563,     0,     0,     0,     0,
       0,     0,     0,    16,     0,     0,   227,   226,   219,   554,
       0,   421,     3,    18,    33,   226,   167,   167,   266,   266,
     184,   188,   251,   251,     0,   205,   313,     0,     0,   167,
     259,     0,   260,     0,   261,     0,    42,    43,   421,   574,
      56,    56,    46,    56,    56,    56,    56,    63,    45,   118,
     102,     0,     0,     0,   120,     0,   579,   263,     0,   476,
     216,   704,     0,   226,   203,   182,   183,   236,     0,   252,
      13,   249,   181,    44,   421,   576,   108,   101,   104,     0,
       0,   110,   370,   371,   392,   369,     0,   355,   356,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   393,
     394,   395,   396,   397,   398,   339,     0,   334,   343,   336,
     340,   354,   337,   357,   358,   421,   226,     0,     0,   535,
     544,   551,   525,   533,     0,   531,   545,   552,   526,   530,
       0,     0,   204,   215,   704,   226,   197,   178,   179,     4,
       5,     8,     7,     0,     0,     0,     0,     0,     0,   514,
     686,     0,   630,     0,   623,   624,   621,   622,   626,   625,
       0,     0,   513,    56,   257,     0,   685,   580,   516,   518,
       0,    75,     0,   613,   258,   645,     0,   619,   620,   647,
     650,   654,   657,   660,   666,   671,   673,   675,   677,   679,
     681,   683,   607,   517,     0,   177,   367,   537,   539,   542,
     540,   530,   421,   406,     0,    10,    50,    50,   282,     0,
      50,    50,    56,    56,   558,    79,    50,     0,     0,   407,
     409,   410,   236,     0,    78,     0,   549,     0,    52,    51,
      56,    56,    53,    54,    55,    19,   139,     0,   421,   421,
     141,   565,   564,   568,   567,     0,   164,   166,     0,   154,
       0,   133,     0,   148,   149,   569,     0,     0,     0,     0,
     222,     0,   232,    82,    83,    84,   424,   236,   422,     0,
     419,    81,   423,   455,     0,     0,     0,     0,   174,   175,
     217,   704,   226,   209,   186,   187,   218,   704,   226,   213,
     189,   190,     0,     0,   185,   226,   251,     0,     0,   441,
     476,   315,   476,   318,   476,     0,    58,    57,    59,    60,
      62,    61,     0,    64,   123,   114,   117,     0,   115,   113,
       0,     0,     0,    37,   476,   438,     0,     0,     0,     0,
       0,     0,   495,     0,     0,     0,     0,   701,   519,   169,
     509,   510,   511,   508,   262,   468,   474,   461,   462,   463,
     477,     0,   464,   465,   466,   467,   506,   507,   699,   702,
       0,     0,     0,   681,   703,   705,     0,   192,   346,   349,
       0,   353,   455,   245,   253,   236,   237,   255,   235,   251,
       0,   226,     0,    14,   247,     0,   280,   324,   105,   107,
     285,     0,   109,   106,   342,   707,   708,   341,   335,   421,
       0,   221,   534,   555,   556,     0,   546,   553,   527,   198,
     421,     0,   455,     8,     6,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   687,   452,     0,
     617,     0,   631,     0,   643,   614,   615,   609,   586,   226,
     609,   588,     0,   609,     0,   522,   595,   596,   522,   584,
       0,   616,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   688,     0,   692,   693,   689,   690,   691,   697,
     696,   698,   694,   695,     0,     0,   644,   541,     0,     0,
     413,    11,   432,   431,   411,     0,   433,   434,   437,   436,
     435,   426,     0,     0,   427,   429,   559,   562,   560,     0,
      49,    48,    20,   145,     0,    19,     0,     0,     0,    19,
       0,    19,   401,     0,     0,   154,   151,   570,   572,   150,
      77,    82,   233,   231,    81,   245,   236,   230,   528,   529,
       0,   520,     0,   456,   347,    34,    35,     0,   271,   267,
     269,     0,   455,     0,   455,   226,   226,   455,     0,   236,
       0,    36,   347,   314,   317,   320,   100,   126,   131,   122,
       0,   127,   129,   119,   168,   266,     0,     0,     0,     0,
     701,   478,   482,   493,   701,   498,   502,   503,     0,     0,
     701,     0,   170,   171,   475,   264,     0,   472,   202,     0,
     609,   352,   201,     0,     0,   234,     0,     0,   244,   240,
     226,   242,   455,   248,   250,    97,   279,     0,     0,   331,
     332,   333,     0,   325,   326,     0,   328,   344,     0,   417,
     557,     0,   196,   195,     9,     0,   706,   515,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   635,   641,   610,     0,   455,     0,   583,     0,     0,
     523,     0,   591,     0,     0,   593,   592,     0,   594,   608,
     648,   649,   651,   652,   653,   655,   656,   658,   659,   661,
     662,   663,   664,   665,   669,   667,   670,   668,   672,   674,
     676,   678,     0,   680,   684,   520,     0,     0,     0,     0,
     408,   399,     0,     0,   561,   144,     0,   147,     0,     0,
       0,     0,     0,   402,     0,   157,   157,     0,   530,   420,
     459,   454,     0,   304,   268,   274,     0,   272,   208,   207,
     212,   211,   455,   455,   347,   226,   305,   307,   214,     0,
     575,     0,   124,     0,   173,   473,   439,   701,   471,     0,
       0,     0,   496,   701,   505,   504,   469,   512,     0,   700,
     350,     0,   243,   254,   256,   226,   704,   455,   200,   577,
     281,   299,     0,     0,    15,   309,   297,   300,   286,     0,
     298,   329,   285,     0,   330,   338,     0,   646,     0,     0,
       0,     0,     0,     0,     0,     0,   606,   605,   618,   629,
       0,     0,   635,   636,   632,   634,   609,   640,   642,   627,
     585,   194,   587,   582,   581,   611,   589,     0,   590,     0,
     578,     0,   414,   412,    80,   428,   430,   140,   142,   400,
     165,   152,     8,     0,   156,   158,     0,   155,     0,   457,
     460,     0,   348,   270,   273,   206,   210,   302,   455,     0,
       0,   442,   265,   125,   128,   130,     0,   470,   490,     0,
       0,     0,   487,     0,     0,     0,   500,   491,   501,   172,
     351,   455,     0,   239,     0,     0,   288,   316,   319,   300,
     300,   300,   290,   292,   294,   476,     0,   287,   278,   327,
       0,     0,     0,     0,     0,     0,     0,     0,   641,     0,
     633,     0,     0,   612,   682,    10,   161,     0,     0,     0,
     159,     0,   153,     0,   453,   275,   347,   306,   308,     0,
       0,   440,   445,   479,     0,   489,   701,   701,     0,   492,
       0,   238,   241,     0,     0,     0,   311,   312,     0,     0,
       0,   296,     0,   295,     0,     0,     0,     0,     0,     0,
       0,     0,   628,   637,     0,   639,   415,   163,     0,   160,
     458,   303,   443,     0,   446,   444,   701,   488,   483,   494,
       0,   701,     0,     0,   323,   289,   291,   293,   322,   301,
     597,   601,   598,   602,   599,   603,   600,   604,   638,     0,
     162,   245,     0,   480,     0,     0,   403,     0,   310,   416,
     451,   449,   450,   447,   486,     0,   701,   404,     0,   484,
     481,   497,   499,   448,   701,   485
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     1,     2,   332,   584,   660,    54,   554,   155,   682,
     683,    56,    57,    58,   509,    60,   133,   134,   197,   198,
      61,    62,    63,    64,   382,   432,   531,    66,    67,    68,
     227,   558,   228,   229,    69,   200,   201,   485,   489,   490,
     486,   487,   739,   740,   741,   742,    70,    71,    72,    73,
      74,   685,    75,   689,    76,   405,   684,    77,   510,   422,
     511,   512,   513,   694,  1004,  1005,  1080,  1006,    82,   691,
     208,   761,   762,   744,   166,   167,   745,    83,   168,   169,
      84,   215,   112,    85,   170,   171,   113,    86,   172,   173,
      87,   156,    88,   158,   115,    89,   436,   437,   703,   546,
     775,   548,   936,   549,   550,   334,   219,   220,   221,   335,
      90,   209,   514,  1021,   448,   719,   896,   897,    91,   559,
     560,   786,    92,   787,   948,  1056,   176,   177,   178,  1149,
    1049,  1050,   179,   180,   181,   182,   183,   184,   185,  1106,
     561,   792,   793,   794,   795,    93,   277,   278,   279,   280,
     568,    94,   216,   893,   538,   539,   540,    95,   281,    96,
     950,   125,   387,   388,   389,   390,    97,    98,   438,   439,
     440,    99,   100,   391,   392,   515,   747,  1026,   471,   732,
    1089,  1091,  1135,  1092,  1178,  1162,   336,   713,   714,  1010,
    1011,   516,   517,   518,   519,   520,   521,   522,   919,  1136,
    1174,   920,  1180,  1184,  1029,  1030,  1031,  1100,   523,   921,
     754,  1035,   923,  1037,   524,   525,   526,   527,   337,   338,
     101,   833,   339,   103,   340,   120,   532,   394,   423,   145,
     424,   425,   342,   107,   343,   823,   824,   835,   345,   346,
     347,   602,   603,   822,   973,   974,   975,   978,   979,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   528,   598,   655,   529,   530,   535,   536,
     363,   283,   364
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1050
static const short yypact[] =
{
   -1050,    87,  4730, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050,  2631, -1050, -1050,  4504,  2500,  2434,  2434, -1050,  1298,
   -1050, -1050, -1050, -1050,    83, -1050, -1050,    52, -1050,    60,
     208, -1050, -1050, -1050, -1050, -1050, -1050, -1050,   452, -1050,
     215, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050,   165, -1050,   252,  3306, -1050, -1050, -1050,  1974,
   -1050,  2434,  2434,   105,  5100,  5100, -1050, -1050,  2075, -1050,
     177, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050,   267,   136,  3398,  2631,  2434, -1050,
   -1050,   158,  2075, -1050,  3912, -1050, -1050, -1050,   285, -1050,
   -1050, -1050, -1050,   235,  1018, -1050,  1216, -1050,  2631,   310,
   -1050,   320,   188,  4276,  2631, -1050,  5331, -1050,    88,   477,
   -1050,   523, -1050,   374, -1050,  5178, -1050, -1050,  1433,  1922,
    2434,  2434, -1050, -1050,  3119,  2434,  2434,  2434, -1050, -1050,
     301,   184,   397,   187,   419, -1050,   684,  1024,   432,  4617,
    3398,   442,   441, -1050,  1724,  2500, -1050,   452, -1050, -1050,
      69,  5656, -1050, -1050, -1050,   452, -1050, -1050,   211,   292,
     265,   392,  4276,  4276,  2631, -1050,   438,   383,   447, -1050,
   -1050,    73, -1050,    73, -1050,   267, -1050, -1050,  5656, -1050,
    5100,  5100, -1050,  5100,  5100,  5100,  5100,   439, -1050,   449,
   -1050,   449,  6205,    99,   468,  1829, -1050, -1050,   284,  4024,
   -1050,  5978,  1645,   452, -1050, -1050, -1050,  2098,   476,   480,
     478, -1050, -1050, -1050,  5656, -1050,   295, -1050, -1050,   295,
     295,   399, -1050, -1050, -1050, -1050,  2186,   400,   409, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050,   215, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050,  2186, -1050, -1050, -1050,
   -1050, -1050,   537, -1050, -1050,  5656,   452,   645,   215, -1050,
   -1050, -1050, -1050, -1050,   215, -1050, -1050, -1050, -1050,  1425,
     538,   552, -1050, -1050,  5978,   452, -1050, -1050, -1050, -1050,
   -1050,   559, -1050,  5432,    47,    63,    96,   101,   558, -1050,
    5817,  6090,   568,  5929, -1050, -1050, -1050, -1050,   215, -1050,
    5978,  5978, -1050,  5100, -1050,   588, -1050, -1050, -1050, -1050,
    1018, -1050,  1748,   750,   556, -1050,  5978, -1050, -1050, -1050,
      31,   491,   340,   273,    50,   387,   536,   541,   547,   517,
    1025, -1050, -1050, -1050,  5978, -1050, -1050, -1050, -1050,   182,
   -1050,   477,  5656, -1050,   229,   310,  2434,  2434,   256,   609,
    2434,  2434,  5100,  5100, -1050, -1050,  2434,  4730,   134, -1050,
   -1050, -1050,  2098,   477, -1050,  1467, -1050,   954, -1050, -1050,
    5100,  5100, -1050, -1050, -1050,  4730, -1050,  1724,  5656,  5656,
   -1050, -1050, -1050, -1050, -1050,  5270, -1050, -1050,  2593, -1050,
     616,   605,   613, -1050, -1050, -1050,   684,  1024,    69,   618,
   -1050,   628,  6127,    36, -1050, -1050, -1050,  1621,   631,   646,
   -1050,    59,   273,   623,   315,   339,  5817,  5768, -1050, -1050,
   -1050,  5978,   452, -1050, -1050, -1050, -1050,  5978,   452, -1050,
   -1050, -1050,   650,   652, -1050,   452,  3398,  4956,   356, -1050,
    4024, -1050,  4024, -1050,  4024,   658, -1050, -1050, -1050, -1050,
   -1050, -1050,   664, -1050, -1050, -1050, -1050,    76, -1050, -1050,
     449,  1529,  2631, -1050,  4024, -1050,   310,  5978,   648,   660,
     661,   663, -1050,   668,   659,   672,   310,  5817,   183,  2631,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
    4024,   678, -1050, -1050, -1050, -1050, -1050, -1050, -1050,   683,
     679,    36,    59,   122, -1050, -1050,   686, -1050, -1050,   685,
      64, -1050,   623,  2746,   688,  2098, -1050,   689,   332,  3398,
     353,   452,  5067, -1050, -1050,   695, -1050, -1050, -1050, -1050,
   -1050,  2526, -1050, -1050, -1050, -1050, -1050, -1050,  2771,  5656,
     699, -1050, -1050, -1050, -1050,   215, -1050, -1050, -1050, -1050,
    5656,   698,   623,   559, -1050,   703,   710,   450,  6127,  6127,
    6127,  6127,  6127,  6127,  6127,  6127,  5544, -1050, -1050,  5432,
   -1050,  5817, -1050,  3673, -1050, -1050, -1050,  5817, -1050,   452,
    5817, -1050,  1425,  3560,  5817,  1348, -1050, -1050,  1569, -1050,
    5817, -1050,  5978,  5978,  5978,  5978,  5978,  5978,  5978,  5978,
    5978,  5978,  5978,  5978,  5978,  5978,  3722,  3834,  5978,  5978,
    5978,  5978, -1050,  5817, -1050, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050,  5978,  5817, -1050, -1050,   701,  5270,
     705, -1050, -1050, -1050,   706,    69, -1050, -1050, -1050, -1050,
   -1050, -1050,  5270,  4730,   707,   708, -1050, -1050, -1050,   477,
   -1050, -1050,  4730, -1050,   712,  4730,   720,   740,   744,  4730,
     134,  4730, -1050,   734,   259, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050,  2231,  1621, -1050,  1198,  1605,
    5656, -1050,    66, -1050,   742, -1050, -1050,   457,  5768, -1050,
   -1050,   751,   623,   752,   623,   452,   452,   623,   757,  2098,
     758, -1050,   742, -1050, -1050, -1050,   756, -1050, -1050, -1050,
     244, -1050,   759, -1050, -1050,   204,   753,   760,   764,   762,
    4150, -1050, -1050, -1050,  4150, -1050, -1050, -1050,   768,   769,
    4150,   770,   779, -1050, -1050, -1050,  5817, -1050, -1050,  2500,
    5817, -1050, -1050,   782,  5817, -1050,  5817,   783, -1050, -1050,
     452, -1050,   623, -1050, -1050,   778, -1050,  4389,  2526, -1050,
   -1050, -1050,   785, -1050,   793,  2526, -1050, -1050,   798, -1050,
   -1050,   799, -1050, -1050, -1050,  5978, -1050, -1050,   800,   804,
     807,   809,   810,   811,   812,   813,   815,   502,   817,   535,
    6127,  2360,    67,   556,   821,   623,   824, -1050,   825,   560,
     310,   215, -1050,    69,  1594, -1050, -1050,    69, -1050, -1050,
   -1050, -1050,    31,    31,    31,   491,   491,   340,   340,   273,
     273,   273,   273,   273, -1050,    50, -1050,    50,   387,   536,
     541,   547,   210,   517, -1050,   818,   359,  6127,  6127,   828,
   -1050, -1050,  5978,  5978, -1050, -1050,   806, -1050,   756,   778,
     823,  4730,   827, -1050,   834,   276,   276,   337,  1198, -1050,
    6127, -1050,  2500, -1050, -1050, -1050,   830,   835, -1050, -1050,
   -1050, -1050,   623,   623,   742,   452,   840,   843, -1050,   760,
   -1050,    93, -1050,  5978, -1050, -1050, -1050,  4150, -1050,  5544,
    5544,  5544, -1050,  4276, -1050, -1050, -1050, -1050,  2631, -1050,
   -1050,   855, -1050, -1050, -1050,   452,  5978,   623, -1050, -1050,
   -1050, -1050,   242,   838,   839,  2447, -1050,   267, -1050,   851,
   -1050, -1050, -1050,  2526, -1050, -1050,   818, -1050,   864,   865,
     867,   869,   870,   871,   873,   876, -1050, -1050, -1050, -1050,
     877,  5817,  2360, -1050, -1050,   884,  5817, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050,   215, -1050,  5817,
   -1050,   849, -1050, -1050, -1050,   273,   273, -1050, -1050, -1050,
   -1050, -1050,   559,  1121, -1050,   880,   895, -1050,   885, -1050,
     890,   896, -1050, -1050,  5768, -1050, -1050, -1050,   623,  5817,
    5817, -1050, -1050, -1050, -1050, -1050,   875, -1050, -1050,   903,
     888,  2631,   683,   905,   906,   820, -1050,  5544, -1050, -1050,
   -1050,   623,   908, -1050,  5270,   432, -1050,   321,   321, -1050,
   -1050, -1050, -1050, -1050, -1050,  4024,   357, -1050, -1050, -1050,
    5817,  5817,  5817,  5817,  5817,  5817,  5817,  5817,    67,   564,
   -1050,  5978,   907, -1050, -1050,   310, -1050,   909,   954,  5978,
   -1050,   880, -1050,  6127, -1050, -1050,   742, -1050, -1050,   875,
     911, -1050,   875, -1050,  5817, -1050,  4150,  4150,   916, -1050,
     913, -1050, -1050,   134,  5270,  5978, -1050, -1050,   360,   375,
     378, -1050,  2631, -1050,   579,   583,   591,   600,   604,   617,
     621,   639, -1050, -1050,   923, -1050,   922, -1050,    84, -1050,
   -1050, -1050, -1050,  6127, -1050, -1050,  4150, -1050, -1050, -1050,
    5817,  5817,  4843,   134, -1050, -1050, -1050, -1050,   928, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,  1121,
   -1050,  2869,   920, -1050,   647,   937, -1050,  4843, -1050, -1050,
   -1050, -1050, -1050, -1050,   837,   930,  4150, -1050,   760, -1050,
   -1050, -1050, -1050, -1050,  4150, -1050
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
   -1050, -1050, -1050, -1050,  -555,  -376,    17, -1050, -1050,   963,
     278,   -10, -1050, -1050,    72,   389,   196,   313,   883,  -258,
    1358,  1389,   990,   832, -1050, -1050,    -2,  1935,  2669, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050,   879, -1050, -1050, -1050,
    -164, -1050, -1050, -1050,    56, -1050, -1050,    71, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050,  -260,   -83,   120,   565,
     119,   260,   291,   279,    89,   -29,  -102, -1050, -1050, -1050,
     172, -1050, -1050,  -477, -1050, -1050,   219,   516,    39,    40,
    -753,   -42, -1050, -1050, -1050, -1050, -1050, -1050, -1050, -1050,
     331, -1050,  2611,   -99,   -54, -1050,   819,  -377, -1050,  -529,
    -193, -1050, -1050, -1050, -1050,   -61, -1050, -1050,   434,   336,
   -1050,  -168,  -452, -1050,  -146,  -679, -1050, -1050,  2143,   202,
   -1050,    35,   -65, -1050, -1049,  -481, -1050, -1050, -1050, -1050,
   -1050, -1050,    44,    45, -1050,    49, -1050,    51, -1050, -1002,
   -1050, -1050,    42,  -372,   205,   -63, -1050,   395, -1050, -1050,
   -1050,  1753,   102,  -699,  -725, -1050, -1050, -1050, -1050, -1050,
   -1050,  -145,  -378,  -409,   333, -1050, -1050, -1050, -1050,  -107,
     293, -1050, -1050, -1050, -1050, -1050, -1050, -1050,   831, -1050,
   -1050,  -729, -1050, -1050, -1050, -1050, -1050, -1050,   275, -1050,
   -1050,  -490, -1050,    81,  -305, -1050,   512, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050,  -864, -1050, -1050, -1050, -1050, -1050,
   -1050, -1050, -1050, -1050, -1050, -1050, -1050,    85, -1050,  -963,
    1792,   393,    33,   241,   776,  -139,   148, -1050,   988,   -97,
   -1050,   107,  1124,  2563, -1050,   -75,  -559,   401,   692, -1050,
   -1050, -1050, -1050, -1050, -1050,    46, -1050, -1050,   -51, -1050,
    -304,  -557,   -87,   -84,  1807,   -78,   396,   402,   403,   398,
     386,  -210,  -202,  1750, -1050, -1050,  1256,  -500,  -476,  -293,
   -1050, -1050,   -16
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -702
static const short yytable[] =
{
      65,   533,   664,   415,   124,   175,   690,   759,   586,   534,
     673,   581,    65,   470,   773,   472,   429,   474,   733,   604,
     734,   749,   735,   449,   547,   218,   605,   606,   804,   276,
     764,   123,   763,   909,   947,   102,   140,   488,   344,   895,
    1077,   291,   621,   297,   930,   163,  1107,   102,   127,   412,
     414,   826,   607,    65,   828,   702,  1033,  1034,   430,   622,
     656,   588,   195,   195,   149,   631,   443,   842,   843,   844,
     307,   421,     4,   541,    59,   610,   151,   590,   284,     4,
     770,   475,   890,   976,    65,   199,    59,     3,   102,   150,
     142,     4,   275,  1166,   533,   207,     4,   344,   344,   737,
     284,  1160,   534,     5,     6,     7,     8,     9,    10,   226,
     592,   333,   622,   469,   542,   594,  1023,   555,  1177,   188,
     148,    79,    78,   383,   152,   669,   301,    59,   454,   460,
     189,   623,   401,    79,    78,    37,   287,   276,   608,   417,
     291,   589,   297,   681,   632,   633,  1168,    65,    65,   373,
     105,   643,   210,   672,    37,   483,   211,   591,   721,   433,
     286,   611,   105,   212,   723,    37,   771,  1012,   891,   977,
     333,   333,   224,  1099,    79,    78,   773,   288,   570,   634,
     635,   160,   102,   225,   623,  -531,   433,   571,   195,   195,
     593,   195,   195,   195,   195,   595,  1169,   161,   408,   675,
     275,   409,   206,   105,   303,  1017,   582,   333,   304,   189,
     760,   931,   225,   138,   308,   212,   204,   142,   142,   654,
     446,    59,   433,     9,    10,   142,   508,   446,   447,   766,
     111,   289,     4,  -316,   105,   447,   577,   989,   213,   214,
     231,   533,   282,   659,   707,     4,   153,   533,  -531,   534,
     866,  -316,   118,   154,  -531,   534,   122,   186,   187,     4,
     918,   341,    80,   911,   922,   658,   161,   912,    79,    78,
     926,   -10,   455,   461,    80,   -10,   884,   291,   885,   297,
     -10,   450,   105,   433,   223,   451,   886,   533,  1002,   207,
     305,   306,   212,    81,   586,   534,  1003,   105,   105,   285,
     118,   687,   688,   492,   301,    81,   222,   286,   446,   441,
     493,   433,   881,     4,  -319,    80,   447,   556,   840,   841,
     341,   341,   557,   406,   421,   407,   743,   300,   118,   412,
     414,   195,  -319,   365,   492,  1085,   441,   302,   444,   445,
    -322,   715,   114,   421,   421,  1105,    81,  -322,  -246,   118,
     282,   468,  -246,   722,  1008,   118,   885,   341,   492,   724,
    1132,   629,   630,  1134,   886,   716,   727,   452,   453,   778,
     433,   717,   441,   779,   991,   492,  1112,   671,   672,  1112,
     195,   195,   731,  1113,   564,    65,  1145,  1131,   372,   947,
     174,   301,   661,   464,  1112,   661,   428,  1112,   195,   195,
     465,  1146,   466,    65,  1147,   728,   433,   433,   456,    80,
     627,   628,   457,   383,   947,   118,   951,  1072,   114,   212,
     102,  -111,  -132,   954,   567,   876,  -111,  1027,   577,   880,
     701,   562,   563,   441,  -246,  -246,   544,  1025,   102,   114,
      81,   410,   916,   398,   399,   114,   122,  1076,   402,   403,
     404,  1039,   782,   428,   419,   780,   781,   420,   118,    59,
    -321,   441,   798,   467,    65,    65,   482,   807,   333,   766,
     333,   484,   333,   801,   894,   217,   620,    59,   142,   636,
     637,     5,     6,     7,     8,     9,    10,   508,   777,   508,
    -121,   508,   333,   551,   458,   459,   553,   142,   142,   552,
     102,   957,   217,   565,   738,   114,    79,    78,   462,   463,
     825,   508,   566,   748,   287,    34,    35,    36,   333,   967,
     441,   766,  1128,   758,    79,    78,   819,     5,     6,     7,
       8,     9,    10,   697,   698,   105,   907,   508,   276,   418,
     845,   846,  1028,  1028,  1028,   847,   848,    65,   545,   577,
      65,   569,   969,   105,   620,   579,   441,   441,   855,   857,
     109,   217,   217,   624,   625,   626,   580,   433,  1108,  1109,
    1110,   583,   662,   663,   596,   620,   666,   667,   433,   766,
     704,   984,   670,   766,   601,  1123,   701,   701,   701,   701,
     701,   701,   701,   701,   433,  1124,  1150,   433,   766,   914,
    1151,   275,   766,  1111,  1022,   609,  1138,  1139,  1152,   289,
     766,   674,   638,   641,   105,   105,   639,  1153,   341,   766,
     341,  1154,   341,   766,   640,   665,   902,   903,   695,  1144,
     541,  -571,  1172,   118,  1155,  1103,   766,   693,  1156,   696,
     766,  1165,   341,  1042,   699,   700,  1163,    80,     4,     5,
     710,     7,     8,     9,    10,   369,  1157,   383,   766,   118,
    1028,   711,   712,   871,  1175,    80,   766,   725,   341,   726,
     383,    65,   163,   736,   537,   750,   751,   752,    81,   753,
      65,   937,   109,    65,   755,   756,  1182,    65,     5,    65,
       7,     8,     9,    10,  1185,  1143,    81,   105,   757,  1126,
     105,   765,   766,   533,   769,   767,   102,   768,   433,   796,
     785,   534,   774,   776,   799,   102,   865,   441,   102,   802,
     805,   109,   102,   545,   102,  1142,   533,   806,   441,   867,
     868,   872,   873,   118,   534,   875,   704,   704,   704,   704,
     704,   704,   704,   704,   441,    59,   877,   441,   333,   114,
     118,   282,   333,   541,    59,   878,  1161,    59,   333,   879,
     883,    59,   300,    59,   365,  1167,   613,   508,   706,   892,
     614,   508,   898,   900,   905,   908,   915,   508,   104,  1055,
     615,   910,   494,   913,   118,    65,   118,   119,   407,   917,
     104,   128,    79,    78,   924,   925,   927,  1044,   928,   932,
     935,    79,    78,   939,    79,    78,  1018,   952,    79,    78,
      79,    78,   953,   955,   956,   958,   411,   772,   701,   959,
     102,   105,   960,   114,   961,   962,   963,   964,   965,   997,
     105,   104,   966,   105,   968,   119,  1041,   105,   980,   105,
     114,   982,   983,   990,   203,   994,   998,   301,   616,   617,
    1000,   618,   619,  1013,  1014,   217,   729,   803,   441,   945,
    1001,   533,   203,   119,  1019,   701,   701,  1020,   203,   534,
     203,   999,  1040,  1183,   545,  1045,   545,   153,  1057,    65,
    1060,  1061,   299,  1062,   119,  1063,  1064,  1065,   701,  1066,
     119,   175,  1067,  1075,  1068,   533,  1079,   371,   341,   797,
    1104,   393,   341,   534,  1071,   397,   946,  1002,   341,  1083,
     203,  1082,  1094,  1084,   102,   333,  1090,   433,   433,   433,
    1093,   333,  1096,  1097,  1125,   104,   203,  1133,   738,  1102,
    1127,   119,  1140,    80,   508,   105,   796,  1173,   217,  1141,
    1098,   217,    80,   796,  1158,    80,  1159,   192,   906,    80,
     119,    80,  1105,    59,  1176,  1179,  1181,     4,     5,   301,
       7,     8,     9,    10,    81,    55,   400,  1024,   704,   882,
     118,   230,   686,    81,   887,  1007,    81,  1081,   203,  1129,
      81,   491,    81,   730,  1047,  1048,   784,  1058,   119,  1051,
    1052,   287,   949,   119,  1053,  1059,  1054,   899,   821,   901,
      79,    78,   904,   889,  1036,   870,   746,   144,  1038,   141,
     428,   837,   203,   600,   473,   704,   704,  1122,  1070,   838,
      37,     4,     5,     6,     7,     8,     9,    10,     5,   105,
       7,     8,     9,    10,   858,   433,   706,   706,   704,   861,
     863,   859,   383,   860,     0,     0,     0,     0,     0,   642,
       0,     0,   203,   333,   643,   287,     0,   938,     0,     0,
     545,   109,     0,     0,     0,   341,     0,   441,   441,   441,
       0,   341,   508,   476,   477,     0,   478,   479,   480,   481,
       0,   701,     0,     0,    37,     0,   289,     0,     0,     0,
       0,     0,   661,     0,   333,   333,   288,     0,     0,     0,
     981,   796,   383,     0,     0,   644,   645,   646,   647,   648,
     649,   650,   651,   508,   508,   652,   653,     0,   612,   141,
       0,     0,   654,     0,     4,     5,   106,     7,     8,     9,
      10,   701,   585,   428,   333,   121,   141,   141,   106,   129,
      65,    80,     0,   146,   141,     0,    12,     0,     0,     0,
     289,     0,   972,   508,     0,     0,   413,     0,   109,     0,
       0,     0,     0,   104,     0,    65,     0,     0,   119,   118,
       0,   679,    81,     0,   333,   102,     0,  1015,  1016,   106,
       0,   104,   333,   121,     0,   441,   118,    37,     0,     0,
       0,   393,   205,   508,   119,     0,     0,     0,     0,     0,
     102,   508,     5,   341,     7,     8,     9,    10,   203,     0,
     205,   121,  1043,   708,   945,     0,   205,     0,   205,     4,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
       0,   704,   121,     0,     0,   287,     0,     0,   121,   945,
       0,     0,   203,   104,   341,   341,     0,     0,     0,   395,
    1095,     0,     0,   109,     0,     0,     0,     0,   205,   114,
       0,   946,     0,     0,     0,   668,     0,     0,   119,     0,
       0,     0,   118,   106,   205,     0,   174,   141,   426,   121,
       0,   704,    37,   680,   341,   119,   946,     0,     0,     0,
     105,     0,     0,  1086,   294,     0,     0,     0,   121,     0,
       0,     4,     5,   972,     7,     8,     9,    10,     0,     0,
       0,     0,     0,     0,     0,   105,  1101,     0,     0,   119,
     139,   119,     0,    12,   341,   203,   205,     0,   203,     0,
     289,  1148,   341,     0,     0,   109,   121,   203,     0,     0,
       0,   121,     0,     0,   708,     0,     0,     0,   295,     0,
       0,     0,     5,   118,     7,     8,     9,    10,     0,     0,
     205,     0,   114,     0,   203,   203,   203,   203,   203,   203,
     203,   203,     0,     0,   135,   135,     0,     0,     0,   203,
    1171,     0,     0,     0,     0,   830,     0,   141,     0,     0,
       0,   834,     0,     0,   834,     0,     0,   141,     0,     0,
     205,     0,   118,     0,     0,   136,   136,   808,   809,   810,
     811,   812,   813,   814,   815,   816,   141,   141,   818,   135,
     135,     0,   193,   193,     0,     0,   831,   141,     4,     5,
       6,     7,     8,     9,    10,   393,     4,     5,     6,     7,
       8,     9,    10,   114,     0,     0,   135,     0,   393,   104,
     136,   136,     0,   194,   194,     0,     0,     0,   104,     0,
       0,   104,   287,     0,     0,   104,     0,   104,     0,     0,
     287,     5,     6,     7,     8,     9,    10,   136,     0,     0,
     832,   708,   708,   380,     0,   888,     0,     0,   135,   135,
       0,    37,   545,   135,   135,   135,     0,     0,     0,    37,
       0,     0,     0,   575,   109,   119,     0,     0,     0,     0,
       0,   106,     0,     0,   381,     0,   121,     0,     0,   136,
     136,     0,     0,     0,   136,   136,   136,     0,     0,   106,
       0,   426,     0,     5,     6,     7,     8,     9,    10,   395,
       0,     0,   121,     0,     0,   119,     0,     0,   193,   193,
       0,   193,   193,   193,   193,     0,   205,   289,   141,     0,
       0,   709,     0,   104,   203,   289,   287,     0,     0,   587,
       0,   203,     0,     5,     0,     7,     8,     9,    10,   194,
     194,     0,   194,   194,   194,   194,     0,     0,     0,     0,
     205,   106,     0,     0,     0,    37,   203,   708,     5,   677,
       7,     8,     9,    10,     0,   141,   830,   575,   141,     5,
       0,     7,     8,     9,    10,     0,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     5,     0,     7,     8,     9,
      10,   287,     0,   121,     0,     0,     0,   705,     0,   970,
       0,  -245,   109,   203,   203,     0,    12,   831,     4,     5,
       6,     7,     8,     9,    10,   537,     0,   104,   109,     0,
       0,   289,     0,     0,     0,     0,   203,   121,   119,   121,
      12,     0,   987,   205,     0,     0,   205,     0,     0,     0,
       0,     0,   109,     0,     0,   205,   992,   993,     0,     0,
       0,   193,   709,    38,     0,   141,   141,    39,   141,   141,
       0,   836,     0,     0,   119,     0,     0,     0,     0,  1009,
       0,    37,   205,   205,   205,   205,   205,   205,   205,   205,
       0,   119,   194,  -245,  -245,     0,   289,   205,     5,   203,
       7,     8,     9,    10,   135,   135,     0,   295,   135,   135,
     193,   193,     0,     0,   135,     0,     0,     0,   708,    12,
       0,     4,     5,     6,     7,     8,     9,    10,   193,   193,
       0,   109,     0,     0,   116,   136,   136,     0,   116,   136,
     136,   194,   194,   380,     0,   136,     0,     0,     0,  1078,
       0,     0,     0,   395,     0,   109,     0,     0,     0,   194,
     194,     0,     0,     0,     0,     0,   395,   106,     0,     0,
       0,     0,     0,   117,   381,     0,   106,   119,     0,   106,
       0,   141,   116,   106,    37,   106,     0,     0,     0,     0,
     393,   202,     0,     0,   141,     0,   294,     0,     0,   709,
     709,     0,     0,     5,     6,     7,     8,     9,    10,   202,
     116,     0,     0,     0,     0,   202,     0,   202,     0,     0,
       0,   117,   817,   121,     0,   587,     0,     0,     0,   203,
       0,   116,     0,   362,     0,     0,   109,   116,     0,     0,
     829,   116,     0,     0,     0,     0,     0,     0,   141,   117,
     393,   116,   116,     0,     0,     0,     0,   202,   119,     0,
       0,     0,     0,   121,     0,    37,   292,     0,   298,   862,
     117,     0,  1130,   202,     0,     0,   117,   294,   116,   203,
     367,   106,   205,   116,     0,     0,     0,     0,   104,   205,
     292,   298,   362,   362,     0,     4,     5,   116,     7,     8,
       9,    10,     0,     0,     0,  1078,     0,   119,     0,     0,
       0,     0,     0,   104,   205,   709,   110,   117,     0,     0,
     126,     0,   431,     0,     0,   202,   202,     0,   202,   109,
       0,     0,   141,     0,     0,   116,   117,     0,   442,     0,
     116,     0,     0,     0,     0,     0,     0,     4,     5,     6,
       7,     8,     9,    10,     0,     0,     0,     0,    37,   202,
       0,   205,   205,   141,   110,   442,     0,     0,     0,    12,
     164,     0,     0,     0,   117,   106,     0,     0,     0,   117,
       0,   109,     0,     0,   205,     0,   121,   380,     0,     0,
       0,     0,   110,     0,     0,     0,     0,     0,     0,   202,
     380,   442,     0,     0,     0,     0,     0,     0,     0,   290,
      37,   296,     0,   110,     0,     0,    38,     0,   381,   110,
      39,     0,   121,     0,   368,     0,   370,     0,     0,     0,
     384,   381,     0,   396,     0,     0,     0,     0,   141,   121,
     597,     0,     0,     0,     0,     0,   165,   205,     4,     5,
       6,     7,     8,     9,    10,     0,     0,     0,     0,     0,
     110,   578,   442,     0,     0,     0,   709,     0,     0,     0,
      12,     4,     5,     6,     7,     8,     9,    10,     0,   110,
       0,     0,   109,    15,   543,     0,     0,     0,  -245,     0,
       0,     0,     0,    12,     0,     0,     0,   129,     0,     0,
       0,     0,   292,     0,   298,   109,     0,     0,   290,     0,
     296,    37,     0,     0,     0,   116,     0,   110,     0,   141,
     116,     0,   110,    40,     0,   121,     0,     0,     0,     0,
       0,     0,   143,     0,    37,     0,     0,     0,   395,     0,
      38,   116,     0,     0,    39,  1032,  1032,  1032,     0,   442,
       0,   116,     0,   159,   117,   202,     0,     0,     0,   578,
       5,     6,     7,     8,     9,    10,   362,   720,     0,     0,
    -245,  -245,     0,     0,     0,     0,     0,   205,     0,     0,
     117,    12,     0,     0,     0,   442,   442,     0,     0,   202,
     367,     0,     0,   109,    15,     0,     0,  1069,   395,     0,
       0,     0,     0,     0,   576,     5,   121,     7,     8,     9,
      10,     0,     0,     0,   202,   116,     0,   705,     0,     0,
       0,     0,    37,     0,     0,     0,    12,   205,     0,     0,
       0,     0,   116,     0,    40,     0,   106,     0,   109,     0,
       0,     0,   143,     0,     0,   290,     0,   296,     0,     0,
       0,     0,     0,   129,   117,   121,     0,     0,     0,   143,
     143,   106,     0,  1032,     0,     0,   116,   143,   116,     0,
       0,   117,   202,    38,     0,   202,   657,    39,     0,     0,
       0,     0,     0,     0,   202,     0,  1114,  1115,  1116,  1117,
    1118,  1119,  1120,  1121,     0,     0,     0,   110,   676,     0,
     678,     0,     0,     0,     0,   117,     0,   117,     0,     0,
       0,   202,   202,   202,   202,   202,   202,   202,   202,     0,
     384,   362,     0,   110,     0,     0,   202,   362,     0,     0,
     362,     0,     0,   362,     5,     0,     7,     8,     9,    10,
     839,     0,     0,     0,     0,     0,   442,     0,     0,     0,
     971,     0,     0,     0,     0,    12,     0,   442,     0,     0,
     159,     0,     0,     0,     0,     0,  1164,   109,     0,     0,
       0,     0,   380,     0,   578,   864,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   116,     0,
       0,     0,     0,     0,     0,     0,   576,   110,     0,     0,
     143,   573,    38,   381,     0,     0,    39,   574,   849,   850,
     851,   852,   853,     0,   110,     0,     0,     0,     0,     0,
       4,     5,     6,     7,     8,     9,    10,   869,     0,     0,
       0,     0,   380,     0,     0,     0,     0,     0,   720,     0,
       0,   159,    12,  1046,     0,     0,   130,   131,   110,     0,
     110,     0,   116,    23,   109,     0,     0,     0,    25,    26,
     132,    28,     0,   381,    31,    32,    33,    34,    35,    36,
       0,     0,     0,     4,     5,     6,     7,     8,     9,    10,
       0,     0,     0,    37,     0,     0,   929,   442,     0,    38,
     362,   117,   116,    39,   933,    12,   934,     0,     0,     0,
       5,     6,     7,     8,     9,    10,     0,   109,     0,     0,
     143,   202,     0,     0,     0,     0,     0,   576,   202,   165,
     143,    12,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,    53,   109,    15,     0,    37,     0,     0,   143,
     143,     0,     0,   202,     0,   788,   789,   790,   791,     0,
     143,     0,   147,     0,     0,     0,   116,     0,     0,     0,
     116,     0,    37,     0,   384,     0,     4,     5,     6,     7,
       8,     9,    10,     0,    40,     0,     0,   384,     0,   108,
       0,     0,     0,     0,   874,     0,     0,     0,    12,   692,
     202,   202,     0,     0,     0,   986,     0,   137,   137,   988,
     109,     0,     0,     0,     4,     5,     6,     7,     8,     9,
      10,     0,     0,   202,     0,   116,     0,   108,     0,   157,
       0,     0,     0,     0,     0,     0,    12,     0,     0,    37,
       0,     0,     0,     0,   110,    38,     0,   293,   109,    39,
       0,     0,   137,   137,     0,   196,   196,     0,     0,   995,
     996,   116,   293,     0,   117,     0,     0,     0,     0,     0,
       0,   293,     0,     0,     0,     0,     0,    37,   116,   137,
       0,     0,     0,    38,   110,     0,   202,    39,     0,   147,
     147,   143,     0,     0,     0,     0,     0,   427,   800,     0,
     117,     0,     0,     0,     0,     0,   362,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   386,   117,     0,  1074,
       0,   137,   137,     0,     0,     0,   137,   137,   137,     4,
       5,     6,     7,     8,     9,    10,   116,     0,   143,     0,
       0,   143,   543,     0,   720,     0,   293,     0,   157,  1087,
    1088,    12,   435,     0,     0,     5,   157,     7,     8,     9,
      10,     0,     0,   109,   116,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   385,     0,    12,     0,     0,   435,
       0,   196,   196,     0,   196,   196,   196,   196,   109,     0,
       0,     0,    37,     0,     0,     0,     0,     0,    38,     0,
       0,     0,    39,   117,   157,     0,     0,   110,     0,     0,
     434,   116,     0,     0,     0,   435,   202,     0,     0,     0,
       0,     0,     0,    38,  1137,     0,     0,    39,   143,   143,
     572,   143,   143,     0,     0,     0,     0,   434,     0,     0,
       0,     0,   293,   110,     0,   116,     0,     0,     0,     0,
     292,     0,     4,     5,     6,     7,     8,     9,    10,     0,
     110,     0,     0,     0,     0,   543,   202,  1170,     0,     0,
       0,     0,     0,   434,    12,     0,   435,   157,     0,     0,
       0,     0,     0,   293,   117,     0,   109,     0,     0,     0,
       0,     0,   116,     0,   116,     0,   157,     0,     0,     0,
       0,     0,     0,     0,   435,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   293,    37,     0,     0,     0,     0,
       0,    38,     0,     0,   196,    39,     0,     0,     0,     0,
       0,     0,     0,   117,   434,     0,   293,     0,     0,     0,
     293,     0,     0,     0,   143,     0,   110,     0,     0,     0,
     427,     0,     0,     0,   985,     0,     0,   143,     0,   384,
       0,     0,   434,   435,     0,     0,     0,   137,   137,   427,
     427,   137,   137,   196,   196,     0,     0,   137,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   196,   196,     0,     0,     0,     0,     0,     0,   435,
     435,     0,     0,     0,     0,     0,   386,     0,     0,     0,
       0,   143,     0,     0,     0,     0,     0,     0,     0,   384,
       0,   434,     0,   435,     0,     0,     0,   110,     0,     0,
       0,     0,     0,     0,   293,     0,     0,     0,     0,     0,
       0,     0,     0,   157,     0,     0,     0,     0,     0,   157,
       0,     0,     0,     0,     0,     0,   157,   434,   434,     0,
       0,     0,     0,     0,   385,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   110,     0,     0,     0,
       0,   434,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   143,     0,     0,     0,     0,
       0,     0,     0,     5,     6,     7,     8,     9,    10,     0,
    1073,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,   143,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   109,    15,     0,     0,
       0,     0,   157,    18,     0,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,   293,     0,     0,     0,     0,
     435,     0,     0,     0,     0,    37,     0,     0,     0,     0,
       0,   435,     0,     0,     0,     0,     0,    40,     0,   435,
     435,   435,   435,   435,   435,   435,   435,   435,     0,     0,
     435,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     157,   143,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,     0,     0,   434,     0,
       0,     0,   293,     0,     0,     0,    52,     0,     0,   434,
       0,     0,     0,     0,     0,     0,     0,   434,   434,   434,
     434,   434,   434,   434,   434,   434,     0,     0,   434,     0,
     386,   293,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   386,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   143,     0,     0,     0,     0,     0,     0,     4,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
       0,   435,    11,     0,     0,     0,     0,     0,   385,     0,
       0,    12,    13,     0,     0,     0,   157,   157,     0,     0,
       0,   385,     0,    14,    15,     0,     0,     0,    16,    17,
      18,    19,    20,    21,    22,    23,     0,     0,     0,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,     0,     0,     0,     0,     0,    38,   434,
       0,     0,    39,     0,    40,     0,     0,     0,     0,     0,
       0,   157,     0,     0,     0,     0,     0,   293,     0,     0,
       0,     0,     5,     6,     7,     8,     9,    10,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     0,     0,    12,     0,     0,     0,     0,     0,     0,
       0,   435,     0,    52,    53,   109,    15,     0,   162,     0,
      16,    17,    18,     0,    20,    21,    22,    23,     0,     0,
       0,   293,    25,    26,   132,    28,     0,     0,    31,    32,
      33,    34,    35,    36,    37,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    40,     0,   435,   435,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   435,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,     0,   157,     0,     0,     0,
       0,     0,     0,     0,     0,    52,    53,     0,     0,     0,
     435,   435,   435,     0,     0,     0,   434,   434,     0,     0,
       0,     0,     0,     0,     0,     0,   157,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   434,
       0,     0,     0,     4,     5,     6,     7,     8,     9,    10,
     309,   310,   311,   312,     0,     0,   313,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,   434,   434,
     434,   314,   315,   316,   317,   318,   319,   109,    15,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    37,   321,   322,   323,
     324,   325,   326,     0,     0,     0,   327,     0,   328,   329,
       0,   293,     0,     0,     0,     0,     0,     0,   435,     0,
       0,     0,     0,     0,     0,   386,     0,     0,   330,   331,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     0,     5,     6,     7,
       8,     9,    10,     0,     0,     0,     0,     0,     0,   820,
       0,     0,   827,     0,   435,     0,     0,     0,    12,     0,
       0,     0,     0,     0,     0,     0,   434,     0,     0,     0,
     109,    15,     0,   385,     0,   386,     0,    18,     0,   236,
      21,    22,     0,     0,     0,     4,     5,     6,     7,     8,
       9,    10,   309,   310,   311,   312,     0,     0,   313,    37,
       0,     0,     0,     0,   435,     0,     0,    12,     0,     0,
       0,    40,   434,   314,   315,   316,   317,   318,   319,   109,
      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   385,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    37,   321,
     322,   323,   324,   325,   326,     0,     0,     0,   327,     0,
     328,   329,   434,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,   331,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     4,     5,     6,
       7,     8,     9,    10,   309,   310,   311,   312,     0,     0,
     313,     0,     0,     0,   854,     0,     0,     0,     0,    12,
       0,     0,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   109,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      37,   321,   322,   323,   324,   325,   326,     0,     0,     0,
     327,     0,   328,   329,     0,     0,     5,     6,     7,     8,
       9,    10,     0,     0,     0,     0,   232,   233,     0,     0,
       0,   234,   330,   331,     0,     0,   235,    12,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,   109,
      15,     0,     0,     0,     0,     0,    18,     0,   236,    21,
      22,     0,     0,     0,     0,     0,   856,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     4,     5,     6,
       7,     8,     9,    10,   309,   310,   311,   312,     0,     0,
     313,   273,   274,     0,     0,     0,   494,     0,     0,    12,
    -701,     0,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   109,    15,   320,   495,     0,    16,    17,    18,   496,
      20,    21,    22,    23,     0,     0,     0,     0,    25,    26,
     132,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,   321,   322,   323,   324,   325,   326,     0,     0,     0,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   331,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,   497,
     498,   499,     0,   500,   501,   502,   503,   504,   505,   506,
     507,    52,    53,     4,     5,     6,     7,     8,     9,    10,
     309,   310,   311,   312,     0,     0,   313,     0,     0,     0,
       0,     0,   494,     0,     0,    12,     0,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,   109,    15,   320,
     495,     0,    16,    17,    18,   496,    20,    21,    22,    23,
       0,     0,     0,     0,    25,    26,   132,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,   321,   322,   323,
     324,   325,   326,     0,     0,     0,   327,     0,   328,   329,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,   331,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,   497,   498,   499,     0,   500,
     501,   502,   503,   504,   505,   506,   507,    52,    53,     4,
       5,     6,     7,     8,     9,    10,   309,   310,   311,   312,
       0,     0,   313,     0,     0,     0,     0,     0,     0,     0,
       0,    12,     0,     0,     0,     0,     0,   314,   315,   316,
     317,   318,   319,   109,    15,   320,     0,     0,    16,    17,
      18,     0,    20,    21,    22,    23,     0,     0,     0,     0,
      25,    26,   132,    28,     0,     0,    31,    32,    33,    34,
      35,    36,    37,   321,   322,   323,   324,   325,   326,     0,
       0,     0,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   331,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     0,     4,     5,     6,     7,     8,     9,    10,     0,
       0,     0,     0,    52,    53,    11,     0,     0,     0,     0,
       0,     0,   940,     0,    12,   941,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   942,    15,     0,     0,
       0,    16,    17,    18,     0,    20,    21,    22,    23,   789,
     790,   791,   943,    25,    26,   132,    28,     0,   944,    31,
      32,    33,    34,    35,    36,    37,     0,     0,     0,     0,
       0,    38,     0,     0,     0,    39,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,     0,     4,     5,     6,
       7,     8,     9,    10,     0,     0,    52,    53,   122,     0,
      11,     0,     0,     0,     0,     0,     0,     0,     0,    12,
      13,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    14,    15,     0,     0,     0,    16,    17,    18,    19,
      20,    21,    22,    23,     0,     0,     0,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,     0,     0,     0,     0,     0,    38,     0,     0,     0,
      39,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,     0,
       4,     5,     6,     7,     8,     9,    10,     0,     0,     0,
       0,    52,    53,    11,     0,     0,     0,     0,     0,   416,
       0,     0,    12,    13,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    14,    15,     0,     0,     0,    16,
      17,    18,    19,    20,    21,    22,    23,     0,     0,     0,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,     0,     0,     0,     0,     0,    38,
       0,     0,     0,    39,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     0,     4,     5,     6,     7,     8,     9,    10,
       0,     0,     0,     0,    52,    53,    11,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    13,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    14,    15,     0,
       0,     0,    16,    17,    18,    19,    20,    21,    22,    23,
       0,     0,     0,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,    38,     0,     0,     0,    39,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     4,     5,     6,     7,
       8,     9,    10,     0,     0,     0,     0,    52,    53,    11,
       0,     0,     0,     0,     0,     0,     0,     0,    12,   941,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     942,    15,     0,     0,     0,    16,    17,    18,     0,    20,
      21,    22,    23,     0,     0,     0,   943,    25,    26,   132,
      28,     0,   944,    31,    32,    33,    34,    35,    36,    37,
       0,     0,     0,     0,     0,    38,     0,     0,     0,    39,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     0,     4,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
      52,    53,    11,     0,     0,     0,     0,     0,     0,     0,
       0,    12,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   109,    15,     0,     0,     0,    16,    17,
      18,     0,    20,    21,    22,    23,     0,     0,     0,     0,
      25,    26,   132,    28,     0,     0,    31,    32,    33,    34,
      35,    36,    37,     0,     0,     0,     0,     0,    38,     0,
       0,     0,    39,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     5,     6,     7,     8,     9,    10,     0,     0,     0,
       0,     0,     0,    52,    53,   783,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   109,    15,     0,     0,     0,    16,
      17,    18,     0,    20,    21,    22,    23,     0,     0,     0,
       0,    25,    26,   132,    28,     0,     0,    31,    32,    33,
      34,    35,    36,    37,     0,     0,     0,     0,     0,     0,
       0,     0,   190,   191,     0,    40,     0,     0,     0,    23,
       0,     0,     0,     0,    25,    26,   132,    28,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     5,     6,     7,     8,     9,    10,     0,     0,
       0,     0,     0,   373,    52,    53,     0,     0,     0,     0,
       0,     0,     0,    12,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,   374,   375,     0,     0,     0,
     376,   377,   378,     0,    20,    21,    22,    23,    53,     0,
       0,     0,    25,    26,   132,    28,     0,     0,    31,    32,
      33,    34,    35,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     6,     7,     8,     9,    10,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   379,    53,   374,   375,     0,
       0,     0,   376,   377,   378,     0,    20,    21,    22,    23,
       0,     0,     0,     0,    25,    26,   132,    28,     0,     0,
      31,    32,    33,    34,    35,    36,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   232,   233,     0,     0,     0,
     234,     0,     0,     0,     0,   235,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   379,    53,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   366,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,     4,     5,     6,     7,     8,
       9,    10,   309,   310,   311,   312,     0,     0,   313,     0,
       0,     0,     0,     0,   494,     0,     0,    12,     0,     0,
     273,   274,     0,   314,   315,   316,   317,   318,   319,   109,
      15,   320,     0,     0,     0,     0,    18,     0,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,    35,    36,    37,   321,
     322,   323,   324,   325,   326,     0,     0,     0,   327,     0,
     328,   329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     330,   331,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     4,     5,     6,
       7,     8,     9,    10,   309,   310,   311,   312,     0,     0,
     313,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,     0,     0,   314,   315,   316,   317,   318,
     319,   109,    15,   320,     0,     0,     0,     0,    18,     0,
      20,    21,    22,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    34,    35,    36,
      37,   321,   322,   323,   324,   325,   326,     0,     0,     0,
     327,     0,   328,   329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   330,   331,     0,     0,     0,     0,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,     4,
       5,     6,     7,     8,     9,    10,   309,   310,   311,   312,
       0,     0,   313,     0,     0,     0,     0,     0,     0,     0,
       0,    12,     0,     0,     0,     0,     0,   314,   315,   316,
     317,   318,   319,   109,    15,     0,     0,     0,     0,     0,
      18,     0,    20,    21,    22,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
      35,    36,    37,   321,   322,   323,   324,   325,   326,     0,
       0,     0,   327,     0,   328,   329,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   330,   331,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     4,     5,     6,     7,     8,     9,    10,   309,   310,
     311,   312,     0,     0,   313,     0,     0,     0,     0,     0,
     718,     0,     0,    12,     0,     0,     0,     0,     0,   314,
     315,   316,   317,   318,   319,   109,    15,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     5,     6,     7,     8,     9,    10,   309,   310,   311,
     312,     0,     0,   313,    37,   321,   322,   323,   324,   325,
     326,     0,    12,     0,   327,     0,   328,   329,   314,   315,
     316,   317,   318,   319,   109,    15,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,   331,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    37,   321,   322,   323,   324,   325,   326,
       0,     0,     0,   327,     0,   328,   329,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   330,   331,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     4,     5,     6,     7,     8,     9,    10,   309,
     310,   311,   312,     0,     0,   313,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     314,   315,   316,   317,   318,   319,   109,    15,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     5,     6,     7,     8,     9,    10,   309,   310,
     311,   312,     0,     0,   313,    37,   321,   322,   323,   324,
     325,   326,     0,    12,     0,   327,     0,   328,   329,   314,
     315,   316,   317,   318,   319,   109,    15,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   330,   331,     0,
       0,     0,   566,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    37,   321,   322,   323,   324,   325,
     326,     0,     0,     0,   327,     0,   328,   329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   330,   331,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     4,     5,     6,     7,     8,     9,    10,
     309,   310,   311,   312,     0,     0,   599,     0,     0,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,   314,   315,   316,   317,   318,   319,   109,    15,     0,
       0,     5,     6,     7,     8,     9,    10,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,    37,   321,   322,   323,
     324,   325,   326,     0,   109,    15,   327,     0,   328,   329,
       0,    18,     0,    20,    21,    22,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   330,   331,
      34,    35,    36,    37,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    40,     0,     0,     0,     5,
       6,     7,     8,     9,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,   109,    15,     0,     0,     0,     0,     0,    18,
       0,   236,    21,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51
};

static const short yycheck[] =
{
       2,   211,   378,   148,    14,    59,   415,   507,   313,   211,
     388,   304,    14,   181,   543,   183,   155,   185,   470,   323,
     472,   497,   474,   169,   217,    86,   330,   331,   583,    94,
     520,    14,   509,   732,   787,     2,    19,   201,   113,   718,
    1003,   104,   346,   106,   769,    55,  1048,    14,    15,   146,
     147,   610,    16,    55,   613,   432,   920,   921,   157,    28,
     364,    14,    64,    65,    12,    15,   165,   624,   625,   626,
     112,   154,     3,   212,     2,    16,    16,    14,    94,     3,
      16,   188,    16,    16,    86,    68,    14,     0,    55,    37,
      19,     3,    94,  1142,   304,    22,     3,   172,   173,    23,
     116,    17,   304,     4,     5,     6,     7,     8,     9,    92,
      14,   113,    28,    40,   213,    14,    23,   224,  1167,    14,
      37,     2,     2,   125,    64,   383,   109,    55,   170,   171,
      25,   100,   134,    14,    14,    66,    37,   202,   102,   149,
     203,    94,   205,   401,    94,    95,  1148,   149,   150,    15,
       2,    29,    16,    19,    66,   197,    20,    94,   451,   161,
      72,   102,    14,    27,   457,    66,   102,   892,   102,   102,
     172,   173,    14,  1037,    55,    55,   705,    78,   285,   129,
     130,    16,   149,    25,   100,     3,   188,   286,   190,   191,
      94,   193,   194,   195,   196,    94,  1159,    14,    14,   392,
     202,    14,    25,    55,    16,   904,   305,   209,    20,    25,
      27,   770,    25,    17,   112,    27,    68,   146,   147,    97,
      16,   149,   224,     8,     9,   154,   209,    16,    24,    19,
      11,   132,     3,    22,    86,    24,   299,    27,   102,   103,
      92,   451,    94,    14,   437,     3,    38,   457,    66,   451,
     659,    40,    11,    45,    72,   457,    14,    61,    62,     3,
     750,   113,     2,    19,   754,   372,    14,    23,   149,   149,
     760,    15,   170,   171,    14,    19,    17,   340,    19,   342,
      24,    16,   134,   285,    88,    20,    27,   497,    12,    22,
     102,   103,    27,     2,   599,   497,    20,   149,   150,    14,
      59,   408,   409,    19,   287,    14,    87,    72,    16,   161,
      26,   313,   690,     3,    22,    55,    24,    22,   622,   623,
     172,   173,    27,    22,   407,    24,   490,   108,    87,   426,
     427,   333,    40,   114,    19,  1014,   188,    17,   166,   167,
      19,    26,    11,   426,   427,    24,    55,    26,    16,   108,
     202,   179,    20,   452,    17,   114,    19,   209,    19,   458,
    1089,    88,    89,  1092,    27,    26,   465,   102,   103,    16,
     372,   446,   224,    20,    15,    19,    19,   387,    19,    19,
     382,   383,    26,    26,   236,   387,    26,  1086,    14,  1142,
      59,   374,   375,   174,    19,   378,   155,    19,   400,   401,
      17,    26,    19,   405,    26,   466,   408,   409,    16,   149,
      70,    71,    20,   415,  1167,   174,   788,   976,    87,    27,
     387,    22,    25,   795,   276,   685,    27,   917,   491,   689,
     432,   229,   230,   285,   102,   103,   217,   913,   405,   108,
     149,    22,   747,   130,   131,   114,    14,  1002,   135,   136,
     137,   928,   551,   212,    12,   102,   103,    16,   217,   387,
      22,   313,   569,    16,   466,   467,    27,    17,   470,    19,
     472,    22,   474,   580,    17,    86,    19,   405,   407,    92,
      93,     4,     5,     6,     7,     8,     9,   470,   549,   472,
      22,   474,   494,    17,   102,   103,    18,   426,   427,    19,
     467,   805,   113,   103,   487,   174,   387,   387,   172,   173,
     609,   494,   103,   496,    37,    63,    64,    65,   520,    17,
     372,    19,  1079,   506,   405,   405,   601,     4,     5,     6,
       7,     8,     9,   426,   427,   387,   729,   520,   603,   150,
     627,   628,   919,   920,   921,   629,   630,   549,   217,   612,
     552,    14,    17,   405,    19,    17,   408,   409,   636,   637,
      37,   172,   173,    72,    73,    74,    14,   569,  1049,  1050,
    1051,    12,   376,   377,    16,    19,   380,   381,   580,    19,
     432,    21,   386,    19,    16,    21,   588,   589,   590,   591,
     592,   593,   594,   595,   596,  1071,    17,   599,    19,   745,
      17,   603,    19,  1055,   909,    17,  1096,  1097,    17,   132,
      19,   392,    76,    96,   466,   467,    75,    17,   470,    19,
     472,    17,   474,    19,    77,    16,   725,   726,    12,  1105,
     769,    26,  1161,   392,    17,  1044,    19,   418,    17,    26,
      19,  1141,   494,   936,    26,    17,  1136,   387,     3,     4,
      19,     6,     7,     8,     9,   132,    17,   659,    19,   418,
    1037,    15,    39,   673,    17,   405,    19,    17,   520,    17,
     672,   673,   682,    15,    10,    27,    16,    16,   387,    16,
     682,   780,    37,   685,    16,    26,  1176,   689,     4,   691,
       6,     7,     8,     9,  1184,  1104,   405,   549,    26,  1075,
     552,    23,    19,   913,    19,    26,   673,    21,   710,   561,
      15,   913,    24,    24,    15,   682,    15,   569,   685,    21,
      17,    37,   689,   392,   691,  1103,   936,    17,   580,    24,
      24,    24,    24,   492,   936,    23,   588,   589,   590,   591,
     592,   593,   594,   595,   596,   673,    26,   599,   750,   418,
     509,   603,   754,   892,   682,    15,  1133,   685,   760,    15,
      26,   689,   543,   691,   545,  1143,    16,   750,   437,    27,
      20,   754,    21,    21,    17,    17,    23,   760,     2,   947,
      30,    25,    22,    24,   543,   787,   545,    11,    24,    27,
      14,    15,   673,   673,    26,    26,    26,   942,    19,    17,
      17,   682,   682,    25,   685,   685,   905,    22,   689,   689,
     691,   691,    19,    15,    15,    15,   132,   542,   820,    15,
     787,   673,    15,   492,    15,    15,    15,    15,    15,    23,
     682,    55,    17,   685,    17,    59,   935,   689,    17,   691,
     509,    17,    17,    25,    68,    17,    23,   830,    98,    99,
      23,   101,   102,    23,    19,   466,   467,   582,   710,   787,
      26,  1071,    86,    87,    24,   867,   868,    24,    92,  1071,
      94,   881,    17,  1178,   543,    37,   545,    38,    27,   881,
      16,    16,   106,    16,   108,    16,    16,    16,   890,    16,
     114,   945,    16,    44,    17,  1105,    16,   121,   750,   568,
    1045,   125,   754,  1105,    20,   129,   787,    12,   760,    19,
     134,    26,    24,    17,   881,   917,    41,   919,   920,   921,
      17,   923,    17,    17,    17,   149,   150,    16,   911,    21,
      21,   155,    16,   673,   917,   787,   788,    17,   549,    26,
     120,   552,   682,   795,    21,   685,    24,    64,   729,   689,
     174,   691,    24,   881,    17,   118,    26,     3,     4,   942,
       6,     7,     8,     9,   673,     2,   134,   911,   820,   691,
     729,    92,   407,   682,   695,   886,   685,  1006,   202,  1081,
     689,   205,   691,   467,   945,   945,   552,   952,   212,   945,
     945,    37,   787,   217,   945,   953,   945,   722,   603,   724,
     881,   881,   727,   710,   923,   672,   494,    19,   923,    19,
     769,   618,   236,   321,   183,   867,   868,  1068,   972,   618,
      66,     3,     4,     5,     6,     7,     8,     9,     4,   881,
       6,     7,     8,     9,   638,  1037,   705,   706,   890,   641,
     654,   639,  1044,   640,    -1,    -1,    -1,    -1,    -1,    24,
      -1,    -1,   276,  1055,    29,    37,    -1,   782,    -1,    -1,
     729,    37,    -1,    -1,    -1,   917,    -1,   919,   920,   921,
      -1,   923,  1055,   190,   191,    -1,   193,   194,   195,   196,
      -1,  1083,    -1,    -1,    66,    -1,   132,    -1,    -1,    -1,
      -1,    -1,  1075,    -1,  1096,  1097,    78,    -1,    -1,    -1,
     825,   953,  1104,    -1,    -1,    80,    81,    82,    83,    84,
      85,    86,    87,  1096,  1097,    90,    91,    -1,   342,   129,
      -1,    -1,    97,    -1,     3,     4,     2,     6,     7,     8,
       9,  1133,   313,   892,  1136,    11,   146,   147,    14,    15,
    1142,   881,    -1,    19,   154,    -1,    25,    -1,    -1,    -1,
     132,    -1,   821,  1136,    -1,    -1,   132,    -1,    37,    -1,
      -1,    -1,    -1,   387,    -1,  1167,    -1,    -1,   392,   928,
      -1,   395,   881,    -1,  1176,  1142,    -1,   902,   903,    55,
      -1,   405,  1184,    59,    -1,  1037,   945,    66,    -1,    -1,
      -1,   415,    68,  1176,   418,    -1,    -1,    -1,    -1,    -1,
    1167,  1184,     4,  1055,     6,     7,     8,     9,   432,    -1,
      86,    87,   937,   437,  1142,    -1,    92,    -1,    94,     3,
       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
      -1,  1083,   108,    -1,    -1,    37,    -1,    -1,   114,  1167,
      -1,    -1,   466,   467,  1096,  1097,    -1,    -1,    -1,   125,
    1031,    -1,    -1,    37,    -1,    -1,    -1,    -1,   134,   928,
      -1,  1142,    -1,    -1,    -1,   382,    -1,    -1,   492,    -1,
      -1,    -1,  1031,   149,   150,    -1,   945,   287,   154,   155,
      -1,  1133,    66,   400,  1136,   509,  1167,    -1,    -1,    -1,
    1142,    -1,    -1,  1018,    78,    -1,    -1,    -1,   174,    -1,
      -1,     3,     4,   972,     6,     7,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1167,  1041,    -1,    -1,   543,
      22,   545,    -1,    25,  1176,   549,   202,    -1,   552,    -1,
     132,  1112,  1184,    -1,    -1,    37,   212,   561,    -1,    -1,
      -1,   217,    -1,    -1,   568,    -1,    -1,    -1,   132,    -1,
      -1,    -1,     4,  1112,     6,     7,     8,     9,    -1,    -1,
     236,    -1,  1031,    -1,   588,   589,   590,   591,   592,   593,
     594,   595,    -1,    -1,    16,    17,    -1,    -1,    -1,   603,
    1161,    -1,    -1,    -1,    -1,    37,    -1,   397,    -1,    -1,
      -1,   615,    -1,    -1,   618,    -1,    -1,   407,    -1,    -1,
     276,    -1,  1161,    -1,    -1,    16,    17,   588,   589,   590,
     591,   592,   593,   594,   595,   596,   426,   427,   599,    61,
      62,    -1,    64,    65,    -1,    -1,    78,   437,     3,     4,
       5,     6,     7,     8,     9,   659,     3,     4,     5,     6,
       7,     8,     9,  1112,    -1,    -1,    88,    -1,   672,   673,
      61,    62,    -1,    64,    65,    -1,    -1,    -1,   682,    -1,
      -1,   685,    37,    -1,    -1,   689,    -1,   691,    -1,    -1,
      37,     4,     5,     6,     7,     8,     9,    88,    -1,    -1,
     132,   705,   706,   125,    -1,   709,    -1,    -1,   130,   131,
      -1,    66,  1161,   135,   136,   137,    -1,    -1,    -1,    66,
      -1,    -1,    -1,    78,    37,   729,    -1,    -1,    -1,    -1,
      -1,   387,    -1,    -1,   125,    -1,   392,    -1,    -1,   130,
     131,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,   405,
      -1,   407,    -1,     4,     5,     6,     7,     8,     9,   415,
      -1,    -1,   418,    -1,    -1,   769,    -1,    -1,   190,   191,
      -1,   193,   194,   195,   196,    -1,   432,   132,   568,    -1,
      -1,   437,    -1,   787,   788,   132,    37,    -1,    -1,   313,
      -1,   795,    -1,     4,    -1,     6,     7,     8,     9,   190,
     191,    -1,   193,   194,   195,   196,    -1,    -1,    -1,    -1,
     466,   467,    -1,    -1,    -1,    66,   820,   821,     4,   132,
       6,     7,     8,     9,    -1,   615,    37,    78,   618,     4,
      -1,     6,     7,     8,     9,    -1,   492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     4,    -1,     6,     7,     8,
       9,    37,    -1,   509,    -1,    -1,    -1,    16,    -1,   820,
      -1,    20,    37,   867,   868,    -1,    25,    78,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,   881,    37,    -1,
      -1,   132,    -1,    -1,    -1,    -1,   890,   543,   892,   545,
      25,    -1,    78,   549,    -1,    -1,   552,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    -1,   561,   867,   868,    -1,    -1,
      -1,   333,   568,    72,    -1,   705,   706,    76,   708,   709,
      -1,   132,    -1,    -1,   928,    -1,    -1,    -1,    -1,   890,
      -1,    66,   588,   589,   590,   591,   592,   593,   594,   595,
      -1,   945,   333,   102,   103,    -1,   132,   603,     4,   953,
       6,     7,     8,     9,   376,   377,    -1,   132,   380,   381,
     382,   383,    -1,    -1,   386,    -1,    -1,    -1,   972,    25,
      -1,     3,     4,     5,     6,     7,     8,     9,   400,   401,
      -1,    37,    -1,    -1,    11,   376,   377,    -1,    15,   380,
     381,   382,   383,   415,    -1,   386,    -1,    -1,    -1,  1003,
      -1,    -1,    -1,   659,    -1,    37,    -1,    -1,    -1,   400,
     401,    -1,    -1,    -1,    -1,    -1,   672,   673,    -1,    -1,
      -1,    -1,    -1,    11,   415,    -1,   682,  1031,    -1,   685,
      -1,   821,    59,   689,    66,   691,    -1,    -1,    -1,    -1,
    1044,    68,    -1,    -1,   834,    -1,    78,    -1,    -1,   705,
     706,    -1,    -1,     4,     5,     6,     7,     8,     9,    86,
      87,    -1,    -1,    -1,    -1,    92,    -1,    94,    -1,    -1,
      -1,    59,   596,   729,    -1,   599,    -1,    -1,    -1,  1083,
      -1,   108,    -1,   113,    -1,    -1,    37,   114,    -1,    -1,
     614,   118,    -1,    -1,    -1,    -1,    -1,    -1,   888,    87,
    1104,   128,   129,    -1,    -1,    -1,    -1,   134,  1112,    -1,
      -1,    -1,    -1,   769,    -1,    66,   104,    -1,   106,   643,
     108,    -1,  1083,   150,    -1,    -1,   114,    78,   155,  1133,
     118,   787,   788,   160,    -1,    -1,    -1,    -1,  1142,   795,
     128,   129,   172,   173,    -1,     3,     4,   174,     6,     7,
       8,     9,    -1,    -1,    -1,  1159,    -1,  1161,    -1,    -1,
      -1,    -1,    -1,  1167,   820,   821,    11,   155,    -1,    -1,
      15,    -1,   160,    -1,    -1,   202,   203,    -1,   205,    37,
      -1,    -1,   972,    -1,    -1,   212,   174,    -1,   161,    -1,
     217,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    -1,    -1,    -1,    -1,    66,   236,
      -1,   867,   868,  1003,    59,   188,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,   212,   881,    -1,    -1,    -1,   217,
      -1,    37,    -1,    -1,   890,    -1,   892,   659,    -1,    -1,
      -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,   276,
     672,   224,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
      66,   106,    -1,   108,    -1,    -1,    72,    -1,   659,   114,
      76,    -1,   928,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   672,    -1,   128,    -1,    -1,    -1,    -1,  1078,   945,
     320,    -1,    -1,    -1,    -1,    -1,   102,   953,     3,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
     155,   299,   285,    -1,    -1,    -1,   972,    -1,    -1,    -1,
      25,     3,     4,     5,     6,     7,     8,     9,    -1,   174,
      -1,    -1,    37,    38,    16,    -1,    -1,    -1,    20,    -1,
      -1,    -1,    -1,    25,    -1,    -1,    -1,  1003,    -1,    -1,
      -1,    -1,   340,    -1,   342,    37,    -1,    -1,   203,    -1,
     205,    66,    -1,    -1,    -1,   392,    -1,   212,    -1,  1159,
     397,    -1,   217,    78,    -1,  1031,    -1,    -1,    -1,    -1,
      -1,    -1,    19,    -1,    66,    -1,    -1,    -1,  1044,    -1,
      72,   418,    -1,    -1,    76,   919,   920,   921,    -1,   372,
      -1,   428,    -1,    40,   392,   432,    -1,    -1,    -1,   397,
       4,     5,     6,     7,     8,     9,   446,   447,    -1,    -1,
     102,   103,    -1,    -1,    -1,    -1,    -1,  1083,    -1,    -1,
     418,    25,    -1,    -1,    -1,   408,   409,    -1,    -1,   466,
     428,    -1,    -1,    37,    38,    -1,    -1,   971,  1104,    -1,
      -1,    -1,    -1,    -1,   299,     4,  1112,     6,     7,     8,
       9,    -1,    -1,    -1,   491,   492,    -1,    16,    -1,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    25,  1133,    -1,    -1,
      -1,    -1,   509,    -1,    78,    -1,  1142,    -1,    37,    -1,
      -1,    -1,   129,    -1,    -1,   340,    -1,   342,    -1,    -1,
      -1,    -1,    -1,  1159,   492,  1161,    -1,    -1,    -1,   146,
     147,  1167,    -1,  1037,    -1,    -1,   543,   154,   545,    -1,
      -1,   509,   549,    72,    -1,   552,   371,    76,    -1,    -1,
      -1,    -1,    -1,    -1,   561,    -1,  1060,  1061,  1062,  1063,
    1064,  1065,  1066,  1067,    -1,    -1,    -1,   392,   393,    -1,
     395,    -1,    -1,    -1,    -1,   543,    -1,   545,    -1,    -1,
      -1,   588,   589,   590,   591,   592,   593,   594,   595,    -1,
     415,   601,    -1,   418,    -1,    -1,   603,   607,    -1,    -1,
     610,    -1,    -1,   613,     4,    -1,     6,     7,     8,     9,
     620,    -1,    -1,    -1,    -1,    -1,   569,    -1,    -1,    -1,
      20,    -1,    -1,    -1,    -1,    25,    -1,   580,    -1,    -1,
     247,    -1,    -1,    -1,    -1,    -1,  1140,    37,    -1,    -1,
      -1,    -1,  1044,    -1,   612,   655,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   665,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
     287,   288,    72,  1044,    -1,    -1,    76,   294,   631,   632,
     633,   634,   635,    -1,   509,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,   665,    -1,    -1,
      -1,    -1,  1104,    -1,    -1,    -1,    -1,    -1,   718,    -1,
      -1,   328,    25,    26,    -1,    -1,    42,    43,   543,    -1,
     545,    -1,   729,    49,    37,    -1,    -1,    -1,    54,    55,
      56,    57,    -1,  1104,    60,    61,    62,    63,    64,    65,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      -1,    -1,    -1,    66,    -1,    -1,   766,   710,    -1,    72,
     770,   729,   769,    76,   774,    25,   776,    -1,    -1,    -1,
       4,     5,     6,     7,     8,     9,    -1,    37,    -1,    -1,
     397,   788,    -1,    -1,    -1,    -1,    -1,   612,   795,   102,
     407,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   769,   128,    37,    38,    -1,    66,    -1,    -1,   426,
     427,    -1,    -1,   820,    -1,    49,    50,    51,    52,    -1,
     437,    -1,    19,    -1,    -1,    -1,   833,    -1,    -1,    -1,
     837,    -1,    66,    -1,   659,    -1,     3,     4,     5,     6,
       7,     8,     9,    -1,    78,    -1,    -1,   672,    -1,    16,
      -1,    -1,    -1,    -1,   679,    -1,    -1,    -1,    25,    26,
     867,   868,    -1,    -1,    -1,   833,    -1,    16,    17,   837,
      37,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
       9,    -1,    -1,   890,    -1,   892,    -1,    16,    -1,    38,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,    66,
      -1,    -1,    -1,    -1,   729,    72,    -1,   104,    37,    76,
      -1,    -1,    61,    62,    -1,    64,    65,    -1,    -1,   872,
     873,   928,   119,    -1,   892,    -1,    -1,    -1,    -1,    -1,
      -1,   128,    -1,    -1,    -1,    -1,    -1,    66,   945,    88,
      -1,    -1,    -1,    72,   769,    -1,   953,    76,    -1,   146,
     147,   568,    -1,    -1,    -1,    -1,    -1,   154,   575,    -1,
     928,    -1,    -1,    -1,    -1,    -1,   976,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   125,   945,    -1,   989,
      -1,   130,   131,    -1,    -1,    -1,   135,   136,   137,     3,
       4,     5,     6,     7,     8,     9,  1003,    -1,   615,    -1,
      -1,   618,    16,    -1,  1014,    -1,   203,    -1,   157,  1019,
    1020,    25,   161,    -1,    -1,     4,   165,     6,     7,     8,
       9,    -1,    -1,    37,  1031,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   125,    -1,    25,    -1,    -1,   188,
      -1,   190,   191,    -1,   193,   194,   195,   196,    37,    -1,
      -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    76,  1031,   213,    -1,    -1,   892,    -1,    -1,
     161,  1078,    -1,    -1,    -1,   224,  1083,    -1,    -1,    -1,
      -1,    -1,    -1,    72,  1094,    -1,    -1,    76,   705,   706,
     287,   708,   709,    -1,    -1,    -1,    -1,   188,    -1,    -1,
      -1,    -1,   299,   928,    -1,  1112,    -1,    -1,    -1,    -1,
    1078,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
     945,    -1,    -1,    -1,    -1,    16,  1133,    18,    -1,    -1,
      -1,    -1,    -1,   224,    25,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,   340,  1112,    -1,    37,    -1,    -1,    -1,
      -1,    -1,  1159,    -1,  1161,    -1,   305,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   371,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,   333,    76,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1161,   285,    -1,   393,    -1,    -1,    -1,
     397,    -1,    -1,    -1,   821,    -1,  1031,    -1,    -1,    -1,
     407,    -1,    -1,    -1,   831,    -1,    -1,   834,    -1,  1044,
      -1,    -1,   313,   372,    -1,    -1,    -1,   376,   377,   426,
     427,   380,   381,   382,   383,    -1,    -1,   386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   400,   401,    -1,    -1,    -1,    -1,    -1,    -1,   408,
     409,    -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,
      -1,   888,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1104,
      -1,   372,    -1,   432,    -1,    -1,    -1,  1112,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   452,    -1,    -1,    -1,    -1,    -1,   458,
      -1,    -1,    -1,    -1,    -1,    -1,   465,   408,   409,    -1,
      -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1161,    -1,    -1,    -1,
      -1,   432,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   972,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     4,     5,     6,     7,     8,     9,    -1,
     987,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,  1003,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,
      -1,    -1,   551,    44,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   612,    -1,    -1,    -1,    -1,
     569,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    -1,
      -1,   580,    -1,    -1,    -1,    -1,    -1,    78,    -1,   588,
     589,   590,   591,   592,   593,   594,   595,   596,    -1,    -1,
     599,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     609,  1078,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,   569,    -1,
      -1,    -1,   679,    -1,    -1,    -1,   127,    -1,    -1,   580,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   588,   589,   590,
     591,   592,   593,   594,   595,   596,    -1,    -1,   599,    -1,
     659,   708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   672,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1159,    -1,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
      -1,   710,    16,    -1,    -1,    -1,    -1,    -1,   659,    -1,
      -1,    25,    26,    -1,    -1,    -1,   725,   726,    -1,    -1,
      -1,   672,    -1,    37,    38,    -1,    -1,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    -1,    -1,    -1,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,   710,
      -1,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,   780,    -1,    -1,    -1,    -1,    -1,   834,    -1,    -1,
      -1,    -1,     4,     5,     6,     7,     8,     9,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   820,    -1,   127,   128,    37,    38,    -1,   132,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    -1,    -1,
      -1,   888,    54,    55,    56,    57,    -1,    -1,    60,    61,
      62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,   867,   868,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   820,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   890,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,   905,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     919,   920,   921,    -1,    -1,    -1,   867,   868,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   935,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   890,
      -1,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,   919,   920,
     921,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    -1,    78,    79,
      -1,  1078,    -1,    -1,    -1,    -1,    -1,    -1,  1037,    -1,
      -1,    -1,    -1,    -1,    -1,  1044,    -1,    -1,    98,    99,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,    -1,     4,     5,     6,
       7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    16,
      -1,    -1,   132,    -1,  1083,    -1,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1037,    -1,    -1,    -1,
      37,    38,    -1,  1044,    -1,  1104,    -1,    44,    -1,    46,
      47,    48,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    -1,    -1,    16,    66,
      -1,    -1,    -1,    -1,  1133,    -1,    -1,    25,    -1,    -1,
      -1,    78,  1083,    31,    32,    33,    34,    35,    36,    37,
      38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1104,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    66,    67,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    -1,
      78,    79,  1133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    -1,
      16,    -1,    -1,    -1,   132,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,
      36,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    -1,    78,    79,    -1,    -1,     4,     5,     6,     7,
       8,     9,    -1,    -1,    -1,    -1,    14,    15,    -1,    -1,
      -1,    19,    98,    99,    -1,    -1,    24,    25,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    37,
      38,    -1,    -1,    -1,    -1,    -1,    44,    -1,    46,    47,
      48,    -1,    -1,    -1,    -1,    -1,   132,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    -1,
      16,   129,   130,    -1,    -1,    -1,    22,    -1,    -1,    25,
      26,    -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    -1,    -1,    -1,    -1,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    22,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    -1,    -1,    -1,    76,    -1,    78,    79,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    -1,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
      -1,    -1,    -1,   127,   128,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    23,    -1,    25,    26,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,     3,     4,     5,
       6,     7,     8,     9,    -1,    -1,   127,   128,    14,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    37,    38,    -1,    -1,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    -1,    -1,    -1,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
      76,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
       3,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
      -1,   127,   128,    16,    -1,    -1,    -1,    -1,    -1,    22,
      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,     3,     4,     5,     6,     7,     8,     9,
      -1,    -1,    -1,    -1,   127,   128,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      -1,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    -1,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,     3,     4,     5,     6,
       7,     8,     9,    -1,    -1,    -1,    -1,   127,   128,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    26,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,     3,
       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
     127,   128,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,
      54,    55,    56,    57,    -1,    -1,    60,    61,    62,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,   127,   128,    18,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,
      -1,    54,    55,    56,    57,    -1,    -1,    60,    61,    62,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    78,    -1,    -1,    -1,    49,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,    -1,
      60,    61,    62,    63,    64,    65,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     4,     5,     6,     7,     8,     9,    -1,    -1,
      -1,    -1,    -1,    15,   127,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    37,    38,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,   128,    -1,
      -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,    61,
      62,    63,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     4,     5,     6,     7,     8,     9,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   127,   128,    37,    38,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,    -1,
      60,    61,    62,    63,    64,    65,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    14,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
      -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    -1,    -1,
     129,   130,    -1,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    -1,    -1,    -1,    -1,    44,    -1,    46,    47,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    -1,
      78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    -1,    -1,    -1,    -1,    44,    -1,
      46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    -1,    -1,    -1,
      76,    -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,    -1,    -1,    -1,    -1,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    -1,    -1,    -1,    -1,    31,    32,    33,
      34,    35,    36,    37,    38,    -1,    -1,    -1,    -1,    -1,
      44,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    -1,
      -1,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      22,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    -1,    -1,    16,    66,    67,    68,    69,    70,    71,
      72,    -1,    25,    -1,    76,    -1,    78,    79,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      31,    32,    33,    34,    35,    36,    37,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    66,    67,    68,    69,    70,
      71,    72,    -1,    25,    -1,    76,    -1,    78,    79,    31,
      32,    33,    34,    35,    36,    37,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    66,    67,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    -1,    78,    79,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    -1,
      -1,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    37,    38,    76,    -1,    78,    79,
      -1,    44,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
      63,    64,    65,    66,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    78,    -1,    -1,    -1,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    37,    38,    -1,    -1,    -1,    -1,    -1,    44,
      -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] =
{
       0,   136,   137,     0,     3,     4,     5,     6,     7,     8,
       9,    16,    25,    26,    37,    38,    42,    43,    44,    45,
      46,    47,    48,    49,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    72,    76,
      78,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   127,   128,   141,   144,   146,   147,   148,   149,
     150,   155,   156,   157,   158,   161,   162,   163,   164,   169,
     181,   182,   183,   184,   185,   187,   189,   192,   193,   195,
     196,   197,   203,   212,   215,   218,   222,   225,   227,   230,
     245,   253,   257,   280,   286,   292,   294,   301,   302,   306,
     307,   355,   357,   358,   359,   361,   367,   368,    16,    37,
     162,   211,   217,   221,   225,   229,   286,   355,   358,   359,
     360,   367,    14,   141,   146,   296,   162,   357,   359,   367,
      42,    43,    56,   151,   152,   155,   156,   227,   151,    22,
     141,   157,   182,   253,   363,   364,   367,   368,    37,    12,
      37,    16,    64,    38,    45,   143,   226,   227,   228,   253,
      16,    14,   132,   146,    26,   102,   209,   210,   213,   214,
     219,   220,   223,   224,   225,   229,   261,   262,   263,   267,
     268,   269,   270,   271,   272,   273,   151,   151,    14,    25,
      42,    43,   153,   155,   156,   161,   227,   153,   154,   141,
     170,   171,   286,   359,   361,   367,    25,    22,   205,   246,
      16,    20,    27,   102,   103,   216,   287,   150,   240,   241,
     242,   243,   211,   151,    14,    25,   141,   165,   167,   168,
     171,   361,    14,    15,    19,    24,    46,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   129,   130,   161,   257,   281,   282,   283,
     284,   293,   361,   406,   407,    14,    72,    37,    78,   132,
     162,   280,   355,   368,    78,   132,   162,   280,   355,   359,
     211,   141,    17,    16,    20,   102,   103,   216,   287,    10,
      11,    12,    13,    16,    31,    32,    33,    34,    35,    36,
      39,    67,    68,    69,    70,    71,    72,    76,    78,    79,
      98,    99,   138,   161,   240,   244,   321,   353,   354,   357,
     359,   361,   367,   369,   370,   373,   374,   375,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   405,   407,   211,    78,   355,   162,   132,
     162,   359,    14,    15,    37,    38,    42,    43,    44,   127,
     155,   156,   159,   161,   162,   163,   227,   297,   298,   299,
     300,   308,   309,   359,   362,   367,   162,   359,   152,   152,
     158,   161,   152,   152,   152,   190,    22,    24,    14,    14,
      22,   132,   364,   132,   364,   296,    22,   146,   150,    12,
      16,   192,   194,   363,   365,   366,   367,   368,   358,   360,
     228,   355,   160,   161,   163,   227,   231,   232,   303,   304,
     305,   361,   389,   228,   205,   205,    16,    24,   249,   249,
      16,    20,   102,   103,   216,   287,    16,    20,   102,   103,
     216,   287,   244,   244,   211,    17,    19,    16,   205,    40,
     246,   313,   246,   313,   246,   304,   153,   153,   153,   153,
     153,   153,    27,   216,    22,   172,   175,   176,   175,   173,
     174,   359,    19,    26,    22,    40,    45,   115,   116,   117,
     119,   120,   121,   122,   123,   124,   125,   126,   141,   149,
     193,   195,   196,   197,   247,   310,   326,   327,   328,   329,
     330,   331,   332,   343,   349,   350,   351,   352,   398,   401,
     402,   161,   361,   396,   397,   403,   404,    10,   289,   290,
     291,   360,   228,    16,   211,   225,   234,   235,   236,   238,
     239,    17,    19,    18,   142,   304,    22,    27,   166,   254,
     255,   275,   254,   254,   361,   103,   103,   361,   285,    14,
     304,   228,   368,   253,   253,    78,   162,   280,   355,    17,
      14,   404,   228,    12,   139,   231,   329,   401,    14,    94,
      14,    94,    14,    94,    14,    94,    16,   398,   399,    16,
     373,    16,   376,   377,   385,   385,   385,    16,   102,    17,
      16,   102,   359,    16,    20,    30,    98,    99,   101,   102,
      19,   385,    28,   100,    72,    73,    74,    70,    71,    88,
      89,    15,    94,    95,   129,   130,    92,    93,    76,    75,
      77,    96,    24,    29,    80,    81,    82,    83,    84,    85,
      86,    87,    90,    91,    97,   400,   385,   162,   304,    14,
     140,   141,   151,   151,   140,    16,   151,   151,   153,   154,
     151,   146,    19,   297,   211,   235,   162,   132,   162,   359,
     153,   154,   144,   145,   191,   186,   194,   304,   304,   188,
     298,   204,    26,   211,   198,    12,    26,   366,   366,    26,
      17,   161,   232,   233,   361,    16,   225,   235,   359,   367,
      19,    15,    39,   322,   323,    26,    26,   370,    22,   250,
     398,   404,   228,   404,   228,    17,    17,   228,   240,   150,
     212,    26,   314,   247,   247,   247,    15,    23,   141,   177,
     178,   179,   180,   175,   208,   211,   331,   311,   141,   403,
      27,    16,    16,    16,   345,    16,    26,    26,   141,   402,
      27,   206,   207,   208,   326,    23,    19,    26,    21,    19,
      16,   102,   323,   234,    24,   235,    24,   240,    16,    20,
     102,   103,   228,    18,   243,    15,   256,   258,    49,    50,
      51,    52,   276,   277,   278,   279,   361,   225,   304,    15,
     253,   304,    21,   323,   139,    17,    17,    17,   231,   231,
     231,   231,   231,   231,   231,   231,   231,   401,   231,   370,
      16,   282,   378,   370,   371,   228,   371,   132,   371,   401,
      37,    78,   132,   356,   359,   372,   132,   356,   372,   398,
     385,   385,   386,   386,   386,   387,   387,   388,   388,   389,
     389,   389,   389,   389,   132,   390,   132,   390,   391,   392,
     393,   394,   401,   395,   398,    15,   298,    24,    24,   355,
     299,   146,    24,    24,   162,    23,   191,    26,    15,    15,
     191,   297,   145,    26,    17,    19,    27,   198,   359,   305,
      16,   102,    27,   288,    17,   250,   251,   252,    21,   323,
      21,   323,   228,   228,   323,    17,   211,   235,    17,   288,
      25,    19,    23,    24,   249,    23,   329,    27,   326,   333,
     336,   344,   326,   347,    26,    26,   326,    26,    19,   398,
     289,   371,    17,   398,   398,    17,   237,   228,   323,    25,
      23,    26,    37,    53,    59,   149,   195,   215,   259,   279,
     295,   278,    22,    19,   278,    15,    15,   385,    15,    15,
      15,    15,    15,    15,    15,    15,    17,    17,    17,    17,
     231,    20,   225,   379,   380,   381,    16,   102,   382,   383,
      17,   323,    17,    17,    21,   253,   355,    78,   355,    27,
      25,    15,   231,   231,    17,   389,   389,    23,    23,   146,
      23,    26,    12,    20,   199,   200,   202,   199,    17,   231,
     324,   325,   289,    23,    19,   323,   323,   288,   228,    24,
      24,   248,   329,    23,   179,   403,   312,   326,   232,   339,
     340,   341,   401,   339,   339,   346,   328,   348,   352,   208,
      17,   228,   404,   323,   296,    37,    26,   213,   214,   265,
     266,   267,   268,   270,   272,   246,   260,    27,   256,   277,
      16,    16,    16,    16,    16,    16,    16,    16,    17,   401,
     380,    20,   371,   253,   398,    44,   139,   354,   359,    16,
     201,   200,    26,    19,    17,   250,   323,   398,   398,   315,
      41,   316,   318,    17,    24,   211,    17,    17,   120,   339,
     342,   323,    21,   298,   296,    24,   274,   274,   260,   260,
     260,   247,    19,    26,   401,   401,   401,   401,   401,   401,
     401,   401,   383,    21,   403,    17,   140,    21,   386,   201,
     231,   288,   316,    16,   316,   317,   334,   398,   326,   326,
      16,    26,   297,   298,   403,    26,    26,    26,   211,   264,
      17,    17,    17,    17,    17,    17,    17,    17,    21,    24,
      17,   232,   320,   326,   401,   402,   259,   297,   274,   354,
      18,   211,   234,    17,   335,    17,    17,   259,   319,   118,
     337,    26,   326,   329,   338,   326
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylineno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 429 "c++.y"
    { PARSER_INIT(); }
    break;

  case 3:
#line 430 "c++.y"
    { PARSER_DONE(); }
    break;

  case 4:
#line 436 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 5:
#line 437 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 6:
#line 438 "c++.y"
    { yyval = type_string(); }
    break;

  case 7:
#line 439 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 10:
#line 449 "c++.y"
    { PUSH_AUTO_ID(); }
    break;

  case 11:
#line 450 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 12:
#line 454 "c++.y"
    { PASS_ID(); yyval = yyvsp[0]; }
    break;

  case 14:
#line 459 "c++.y"
    { DEFINE_VA_LIST(); }
    break;

  case 33:
#line 518 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 34:
#line 521 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 35:
#line 524 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 36:
#line 527 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 37:
#line 529 "c++.y"
    { DEFINE(variable_c); }
    break;

  case 39:
#line 566 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 40:
#line 571 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 41:
#line 573 "c++.y"
    { yyval = yyvsp[0]; is_type_def = 1; }
    break;

  case 42:
#line 575 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 43:
#line 577 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 44:
#line 579 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 45:
#line 582 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 46:
#line 585 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 47:
#line 590 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 48:
#line 594 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 49:
#line 598 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 52:
#line 608 "c++.y"
    { is_type_def = 1; }
    break;

  case 56:
#line 623 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 57:
#line 626 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 58:
#line 629 "c++.y"
    { yyval = yyvsp[0]; is_type_def = 1; }
    break;

  case 59:
#line 632 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 60:
#line 635 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 61:
#line 638 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 62:
#line 641 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 63:
#line 652 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 64:
#line 654 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 74:
#line 673 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 75:
#line 694 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID();
					  yyval.nested = yyvsp[0].nested; }
    break;

  case 76:
#line 696 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 77:
#line 698 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 78:
#line 707 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 79:
#line 708 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 80:
#line 710 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 81:
#line 721 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 82:
#line 722 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 83:
#line 723 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 84:
#line 724 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 85:
#line 742 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 86:
#line 743 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 87:
#line 744 "c++.y"
    { yyval = type_simple(bool_t); }
    break;

  case 88:
#line 745 "c++.y"
    { yyval = type_simple(short_t); }
    break;

  case 89:
#line 746 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 90:
#line 747 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 91:
#line 748 "c++.y"
    { yyval = type_signed(
						type_simple(int_t)); }
    break;

  case 92:
#line 750 "c++.y"
    { yyval = type_unsigned(
						type_simple(int_t)); }
    break;

  case 93:
#line 752 "c++.y"
    { yyval = type_simple(float_t); }
    break;

  case 94:
#line 753 "c++.y"
    { yyval = type_simple(double_t); }
    break;

  case 95:
#line 754 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 101:
#line 777 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 102:
#line 778 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 104:
#line 801 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 105:
#line 802 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-1]); }
    break;

  case 106:
#line 803 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 107:
#line 816 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 108:
#line 817 "c++.y"
    { yyval = DEFINE(class_c); }
    break;

  case 109:
#line 834 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 110:
#line 835 "c++.y"
    { yyval = POP_TYPE();
					  yyval = type_connect(yyval, POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 111:
#line 847 "c++.y"
    { yyval = POP_TYPE();
					  yyval.nested = yyvsp[0].nested;
					  yyval = type_connect(yyval, POP_TYPE());
					  PUSH_TYPE(yyval); }
    break;

  case 112:
#line 854 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 113:
#line 882 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 114:
#line 883 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-1]); }
    break;

  case 115:
#line 884 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 116:
#line 888 "c++.y"
    { PUSH_AUTO_ID(); }
    break;

  case 117:
#line 902 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 118:
#line 903 "c++.y"
    { PUSH_TYPE(type_enum());
					  yyval = DEFINE(enum_c); }
    break;

  case 119:
#line 919 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 120:
#line 920 "c++.y"
    { yyval = type_connect(POP_TYPE(),
							type_enum());
					  POPFREE_ID(); }
    break;

  case 121:
#line 926 "c++.y"
    { POPFREE_TYPE(); }
    break;

  case 122:
#line 934 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 123:
#line 944 "c++.y"
    { PUSH_TYPE(type_enum());
					  yyval = type_copy(ENTER(enum_c)); }
    break;

  case 124:
#line 953 "c++.y"
    { LEAVE(); }
    break;

  case 125:
#line 955 "c++.y"
    { LEAVE(); }
    break;

  case 126:
#line 956 "c++.y"
    { LEAVE(); }
    break;

  case 131:
#line 984 "c++.y"
    { PUSH_TYPE(type_simple(int_t));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 134:
#line 995 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 139:
#line 1013 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  ENTER(namespace_c); }
    break;

  case 140:
#line 1015 "c++.y"
    { LEAVE(); type_dispose(yyvsp[-4]); }
    break;

  case 141:
#line 1025 "c++.y"
    { ENTER(namespace_c); }
    break;

  case 142:
#line 1026 "c++.y"
    { LEAVE(); }
    break;

  case 143:
#line 1047 "c++.y"
    { PUSH_ID(UNNAMED_ID);
					  PUSH_TYPE(type_simple(void_t));
					  yyvsp[0] = ENTER(namespace_c);
					  PUSH_TYPE(yyvsp[0]); }
    break;

  case 144:
#line 1051 "c++.y"
    { LEAVE(); USING(); }
    break;

  case 146:
#line 1059 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 147:
#line 1064 "c++.y"
    { POPFREE_ID();
					  type_dispose(DEFINE(link_c));
					  type_dispose(yyvsp[-3]); }
    break;

  case 150:
#line 1081 "c++.y"
    { USING_ID(yyvsp[-1]); }
    break;

  case 151:
#line 1086 "c++.y"
    { USING(); POPFREE_ID(); }
    break;

  case 162:
#line 1130 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 163:
#line 1134 "c++.y"
    { type_dispose(yyvsp[-1]); POPFREE_ID(); }
    break;

  case 164:
#line 1148 "c++.y"
    { }
    break;

  case 165:
#line 1149 "c++.y"
    { }
    break;

  case 173:
#line 1175 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 174:
#line 1180 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 175:
#line 1185 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 176:
#line 1210 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 177:
#line 1211 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 178:
#line 1213 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 179:
#line 1215 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 180:
#line 1223 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 181:
#line 1225 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 182:
#line 1227 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 183:
#line 1229 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 184:
#line 1236 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 185:
#line 1237 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 186:
#line 1239 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 187:
#line 1241 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 188:
#line 1249 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 189:
#line 1251 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 190:
#line 1253 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 191:
#line 1261 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 193:
#line 1290 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 194:
#line 1294 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]); }
    break;

  case 195:
#line 1297 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0); }
    break;

  case 196:
#line 1299 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 197:
#line 1301 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 198:
#line 1302 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 199:
#line 1311 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 200:
#line 1314 "c++.y"
    { LEAVE(); yyval = yyvsp[-4]; }
    break;

  case 201:
#line 1316 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0); }
    break;

  case 202:
#line 1318 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 203:
#line 1321 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 204:
#line 1322 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 205:
#line 1326 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 206:
#line 1330 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]); }
    break;

  case 207:
#line 1333 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0); }
    break;

  case 208:
#line 1335 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 209:
#line 1338 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 210:
#line 1345 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]); }
    break;

  case 211:
#line 1348 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0); }
    break;

  case 212:
#line 1350 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 213:
#line 1353 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 214:
#line 1355 "c++.y"
    { yyval = yyvsp[-1];
					  type_dispose(yyvsp[-3]);
					  LEAVE(); }
    break;

  case 215:
#line 1361 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 216:
#line 1367 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 217:
#line 1373 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 218:
#line 1379 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 221:
#line 1387 "c++.y"
    { scope_stmt_reset(); }
    break;

  case 228:
#line 1409 "c++.y"
    { yyval = yyvsp[0]; yyval.ref_depth = 0; }
    break;

  case 229:
#line 1416 "c++.y"
    { yyval = yyvsp[0]; yyval.ref_depth = 0; }
    break;

  case 230:
#line 1430 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 231:
#line 1441 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 232:
#line 1445 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 233:
#line 1446 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 234:
#line 1451 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 235:
#line 1452 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 236:
#line 1456 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 237:
#line 1457 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 238:
#line 1466 "c++.y"
    { LEAVE(); yyval = yyvsp[-4]; }
    break;

  case 239:
#line 1470 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0); }
    break;

  case 240:
#line 1472 "c++.y"
    { yyvsp[-1] = type_reference(yyvsp[-1]); }
    break;

  case 241:
#line 1474 "c++.y"
    { type_dispose(yyvsp[-1]); yyval = yyvsp[-4]; }
    break;

  case 242:
#line 1476 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 243:
#line 1478 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 244:
#line 1483 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS()); }
    break;

  case 245:
#line 1488 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 246:
#line 1489 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 248:
#line 1498 "c++.y"
    { DEFINE_VA_LIST(); }
    break;

  case 253:
#line 1521 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 254:
#line 1525 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 255:
#line 1529 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 256:
#line 1534 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 257:
#line 1546 "c++.y"
    { yyval.nested = 0; }
    break;

  case 258:
#line 1547 "c++.y"
    { yyval.nested = 1; }
    break;

  case 259:
#line 1573 "c++.y"
    { is_type_def = 0; }
    break;

  case 260:
#line 1575 "c++.y"
    { is_type_def = 0; }
    break;

  case 261:
#line 1577 "c++.y"
    { is_type_def = 0; }
    break;

  case 263:
#line 1589 "c++.y"
    { ENTER(function_c); code_scope = 1; }
    break;

  case 264:
#line 1593 "c++.y"
    { LEAVE(); code_scope = 0; }
    break;

  case 276:
#line 1644 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 278:
#line 1656 "c++.y"
    { yyval = yyvsp[-3]; }
    break;

  case 279:
#line 1658 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 280:
#line 1669 "c++.y"
    { yyval = type_copy(ENTER(class_c)); }
    break;

  case 281:
#line 1677 "c++.y"
    { LEAVE(); }
    break;

  case 282:
#line 1684 "c++.y"
    { PUSH_TYPE(type_class(class_t)); }
    break;

  case 283:
#line 1685 "c++.y"
    { PUSH_TYPE(type_class(struct_t)); }
    break;

  case 284:
#line 1686 "c++.y"
    { PUSH_TYPE(type_class(union_t)); }
    break;

  case 288:
#line 1755 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 289:
#line 1758 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 290:
#line 1760 "c++.y"
    { is_type_def = 0; }
    break;

  case 291:
#line 1763 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 292:
#line 1765 "c++.y"
    { is_type_def = 0; }
    break;

  case 293:
#line 1768 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 294:
#line 1770 "c++.y"
    { is_type_def = 0; }
    break;

  case 295:
#line 1772 "c++.y"
    { DEFINE(variable_c); }
    break;

  case 302:
#line 1806 "c++.y"
    { LEAVE(); yyval = yyvsp[-4]; }
    break;

  case 303:
#line 1809 "c++.y"
    { LEAVE(); yyval = yyvsp[-6]; }
    break;

  case 304:
#line 1811 "c++.y"
    { yyval = TOP_TYPE();
					  yyval = type_parametrized(yyval, 0);
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 305:
#line 1818 "c++.y"
    { yyval = yyvsp[-3];
					  PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c));
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 306:
#line 1824 "c++.y"
    { yyval = yyvsp[-5];
					  PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[-1]);
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 307:
#line 1830 "c++.y"
    { yyval = yyvsp[-3];
					  ID_FROM_TYPE(); ID_MANGLE();
					  PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 308:
#line 1837 "c++.y"
    { yyval = yyvsp[-5];
					  ID_FROM_TYPE(); ID_MANGLE();
					  PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[-1]); }
    break;

  case 309:
#line 1846 "c++.y"
    { yyval = TOP_TYPE();
					  yyval = type_parametrized(
						yyval, ENTER_PARAMS_AT(yyval)); }
    break;

  case 310:
#line 1859 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 311:
#line 1864 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 312:
#line 1869 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 313:
#line 1873 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  DEFINE_VAR_OR_FUNC(yyvsp[0]); }
    break;

  case 316:
#line 1885 "c++.y"
    { yyvsp[0] = type_connect(yyvsp[0], POP_TYPE());
					  PUSH_TYPE(yyvsp[0]); is_type_def = 0; }
    break;

  case 319:
#line 1897 "c++.y"
    { yyvsp[0] = type_connect(yyvsp[0], POP_TYPE());
					  PUSH_TYPE(yyvsp[0]); is_type_def = 0; }
    break;

  case 321:
#line 1907 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 324:
#line 1947 "c++.y"
    { yyval = type_copy(ENTER(class_c)); }
    break;

  case 328:
#line 1972 "c++.y"
    { POPFREE_ID(); USING(); }
    break;

  case 335:
#line 2027 "c++.y"
    { scope_stmt_pop();
					  yyval = scope_define_conversion(
						  	type_connect(yyvsp[-1], yyvsp[0]));
					  PUSH_TYPE(yyval);
					  PUSH_OP_ID(yyval); }
    break;

  case 336:
#line 2035 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 337:
#line 2039 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 338:
#line 2041 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 339:
#line 2042 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 340:
#line 2043 "c++.y"
    { yyval = yyvsp[0]; POPFREE_ID(); }
    break;

  case 341:
#line 2052 "c++.y"
    { yyval = POP_TYPE(); POPFREE_TYPE(); }
    break;

  case 342:
#line 2054 "c++.y"
    { yyval = POP_TYPE(); }
    break;

  case 343:
#line 2061 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 344:
#line 2063 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 345:
#line 2067 "c++.y"
    { scope_stmt_push(); }
    break;

  case 353:
#line 2094 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[0]); }
    break;

  case 354:
#line 2103 "c++.y"
    { yyval = yyvsp[0]; PUSH_OP_ID(yyvsp[0]); }
    break;

  case 355:
#line 2111 "c++.y"
    { yyval = TYPE_OP(operator_new); }
    break;

  case 356:
#line 2112 "c++.y"
    { yyval = TYPE_OP(operator_delete); }
    break;

  case 357:
#line 2113 "c++.y"
    { yyval = TYPE_OP(operator_new_array); }
    break;

  case 358:
#line 2114 "c++.y"
    { yyval = TYPE_OP(
						operator_delete_array); }
    break;

  case 359:
#line 2116 "c++.y"
    { yyval = TYPE_OP(operator_plus); }
    break;

  case 360:
#line 2117 "c++.y"
    { yyval = TYPE_OP(operator_minus); }
    break;

  case 361:
#line 2118 "c++.y"
    { yyval = TYPE_OP(operator_star); }
    break;

  case 362:
#line 2119 "c++.y"
    { yyval = TYPE_OP(operator_slash); }
    break;

  case 363:
#line 2120 "c++.y"
    { yyval = TYPE_OP(operator_percent); }
    break;

  case 364:
#line 2121 "c++.y"
    { yyval = TYPE_OP(operator_hat); }
    break;

  case 365:
#line 2122 "c++.y"
    { yyval = TYPE_OP(operator_and); }
    break;

  case 366:
#line 2123 "c++.y"
    { yyval = TYPE_OP(operator_or); }
    break;

  case 367:
#line 2124 "c++.y"
    { yyval = TYPE_OP(operator_tilde); }
    break;

  case 368:
#line 2125 "c++.y"
    { yyval = TYPE_OP(operator_not); }
    break;

  case 369:
#line 2126 "c++.y"
    { yyval = TYPE_OP(operator_eq); }
    break;

  case 370:
#line 2127 "c++.y"
    { yyval = TYPE_OP(operator_langle); }
    break;

  case 371:
#line 2128 "c++.y"
    { yyval = TYPE_OP(operator_rangle); }
    break;

  case 372:
#line 2129 "c++.y"
    { yyval = TYPE_OP(operator_plus_eq); }
    break;

  case 373:
#line 2130 "c++.y"
    { yyval = TYPE_OP(operator_minus_eq); }
    break;

  case 374:
#line 2131 "c++.y"
    { yyval = TYPE_OP(operator_star_eq); }
    break;

  case 375:
#line 2132 "c++.y"
    { yyval = TYPE_OP(operator_slash_eq); }
    break;

  case 376:
#line 2133 "c++.y"
    { yyval = TYPE_OP(operator_percent_eq); }
    break;

  case 377:
#line 2134 "c++.y"
    { yyval = TYPE_OP(operator_hat_eq); }
    break;

  case 378:
#line 2135 "c++.y"
    { yyval = TYPE_OP(operator_and_eq); }
    break;

  case 379:
#line 2136 "c++.y"
    { yyval = TYPE_OP(operator_or_eq); }
    break;

  case 380:
#line 2137 "c++.y"
    { yyval = TYPE_OP(operator_ltlt); }
    break;

  case 381:
#line 2138 "c++.y"
    { yyval = TYPE_OP(operator_gtgt); }
    break;

  case 382:
#line 2139 "c++.y"
    { yyval = TYPE_OP(operator_gtgt_eq); }
    break;

  case 383:
#line 2140 "c++.y"
    { yyval = TYPE_OP(operator_ltlt_eq); }
    break;

  case 384:
#line 2141 "c++.y"
    { yyval = TYPE_OP(operator_eqeq); }
    break;

  case 385:
#line 2142 "c++.y"
    { yyval = TYPE_OP(operator_ne); }
    break;

  case 386:
#line 2143 "c++.y"
    { yyval = TYPE_OP(operator_le); }
    break;

  case 387:
#line 2144 "c++.y"
    { yyval = TYPE_OP(operator_ge); }
    break;

  case 388:
#line 2145 "c++.y"
    { yyval = TYPE_OP(operator_andand); }
    break;

  case 389:
#line 2146 "c++.y"
    { yyval = TYPE_OP(operator_oror); }
    break;

  case 390:
#line 2147 "c++.y"
    { yyval = TYPE_OP(operator_incr); }
    break;

  case 391:
#line 2148 "c++.y"
    { yyval = TYPE_OP(operator_decr); }
    break;

  case 392:
#line 2149 "c++.y"
    { yyval = TYPE_OP(operator_comma); }
    break;

  case 393:
#line 2150 "c++.y"
    { yyval = TYPE_OP(operator_arrow_star); }
    break;

  case 394:
#line 2151 "c++.y"
    { yyval = TYPE_OP(operator_arrow); }
    break;

  case 395:
#line 2152 "c++.y"
    { yyval = TYPE_OP(operator_function); }
    break;

  case 396:
#line 2153 "c++.y"
    { yyval = TYPE_OP(operator_subscript); }
    break;

  case 397:
#line 2154 "c++.y"
    { yyval = TYPE_OP(operator_minimum); }
    break;

  case 398:
#line 2155 "c++.y"
    { yyval = TYPE_OP(operator_maximum); }
    break;

  case 399:
#line 2173 "c++.y"
    { scope_reset_template(); }
    break;

  case 400:
#line 2176 "c++.y"
    { scope_reset_template(); }
    break;

  case 401:
#line 2178 "c++.y"
    { type_dispose(yyvsp[-1]);
					  is_type_def = 0; }
    break;

  case 402:
#line 2181 "c++.y"
    { POPFREE_ID();
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[-1]);
					  is_type_def = 0; }
    break;

  case 403:
#line 2189 "c++.y"
    { scope_reset_template(); }
    break;

  case 404:
#line 2192 "c++.y"
    { scope_reset_template(); }
    break;

  case 405:
#line 2196 "c++.y"
    { ENTER_PARAMS(); }
    break;

  case 406:
#line 2200 "c++.y"
    { scope_close_template(); }
    break;

  case 411:
#line 2214 "c++.y"
    { PUSH_TYPE(type_class(class_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 412:
#line 2217 "c++.y"
    { type_dispose(yyvsp[0]);
					  PUSH_TYPE(type_class(class_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 413:
#line 2221 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 414:
#line 2224 "c++.y"
    { type_dispose(yyvsp[0]);
					  PUSH_TYPE(type_simple(void_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 415:
#line 2228 "c++.y"
    { POPFREE_ID(); }
    break;

  case 416:
#line 2231 "c++.y"
    { POPFREE_ID(); POPFREE_ID();
					  type_dispose(yyvsp[0]); }
    break;

  case 418:
#line 2242 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 423:
#line 2270 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 424:
#line 2271 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 426:
#line 2280 "c++.y"
    { scope_reset_template(); }
    break;

  case 427:
#line 2288 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 428:
#line 2292 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 429:
#line 2296 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 430:
#line 2301 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 431:
#line 2309 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 432:
#line 2311 "c++.y"
    { yyval = yyvsp[0]; is_type_def = 1; }
    break;

  case 433:
#line 2313 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 434:
#line 2315 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 435:
#line 2317 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 436:
#line 2320 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 437:
#line 2323 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 438:
#line 2336 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 439:
#line 2337 "c++.y"
    { LEAVE(); }
    break;

  case 441:
#line 2343 "c++.y"
    { ENTER(function_c); }
    break;

  case 442:
#line 2345 "c++.y"
    { LEAVE(); }
    break;

  case 447:
#line 2364 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 448:
#line 2365 "c++.y"
    { LEAVE(); }
    break;

  case 452:
#line 2376 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 469:
#line 2423 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[-2]); }
    break;

  case 470:
#line 2425 "c++.y"
    { type_dispose(yyvsp[-2]); }
    break;

  case 472:
#line 2430 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 478:
#line 2448 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 479:
#line 2449 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 480:
#line 2450 "c++.y"
    { LEAVE(); }
    break;

  case 481:
#line 2451 "c++.y"
    { LEAVE(); }
    break;

  case 482:
#line 2452 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 483:
#line 2454 "c++.y"
    { LEAVE(); }
    break;

  case 484:
#line 2458 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 485:
#line 2459 "c++.y"
    { LEAVE(); }
    break;

  case 487:
#line 2464 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 488:
#line 2466 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 489:
#line 2474 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[0]); }
    break;

  case 490:
#line 2478 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 493:
#line 2487 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 494:
#line 2489 "c++.y"
    { LEAVE(); }
    break;

  case 495:
#line 2490 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 496:
#line 2491 "c++.y"
    { LEAVE(); }
    break;

  case 497:
#line 2493 "c++.y"
    { type_dispose(yyvsp[-2]); }
    break;

  case 498:
#line 2494 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 499:
#line 2496 "c++.y"
    { type_dispose(yyvsp[-2]); LEAVE(); }
    break;

  case 504:
#line 2513 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 505:
#line 2514 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[-1]); }
    break;

  case 512:
#line 2539 "c++.y"
    { is_type_def = 0; POPFREE_TYPE(); }
    break;

  case 513:
#line 2551 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 514:
#line 2552 "c++.y"
    { yyval = TYPE_THIS(); }
    break;

  case 515:
#line 2553 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 516:
#line 2554 "c++.y"
    { yyval = yyvsp[0]; POPFREE_ID(); }
    break;

  case 517:
#line 2555 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 518:
#line 2559 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 519:
#line 2567 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 520:
#line 2569 "c++.y"
    { yyval = yyvsp[-3]; }
    break;

  case 521:
#line 2570 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 524:
#line 2579 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 0; }
    break;

  case 525:
#line 2582 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 526:
#line 2585 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 527:
#line 2588 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 531:
#line 2608 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 535:
#line 2621 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 536:
#line 2625 "c++.y"
    { yyval = yyvsp[0]; ID_CLASS(variable_c); }
    break;

  case 537:
#line 2627 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1;
					  ID_CLASS(variable_c); }
    break;

  case 538:
#line 2629 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 539:
#line 2631 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 540:
#line 2633 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 541:
#line 2636 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 542:
#line 2638 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 543:
#line 2663 "c++.y"
    { yyval.nested = 0; }
    break;

  case 544:
#line 2664 "c++.y"
    { yyval.nested = 1; }
    break;

  case 545:
#line 2665 "c++.y"
    { yyval.nested = 1; }
    break;

  case 546:
#line 2667 "c++.y"
    { yyval.nested = 1; }
    break;

  case 547:
#line 2669 "c++.y"
    { yyval = yyvsp[-1]; PUSH_TYPE(yyvsp[-1]); }
    break;

  case 548:
#line 2670 "c++.y"
    { yyval.nested = 0; }
    break;

  case 549:
#line 2672 "c++.y"
    { yyval.nested = 1; }
    break;

  case 550:
#line 2673 "c++.y"
    { yyval.nested = 0; }
    break;

  case 551:
#line 2675 "c++.y"
    { yyval.nested = 1; }
    break;

  case 552:
#line 2677 "c++.y"
    { yyval.nested = 1; }
    break;

  case 553:
#line 2679 "c++.y"
    { yyval.nested = 1; }
    break;

  case 554:
#line 2680 "c++.y"
    { yyval.nested = 0; is_destructor = 1; }
    break;

  case 555:
#line 2682 "c++.y"
    { yyval.nested = 1; }
    break;

  case 556:
#line 2684 "c++.y"
    { yyval.nested = 1; }
    break;

  case 557:
#line 2686 "c++.y"
    { yyval.nested = 1; }
    break;

  case 558:
#line 2690 "c++.y"
    { yyval.nested = 0; }
    break;

  case 559:
#line 2691 "c++.y"
    { yyval.nested = 1; }
    break;

  case 560:
#line 2692 "c++.y"
    { yyval.nested = 1; }
    break;

  case 561:
#line 2694 "c++.y"
    { yyval.nested = 1; }
    break;

  case 562:
#line 2695 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 563:
#line 2708 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 564:
#line 2711 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 565:
#line 2712 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 567:
#line 2725 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 568:
#line 2726 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 569:
#line 2739 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 570:
#line 2742 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 572:
#line 2755 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 573:
#line 2759 "c++.y"
    { scope_stmt_global(); }
    break;

  case 574:
#line 2776 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 575:
#line 2779 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 576:
#line 2781 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 577:
#line 2784 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 578:
#line 2787 "c++.y"
    { scope_stmt_enter(yyvsp[-4]);
					  POPFREE_ID(); }
    break;

  case 579:
#line 2789 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 580:
#line 2802 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 581:
#line 2804 "c++.y"
    { yyval = type_dereference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 582:
#line 2807 "c++.y"
    { yyval = type_return(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 583:
#line 2810 "c++.y"
    { scope_function_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 584:
#line 2811 "c++.y"
    { yyval = type_return(yyvsp[-1]); }
    break;

  case 585:
#line 2813 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 586:
#line 2815 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 587:
#line 2818 "c++.y"
    { type_dispose(yyvsp[-1]);
					  yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 588:
#line 2821 "c++.y"
    { yyval = yyvsp[-1];
					  yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 589:
#line 2825 "c++.y"
    { yyval = TYPE_LOOKUP(yyvsp[-3]); }
    break;

  case 590:
#line 2827 "c++.y"
    { yyval = TYPE_LOOKUP(yyvsp[-3]); }
    break;

  case 591:
#line 2830 "c++.y"
    { scope_lookup_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 592:
#line 2832 "c++.y"
    { scope_lookup_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 593:
#line 2834 "c++.y"
    { yyval = type_simple(void_t);
					  type_dispose(yyvsp[-2]); }
    break;

  case 594:
#line 2837 "c++.y"
    { yyval = type_simple(void_t);
					  type_dispose(yyvsp[-2]); }
    break;

  case 595:
#line 2840 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 596:
#line 2841 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 597:
#line 2844 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 598:
#line 2846 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 599:
#line 2848 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 600:
#line 2850 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 601:
#line 2852 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 602:
#line 2854 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 603:
#line 2856 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 604:
#line 2858 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 605:
#line 2860 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 606:
#line 2862 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 607:
#line 2869 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 608:
#line 2871 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-2]); }
    break;

  case 609:
#line 2875 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 610:
#line 2876 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 611:
#line 2880 "c++.y"
    { POPFREE_TYPE(); POPFREE_ID(); }
    break;

  case 612:
#line 2882 "c++.y"
    { POPFREE_TYPE(); POPFREE_ID(); }
    break;

  case 613:
#line 2886 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 614:
#line 2887 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 615:
#line 2888 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 616:
#line 2889 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 617:
#line 2890 "c++.y"
    { yyval = type_simple(int_t);
					  type_dispose(yyvsp[0]); }
    break;

  case 618:
#line 2893 "c++.y"
    { yyval = type_simple(int_t);
					  type_dispose(yyvsp[-1]); }
    break;

  case 619:
#line 2895 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 620:
#line 2896 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 621:
#line 2901 "c++.y"
    { yyval = type_dereference(
						type_simple(void_t)); }
    break;

  case 622:
#line 2903 "c++.y"
    { yyval = type_reference(
						type_simple(void_t)); }
    break;

  case 623:
#line 2905 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 624:
#line 2906 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 625:
#line 2907 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 626:
#line 2908 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 627:
#line 2916 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 628:
#line 2918 "c++.y"
    { yyval = yyvsp[-2]; }
    break;

  case 629:
#line 2923 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 632:
#line 2947 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 633:
#line 2952 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 634:
#line 2953 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 635:
#line 2957 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 636:
#line 2958 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 637:
#line 2962 "c++.y"
    { yyval = type_reference(
						type_simple(void_t));
					  type_dispose(yyvsp[-1]); }
    break;

  case 638:
#line 2966 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 639:
#line 2972 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 643:
#line 2985 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 644:
#line 2986 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 645:
#line 2990 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 646:
#line 2992 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 647:
#line 2997 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 648:
#line 2999 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 649:
#line 3002 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 650:
#line 3018 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 651:
#line 3020 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 652:
#line 3022 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 653:
#line 3024 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 654:
#line 3028 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 655:
#line 3030 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 656:
#line 3032 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 657:
#line 3036 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 658:
#line 3038 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 659:
#line 3041 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 660:
#line 3053 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 661:
#line 3055 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 662:
#line 3058 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 663:
#line 3061 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 664:
#line 3064 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 665:
#line 3067 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 666:
#line 3072 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 667:
#line 3074 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 668:
#line 3077 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 669:
#line 3080 "c++.y"
    { scope_enum_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 670:
#line 3082 "c++.y"
    { scope_enum_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 671:
#line 3086 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 672:
#line 3088 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 673:
#line 3092 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 674:
#line 3094 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 675:
#line 3098 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 676:
#line 3100 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 677:
#line 3104 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 678:
#line 3106 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 679:
#line 3111 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 680:
#line 3113 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 681:
#line 3118 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 682:
#line 3120 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[-4]); type_dispose(yyvsp[0]); }
    break;

  case 683:
#line 3125 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 684:
#line 3127 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 685:
#line 3129 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 686:
#line 3133 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 687:
#line 3134 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 699:
#line 3152 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 700:
#line 3154 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-2]); }
    break;

  case 701:
#line 3158 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 702:
#line 3159 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 703:
#line 3163 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 704:
#line 3167 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 705:
#line 3168 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 706:
#line 3181 "c++.y"
    { yyval = type_simple(void_t); }
    break;


    }

/* Line 999 of yacc.c.  */
#line 6315 "y.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 3198 "c++.y"



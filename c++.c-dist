/* A Bison parser, made by GNU Bison 1.875a.  */

/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     T_IDENTIFIER = 258,
     T_TYPEDEF_ID = 259,
     T_ENUM_ID = 260,
     T_NAMESPACE_ID = 261,
     T_ALIAS_ID = 262,
     T_CLASS_ID = 263,
     T_TEMPLATE_ID = 264,
     T_NUM_LITERAL = 265,
     T_CHAR_LITERAL = 266,
     T_STRING_LITERAL = 267,
     T_BOOLEAN_LITERAL = 268,
     T_LANGLE = 269,
     T_RANGLE = 270,
     T_LPAREN = 271,
     T_RPAREN = 272,
     T_ELIPSIS = 273,
     T_COMMA = 274,
     T_LBRACK = 275,
     T_RBRACK = 276,
     T_LBRACE = 277,
     T_RBRACE = 278,
     T_EQ = 279,
     T_SCOPE = 280,
     T_SEMIC = 281,
     T_COLON = 282,
     T_DOTSTAR = 283,
     T_QUESTION = 284,
     T_DOT = 285,
     T_DYNAMIC_CAST = 286,
     T_STATIC_CAST = 287,
     T_REINTERPRET_CAST = 288,
     T_CONST_CAST = 289,
     T_TYPEID = 290,
     T_THIS = 291,
     T_TEMPLATE = 292,
     T_TYPENAME = 293,
     T_THROW = 294,
     T_TRY = 295,
     T_CATCH = 296,
     T_TYPEDEF = 297,
     T_FRIEND = 298,
     T_CLASS = 299,
     T_NAMESPACE = 300,
     T_ENUM = 301,
     T_STRUCT = 302,
     T_UNION = 303,
     T_VIRTUAL = 304,
     T_PRIVATE = 305,
     T_PROTECTED = 306,
     T_PUBLIC = 307,
     T_EXPORT = 308,
     T_AUTO = 309,
     T_REGISTER = 310,
     T_EXTERN = 311,
     T_MUTABLE = 312,
     T_ASM = 313,
     T_USING = 314,
     T_INLINE = 315,
     T_EXPLICIT = 316,
     T_STATIC = 317,
     T_CONST = 318,
     T_VOLATILE = 319,
     T_OVERLOAD = 320,
     T_OPERATOR = 321,
     T_SIZEOF = 322,
     T_NEW = 323,
     T_DELETE = 324,
     T_PLUS = 325,
     T_MINUS = 326,
     T_STAR = 327,
     T_SLASH = 328,
     T_PERCENT = 329,
     T_HAT = 330,
     T_AND = 331,
     T_OR = 332,
     T_TILDE = 333,
     T_NOT = 334,
     T_PLUS_EQ = 335,
     T_MINUS_EQ = 336,
     T_STAR_EQ = 337,
     T_SLASH_EQ = 338,
     T_PERCENT_EQ = 339,
     T_HAT_EQ = 340,
     T_AND_EQ = 341,
     T_OR_EQ = 342,
     T_LTLT = 343,
     T_GTGT = 344,
     T_GTGT_EQ = 345,
     T_LTLT_EQ = 346,
     T_EQEQ = 347,
     T_NE = 348,
     T_LE = 349,
     T_GE = 350,
     T_ANDAND = 351,
     T_OROR = 352,
     T_INCR = 353,
     T_DECR = 354,
     T_ARROW_STAR = 355,
     T_ARROW = 356,
     T_FUNCTION = 357,
     T_SUBSCRIPT = 358,
     T_CHAR = 359,
     T_WCHAR = 360,
     T_BOOL = 361,
     T_SHORT = 362,
     T_INT = 363,
     T_LONG = 364,
     T_SIGNED = 365,
     T_UNSIGNED = 366,
     T_FLOAT = 367,
     T_DOUBLE = 368,
     T_VOID = 369,
     T_CASE = 370,
     T_DEFAULT = 371,
     T_IF = 372,
     T_ELSE = 373,
     T_SWITCH = 374,
     T_WHILE = 375,
     T_DO = 376,
     T_FOR = 377,
     T_BREAK = 378,
     T_CONTINUE = 379,
     T_GOTO = 380,
     T_RETURN = 381,
     T_TYPEOF = 382,
     T_THREAD = 383,
     T_MINIMUM = 384,
     T_MAXIMUM = 385,
     T_RESTRICT = 386,
     T_SPECIAL = 387,
     T_LAST_TOKEN = 388,
     PREC = 389
   };
#endif
#define T_IDENTIFIER 258
#define T_TYPEDEF_ID 259
#define T_ENUM_ID 260
#define T_NAMESPACE_ID 261
#define T_ALIAS_ID 262
#define T_CLASS_ID 263
#define T_TEMPLATE_ID 264
#define T_NUM_LITERAL 265
#define T_CHAR_LITERAL 266
#define T_STRING_LITERAL 267
#define T_BOOLEAN_LITERAL 268
#define T_LANGLE 269
#define T_RANGLE 270
#define T_LPAREN 271
#define T_RPAREN 272
#define T_ELIPSIS 273
#define T_COMMA 274
#define T_LBRACK 275
#define T_RBRACK 276
#define T_LBRACE 277
#define T_RBRACE 278
#define T_EQ 279
#define T_SCOPE 280
#define T_SEMIC 281
#define T_COLON 282
#define T_DOTSTAR 283
#define T_QUESTION 284
#define T_DOT 285
#define T_DYNAMIC_CAST 286
#define T_STATIC_CAST 287
#define T_REINTERPRET_CAST 288
#define T_CONST_CAST 289
#define T_TYPEID 290
#define T_THIS 291
#define T_TEMPLATE 292
#define T_TYPENAME 293
#define T_THROW 294
#define T_TRY 295
#define T_CATCH 296
#define T_TYPEDEF 297
#define T_FRIEND 298
#define T_CLASS 299
#define T_NAMESPACE 300
#define T_ENUM 301
#define T_STRUCT 302
#define T_UNION 303
#define T_VIRTUAL 304
#define T_PRIVATE 305
#define T_PROTECTED 306
#define T_PUBLIC 307
#define T_EXPORT 308
#define T_AUTO 309
#define T_REGISTER 310
#define T_EXTERN 311
#define T_MUTABLE 312
#define T_ASM 313
#define T_USING 314
#define T_INLINE 315
#define T_EXPLICIT 316
#define T_STATIC 317
#define T_CONST 318
#define T_VOLATILE 319
#define T_OVERLOAD 320
#define T_OPERATOR 321
#define T_SIZEOF 322
#define T_NEW 323
#define T_DELETE 324
#define T_PLUS 325
#define T_MINUS 326
#define T_STAR 327
#define T_SLASH 328
#define T_PERCENT 329
#define T_HAT 330
#define T_AND 331
#define T_OR 332
#define T_TILDE 333
#define T_NOT 334
#define T_PLUS_EQ 335
#define T_MINUS_EQ 336
#define T_STAR_EQ 337
#define T_SLASH_EQ 338
#define T_PERCENT_EQ 339
#define T_HAT_EQ 340
#define T_AND_EQ 341
#define T_OR_EQ 342
#define T_LTLT 343
#define T_GTGT 344
#define T_GTGT_EQ 345
#define T_LTLT_EQ 346
#define T_EQEQ 347
#define T_NE 348
#define T_LE 349
#define T_GE 350
#define T_ANDAND 351
#define T_OROR 352
#define T_INCR 353
#define T_DECR 354
#define T_ARROW_STAR 355
#define T_ARROW 356
#define T_FUNCTION 357
#define T_SUBSCRIPT 358
#define T_CHAR 359
#define T_WCHAR 360
#define T_BOOL 361
#define T_SHORT 362
#define T_INT 363
#define T_LONG 364
#define T_SIGNED 365
#define T_UNSIGNED 366
#define T_FLOAT 367
#define T_DOUBLE 368
#define T_VOID 369
#define T_CASE 370
#define T_DEFAULT 371
#define T_IF 372
#define T_ELSE 373
#define T_SWITCH 374
#define T_WHILE 375
#define T_DO 376
#define T_FOR 377
#define T_BREAK 378
#define T_CONTINUE 379
#define T_GOTO 380
#define T_RETURN 381
#define T_TYPEOF 382
#define T_THREAD 383
#define T_MINIMUM 384
#define T_MAXIMUM 385
#define T_RESTRICT 386
#define T_SPECIAL 387
#define T_LAST_TOKEN 388
#define PREC 389




/* Copy the first part of user declarations.  */
#line 37 "c++.y"

#	include <string.h>
#	include <stdio.h>

#	include "parser.h"
#	include "cguess.h"
#	include "scope.h"
#	include "sstack.h"
#	include "fifo.h"
#	include "type.h"
#	include "language.h"

#	define YYSTYPE	token_val_t
#	define yyparse	parse
#	define yyerror	error
#	define yydebug	debug
#	define yylex	lexer

#	define PARSER_INIT()	\
		scope_init();	\
		sstack_init(&id_stack, sizeof(char *));	\
		sstack_init(&type_stack, sizeof(struct type_s));	\
		fifo_init(id_fifo)

#	define PARSER_DONE()	\
		scope_done();	\
		sstack_done(&id_stack);	\
		sstack_done(&type_stack)

#	define IDENTIFIER_EMPTY()	\
		last_id[0] = 0

#	define IDENTIFIER_AUTO()	\
		sprintf(last_id, "%i", auto_id ++)

#	define IDENTIFIER(str)	\
		strncpy(last_id, str, MAX_ID_LEN)

#	define PUSH_ID(x)	\
		*(char **) sstack_push(&id_stack) = x

#	define PUSH_AUTO_ID()	\
		PUSH_ID(0)
/* TODO: remove. move all automatic ID generation to scope.c */

#	define PUSH_AUTO_NUM_ID()	\
		PUSH_ID("?")

#	define PUSH_OP_ID(op)	/* TODO */	\
		PUSH_ID(op.definition->name)

#	define POP_ID()	\
		(*(char **) sstack_pop(&id_stack))

#	define TOP_ID()	\
		(*(char **) sstack_top(&id_stack))

#	define POPFREE_ID()	\
		sstack_pop(&id_stack)

#	define PUSH_TYPE(x)	\
		(*(struct type_s *) sstack_push(&type_stack)) = x

#	define POP_TYPE()	\
		(*(struct type_s *) sstack_pop(&type_stack))

#	define TOP_TYPE()	\
		(*(struct type_s *) sstack_top(&type_stack))

#	define PASS_ID()	\
		PUSH_ID(fifo_pop(id_fifo))

#	define POPFREE_TYPE()	\
		type_dispose(POP_TYPE())

#	define ENTER(class)	\
		scope_open(POP_ID(), class, POP_TYPE())

#	define ENTER_ANONYMOUS()	/* TODO: Assign an AUTO_ID */	\
		scope_open(0, unnamed_c, type_simple(void_t))

#	define LEAVE()	\
		scope_close()

#	define ENTER_PARAMS_AT(type)	\
		type.nested ? scope_open_params(type.definition) : \
		scope_open_params(0)

#	define ENTER_PARAMS()	\
		scope_open_params(0)

#	define TYPE_SET(type)	\
		type_dispose(last_type); \
		last_type = type

#	define TYPE_GET()	/* TODO: */	\
		(__extension__ ({ struct identifier_s *__id =	\
			scope_lookup(TOP_ID());	\
			__id ? type_copy(__id->type) :	\
					type_simple(void_t); }))

#	define TYPE_THIS()	\
		scope_this()

#	define TYPE_LOOKUP(class)	\
		type_copy(scope_local_lookup(class, POP_ID()))

#	define TYPE_FN_OR_CTOR(type, is_ctor)	\
		is_ctor.nested ? type_return(type) : type

#	define TYPE_OP(op)	\
		({ scope_stmt_pop(); scope_define_operator(op); })

#	define DEFINE(class)	\
		type_copy(scope_define(POP_ID(), class, POP_TYPE()))

#	define DEFINE_VAR_OR_FUNC(x)	\
		if (is_type_def)	\
			scope_define(POP_ID(), typename_c,	\
			type_connect(type_copy(TOP_TYPE()), x));	\
		else	\
			scope_define(POP_ID(), variable_c, \
			type_connect(type_copy(TOP_TYPE()), x))

#	define DEFINE_VA_LIST()	\
		scope_define("...", variable_c, type_simple(void_t))

#	define USING()	\
		scope_using(POP_TYPE())

#	define USING_ID(type)	\
		scope_using_id(type, id_class, POP_ID())

#	define DESTRUCTOR_ID()	\
		POPFREE_TYPE();	\
		TOP_ID() = identifier_destructor(TOP_ID())

#	define ID_CLASS(class)	\
		id_class = class

#	define ID_MANGLE()	\
		TOP_ID() = is_destructor ? identifier_destructor(TOP_ID()) : \
			identifier_constructor(TOP_ID()); is_destructor = 0

/* TODO: check for destructors */
#	define ID_FROM_TYPE()	\
		(__extension__ ({ struct identifier_s *__id =	\
			POP_TYPE().definition;	\
			if (!__id)	\
				PUSH_ID("bad_constructor");	\
			else if (__id->name[0] == '%')	\
				PUSH_ID(__id->name + 1);	\
			else	\
				PUSH_ID(__id->name); }))

#	define SET_CV(type)	\
		type.is_const |= is_const;	\
		is_const = 0;	\
		type.is_static |= is_static;	\
		is_static = 0

#	define SET_FSPEC(type)	\
		if (is_virtual)	\
			type = type_virtual(type);	\
		is_virtual = 0;	\
		if (is_const)	\
			type = type_function_const(type);	\
		is_const = 0;	\
		type_fn_reference(type)

#	define GNU_ANONYMOUS_UNION(tp)	\
		if (tp.category == classy_t &&	\
				tp.class_type.type == union_t &&	\
				tp.definition &&	\
/* TODO: Change the following condition when AUTO_IDs will be done */	\
				!tp.definition->name)	\
			scope_using(tp);	\
		else	\
			type_dispose(tp)

	/*
	 * This controls if enumerators are accessible from
	 * the enum type's parents scope. This is practically
	 * useless in cguess and adds a serious speed overhead.
	 */
#	ifndef NDEBUG
#	 define USING_ENUMS
#	endif /* NDEBUG */

	/*
	 * We have these global variables for the purpose of
	 * inheritance of attributes between siblings in the
	 * grammar tree.
	 */
	int is_type_def = 0;
	int is_const = 0;
	int is_static = 0;
	int is_virtual = 0;

	/*
	 * The stacks of attributes.
	 */
	struct sstack_s id_stack;
	struct sstack_s type_stack;
	fifo(char *) id_fifo;

	/*
	 * The class of identifier returned by
	 * NESTED_TYPE_OR_NAME_SPECIFIER.
	 */
	identifier_class_t id_class;
	int is_destructor = 0;
	extern char* last_string;

	/*
	 * yydebug tells the parser if it should display information
	 * on the shifts and reductions that it is doing on stderr.
	 */
	int yydebug = 1;


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
typedef int YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */


/* Line 214 of yacc.c.  */
#line 576 "y.tab.c"

#if ! defined (yyoverflow) || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif

/* YYFINAL -- State number of the termination state. */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   6586

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  135
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  272
/* YYNRULES -- Number of rules. */
#define YYNRULES  707
/* YYNRULES -- Number of states. */
#define YYNSTATES  1184

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   389

#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned short yyprhs[] =
{
       0,     0,     3,     4,     8,    10,    12,    15,    17,    18,
      21,    22,    24,    26,    27,    29,    30,    32,    34,    37,
      38,    40,    42,    44,    46,    48,    50,    52,    54,    56,
      58,    60,    62,    64,    67,    72,    77,    82,    86,    88,
      90,    93,    96,    99,   102,   105,   108,   111,   113,   117,
     121,   122,   125,   128,   131,   134,   137,   138,   141,   144,
     147,   150,   153,   156,   158,   161,   163,   165,   167,   169,
     171,   173,   175,   177,   179,   181,   183,   185,   190,   192,
     194,   199,   201,   203,   205,   207,   209,   211,   213,   215,
     217,   219,   221,   223,   225,   227,   229,   231,   236,   238,
     240,   245,   248,   251,   253,   255,   258,   261,   263,   264,
     267,   269,   271,   273,   276,   279,   282,   283,   285,   286,
     289,   290,   291,   294,   296,   299,   303,   305,   307,   311,
     313,   317,   319,   321,   323,   325,   327,   329,   331,   333,
     334,   341,   342,   349,   350,   356,   358,   360,   366,   368,
     370,   375,   380,   387,   395,   396,   400,   404,   405,   407,
     410,   414,   417,   421,   425,   431,   435,   437,   438,   442,
     443,   445,   447,   451,   454,   457,   460,   462,   465,   468,
     471,   473,   476,   479,   482,   484,   487,   490,   493,   495,
     498,   501,   503,   506,   508,   514,   519,   524,   527,   531,
     533,   539,   544,   549,   552,   556,   558,   564,   569,   574,
     577,   583,   588,   593,   596,   601,   604,   607,   610,   613,
     616,   618,   622,   624,   626,   628,   629,   632,   634,   636,
     639,   642,   643,   645,   648,   650,   651,   653,   659,   664,
     665,   671,   674,   678,   681,   682,   684,   687,   691,   693,
     697,   698,   700,   703,   708,   711,   716,   718,   720,   723,
     726,   729,   733,   735,   738,   740,   741,   744,   748,   750,
     754,   755,   757,   760,   762,   766,   768,   770,   775,   778,
     780,   783,   785,   787,   789,   790,   793,   797,   800,   805,
     808,   813,   816,   821,   824,   828,   832,   834,   836,   838,
     839,   843,   849,   857,   862,   867,   874,   879,   886,   887,
     890,   893,   896,   898,   902,   905,   907,   911,   914,   916,
     920,   922,   923,   926,   928,   930,   932,   936,   938,   941,
     944,   946,   948,   950,   953,   956,   958,   960,   965,   967,
     969,   972,   975,   976,   979,   981,   984,   985,   988,   990,
     994,   999,  1002,  1004,  1007,  1009,  1011,  1013,  1015,  1017,
    1019,  1021,  1023,  1025,  1027,  1029,  1031,  1033,  1035,  1037,
    1039,  1041,  1043,  1045,  1047,  1049,  1051,  1053,  1055,  1057,
    1059,  1061,  1063,  1065,  1067,  1069,  1071,  1073,  1075,  1077,
    1079,  1081,  1083,  1085,  1087,  1089,  1091,  1093,  1095,  1101,
    1108,  1113,  1119,  1125,  1132,  1134,  1136,  1138,  1142,  1144,
    1146,  1149,  1154,  1157,  1162,  1169,  1178,  1183,  1185,  1187,
    1191,  1192,  1194,  1196,  1198,  1201,  1206,  1209,  1214,  1217,
    1222,  1225,  1228,  1231,  1234,  1237,  1240,  1243,  1244,  1245,
    1251,  1252,  1253,  1260,  1263,  1264,  1266,  1267,  1274,  1277,
    1280,  1283,  1286,  1291,  1294,  1295,  1297,  1299,  1303,  1304,
    1306,  1308,  1310,  1312,  1314,  1316,  1318,  1320,  1322,  1326,
    1331,  1335,  1338,  1342,  1344,  1347,  1348,  1350,  1351,  1352,
    1353,  1363,  1364,  1371,  1372,  1376,  1377,  1379,  1383,  1386,
    1388,  1389,  1391,  1392,  1399,  1400,  1401,  1411,  1412,  1422,
    1424,  1426,  1429,  1432,  1436,  1440,  1442,  1444,  1446,  1448,
    1450,  1452,  1456,  1458,  1460,  1464,  1466,  1468,  1470,  1472,
    1477,  1479,  1480,  1482,  1484,  1487,  1490,  1494,  1496,  1498,
    1501,  1503,  1506,  1510,  1513,  1515,  1518,  1520,  1523,  1526,
    1530,  1533,  1535,  1538,  1541,  1545,  1548,  1551,  1554,  1558,
    1560,  1563,  1566,  1570,  1573,  1577,  1581,  1586,  1588,  1591,
    1594,  1598,  1601,  1603,  1606,  1609,  1611,  1614,  1617,  1619,
    1622,  1624,  1627,  1629,  1632,  1638,  1641,  1647,  1654,  1657,
    1659,  1664,  1669,  1673,  1676,  1681,  1684,  1689,  1692,  1697,
    1702,  1706,  1710,  1714,  1718,  1721,  1724,  1732,  1740,  1748,
    1756,  1764,  1772,  1780,  1788,  1793,  1798,  1800,  1804,  1805,
    1807,  1810,  1814,  1816,  1819,  1822,  1825,  1828,  1833,  1835,
    1837,  1839,  1841,  1843,  1845,  1847,  1849,  1854,  1861,  1865,
    1866,  1868,  1871,  1874,  1876,  1877,  1879,  1883,  1888,  1892,
    1894,  1895,  1897,  1900,  1903,  1905,  1910,  1912,  1916,  1920,
    1922,  1926,  1930,  1934,  1936,  1940,  1944,  1946,  1950,  1954,
    1956,  1960,  1964,  1968,  1972,  1976,  1978,  1982,  1986,  1990,
    1994,  1996,  2000,  2002,  2006,  2008,  2012,  2014,  2018,  2020,
    2024,  2026,  2032,  2034,  2038,  2040,  2041,  2043,  2045,  2047,
    2049,  2051,  2053,  2055,  2057,  2059,  2061,  2063,  2065,  2067,
    2071,  2072,  2074,  2076,  2077,  2079,  2083,  2086
};

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const short yyrhs[] =
{
     136,     0,    -1,    -1,   137,   144,   132,    -1,    10,    -1,
      11,    -1,    12,   139,    -1,    13,    -1,    -1,    12,   139,
      -1,    -1,   141,    -1,     3,    -1,    -1,    18,    -1,    -1,
      38,    -1,   146,    -1,   144,   146,    -1,    -1,   144,    -1,
     147,    -1,   244,    -1,   293,    -1,   305,    -1,   306,    -1,
     203,    -1,   183,    -1,   148,    -1,   197,    -1,   193,    -1,
     195,    -1,   196,    -1,   149,    26,    -1,   149,   209,   205,
      26,    -1,   149,   210,   205,    26,    -1,   149,   266,   205,
      26,    -1,   215,   205,    26,    -1,    26,    -1,   150,    -1,
      43,   151,    -1,    42,   151,    -1,   155,   151,    -1,   156,
     151,    -1,   226,   151,    -1,   161,   154,    -1,   158,   153,
      -1,   152,    -1,   152,   161,   154,    -1,   152,   158,   153,
      -1,    -1,    43,   152,    -1,    42,   152,    -1,   155,   152,
      -1,   156,   152,    -1,   226,   152,    -1,    -1,    43,   153,
      -1,    42,   153,    -1,   155,   153,    -1,   156,   153,    -1,
     226,   153,    -1,   161,   153,    -1,   153,    -1,   153,   216,
      -1,    54,    -1,    55,    -1,    62,    -1,    56,    -1,    57,
      -1,   128,    -1,    60,    -1,    49,    -1,    61,    -1,     4,
      -1,   360,    -1,   163,    -1,   127,    16,   354,    17,    -1,
     361,    -1,   163,    -1,   127,    16,   354,    17,    -1,   360,
      -1,   161,    -1,   163,    -1,   226,    -1,   104,    -1,   105,
      -1,   106,    -1,   107,    -1,   108,    -1,   109,    -1,   110,
      -1,   111,    -1,   112,    -1,   113,    -1,   114,    -1,   252,
      -1,   252,    14,   303,    15,    -1,   169,    -1,   157,    -1,
     157,    14,   303,    15,    -1,   256,   165,    -1,   164,   170,
      -1,    46,    -1,   167,    -1,   141,   166,    -1,   171,   253,
      -1,   253,    -1,    -1,   168,   253,    -1,   360,    -1,   360,
      -1,     5,    -1,   360,   173,    -1,   141,   172,    -1,   171,
     175,    -1,    -1,   175,    -1,    -1,   174,   175,    -1,    -1,
      -1,   176,   177,    -1,    22,    -1,   178,    23,    -1,   178,
      19,    23,    -1,    23,    -1,   179,    -1,   178,    19,   179,
      -1,   180,    -1,   180,    24,   402,    -1,   141,    -1,   182,
      -1,   192,    -1,     6,    -1,   184,    -1,   189,    -1,   185,
      -1,   187,    -1,    -1,    45,   141,    22,   186,   191,    23,
      -1,    -1,    45,   362,    22,   188,   191,    23,    -1,    -1,
      45,    22,   190,   191,    23,    -1,   145,    -1,     7,    -1,
      45,   141,    24,   194,    26,    -1,   362,    -1,   364,    -1,
      59,   143,   359,    26,    -1,    59,    45,   194,    26,    -1,
      58,    16,    12,   198,    17,    26,    -1,    58,    64,    16,
      12,   198,    17,    26,    -1,    -1,   198,    27,   199,    -1,
     198,    19,   199,    -1,    -1,   200,    -1,   200,   201,    -1,
     202,   200,   201,    -1,    12,   139,    -1,    16,   385,    17,
      -1,    20,   353,    21,    -1,    56,   204,    22,   145,    23,
      -1,    56,   204,   146,    -1,    12,    -1,    -1,   205,    19,
     208,    -1,    -1,   207,    -1,   208,    -1,   207,    19,   208,
      -1,   211,   248,    -1,   213,   248,    -1,   214,   248,    -1,
     217,    -1,   225,   211,    -1,   217,   216,    -1,   217,   286,
      -1,   218,    -1,   225,   211,    -1,   218,   216,    -1,   218,
     286,    -1,   219,    -1,   225,   211,    -1,   219,   216,    -1,
     219,   286,    -1,   220,    -1,   220,   216,    -1,   220,   286,
      -1,   212,    -1,    27,    10,    -1,   228,    -1,   221,   243,
      17,   227,   322,    -1,   217,   102,   227,   322,    -1,   217,
      20,   403,    21,    -1,   217,   103,    -1,    16,   211,    17,
      -1,   229,    -1,   222,   239,    17,   227,   322,    -1,   218,
     102,   227,   322,    -1,   218,    20,   403,    21,    -1,   218,
     103,    -1,    16,   211,    17,    -1,   228,    -1,   223,   243,
      17,   227,   322,    -1,   219,   102,   227,   322,    -1,   219,
      20,   403,    21,    -1,   219,   103,    -1,   224,   243,    17,
     227,   322,    -1,   220,   102,   227,   322,    -1,   220,    20,
     403,    21,    -1,   220,   103,    -1,   262,    16,   212,    17,
      -1,   217,    16,    -1,   218,    16,    -1,   219,    16,    -1,
     220,    16,    -1,    72,   227,    -1,    76,    -1,   357,    72,
     227,    -1,    63,    -1,    64,    -1,    65,    -1,    -1,   227,
     226,    -1,   359,    -1,   356,    -1,   231,   234,    -1,   160,
     232,    -1,    -1,   231,    -1,   225,   234,    -1,   235,    -1,
      -1,   233,    -1,   237,   239,    17,   227,   322,    -1,   238,
     102,   227,   322,    -1,    -1,   238,    20,   236,   403,    21,
      -1,   238,   103,    -1,    16,   233,    17,    -1,   238,    16,
      -1,    -1,   235,    -1,   241,   142,    -1,   240,    19,    18,
      -1,   242,    -1,   240,    19,   242,    -1,    -1,   240,    -1,
     150,   211,    -1,   150,   211,    24,   397,    -1,   150,   234,
      -1,   150,   234,    24,   397,    -1,   239,    -1,   369,    -1,
     149,   267,    -1,   149,   269,    -1,   149,   271,    -1,   215,
     245,   246,    -1,    22,    -1,   330,    23,    -1,   328,    -1,
      -1,    24,   249,    -1,    16,   369,    17,    -1,   397,    -1,
      22,   250,    23,    -1,    -1,   251,    -1,   251,    19,    -1,
     249,    -1,   251,    19,   249,    -1,     8,    -1,   300,    -1,
     274,   275,    22,   255,    -1,   254,   255,    -1,    22,    -1,
     257,    23,    -1,    44,    -1,    47,    -1,    48,    -1,    -1,
     257,   258,    -1,   257,   278,    27,    -1,   149,    26,    -1,
     149,   264,   259,    26,    -1,   149,   267,    -1,   149,   265,
     259,    26,    -1,   149,   269,    -1,   149,   266,   259,    26,
      -1,   149,   271,    -1,   215,   259,    26,    -1,   215,   245,
     246,    -1,   195,    -1,   294,    -1,    26,    -1,    -1,   259,
      19,   263,    -1,   261,    17,   227,   322,   287,    -1,   261,
      19,   239,    17,   227,   322,   287,    -1,   102,   227,   322,
     287,    -1,   262,    16,   150,   211,    -1,   262,    16,   150,
     211,    24,   397,    -1,   262,    16,   150,   234,    -1,   262,
      16,   150,   234,    24,   397,    -1,    -1,   211,   273,    -1,
     213,   273,    -1,   214,   273,    -1,   260,    -1,   268,   245,
     246,    -1,   268,   312,    -1,   213,    -1,   270,   245,   246,
      -1,   270,   312,    -1,   214,    -1,   272,   245,   246,    -1,
     260,    -1,    -1,    24,   402,    -1,    27,    -1,   276,    -1,
     277,    -1,   277,    19,   276,    -1,   360,    -1,    49,   277,
      -1,   278,   277,    -1,    50,    -1,    51,    -1,    52,    -1,
     285,   280,    -1,   281,   284,    -1,   282,    -1,   360,    -1,
     360,    14,   303,    15,    -1,   161,    -1,   283,    -1,   256,
     360,    -1,    46,   360,    -1,    -1,   284,   225,    -1,    66,
      -1,    27,   288,    -1,    -1,    27,   288,    -1,   289,    -1,
     289,    19,   288,    -1,   290,    16,   370,    17,    -1,   290,
     102,    -1,   359,    -1,   285,   292,    -1,    68,    -1,    69,
      -1,   405,    -1,   406,    -1,    70,    -1,    71,    -1,    72,
      -1,    73,    -1,    74,    -1,    75,    -1,    76,    -1,    77,
      -1,    78,    -1,    79,    -1,    24,    -1,    14,    -1,    15,
      -1,    80,    -1,    81,    -1,    82,    -1,    83,    -1,    84,
      -1,    85,    -1,    86,    -1,    87,    -1,    88,    -1,    89,
      -1,    90,    -1,    91,    -1,    92,    -1,    93,    -1,    94,
      -1,    95,    -1,    96,    -1,    97,    -1,    98,    -1,    99,
      -1,    19,    -1,   100,    -1,   101,    -1,   102,    -1,   103,
      -1,   129,    -1,   130,    -1,    37,   295,   297,   296,   146,
      -1,    53,    37,   295,   297,   296,   146,    -1,    56,    37,
     150,    26,    -1,    56,    37,   150,   211,    26,    -1,    37,
     295,   297,   296,   258,    -1,    53,    37,   295,   297,   296,
     258,    -1,    14,    -1,    15,    -1,   298,    -1,   297,    19,
     298,    -1,   299,    -1,   307,    -1,    44,   140,    -1,    44,
     140,    24,   230,    -1,    38,   140,    -1,    38,   140,    24,
     230,    -1,    37,    14,   297,    15,    44,   140,    -1,    37,
      14,   297,    15,    44,   140,    24,   353,    -1,   301,    14,
     303,    15,    -1,     9,    -1,   304,    -1,   302,    19,   304,
      -1,    -1,   302,    -1,   388,    -1,   230,    -1,    37,   146,
      -1,    37,   295,   296,   146,    -1,   308,   211,    -1,   308,
     211,    24,   388,    -1,   308,   234,    -1,   308,   234,    24,
     388,    -1,    43,   151,    -1,    42,   151,    -1,   155,   151,
      -1,   156,   151,    -1,   226,   151,    -1,   161,   154,    -1,
     159,   153,    -1,    -1,    -1,    40,   310,   328,   311,   315,
      -1,    -1,    -1,    40,   313,   287,   247,   314,   315,    -1,
     317,   316,    -1,    -1,   315,    -1,    -1,    41,    16,   319,
      17,   318,   328,    -1,   231,   211,    -1,   231,   233,    -1,
     231,    18,    -1,    39,   398,    -1,    39,    16,   324,    17,
      -1,    39,   102,    -1,    -1,   321,    -1,   230,    -1,   323,
      19,   230,    -1,    -1,   323,    -1,   326,    -1,   327,    -1,
     328,    -1,   331,    -1,   342,    -1,   348,    -1,   349,    -1,
     309,    -1,   141,    27,   325,    -1,   115,   402,    27,   325,
      -1,   116,    27,   325,    -1,   401,    26,    -1,    22,   330,
      23,    -1,   325,    -1,   329,   325,    -1,    -1,   329,    -1,
      -1,    -1,    -1,   117,    16,   332,   338,    17,   333,   325,
     334,   336,    -1,    -1,   119,    16,   335,   338,    17,   325,
      -1,    -1,   118,   337,   325,    -1,    -1,   400,    -1,   339,
      24,   397,    -1,   340,   211,    -1,   231,    -1,    -1,   338,
      -1,    -1,   120,    16,   343,   338,    17,   325,    -1,    -1,
      -1,   121,   344,   325,   345,   120,    16,   400,    17,    26,
      -1,    -1,   122,    16,   346,   347,   341,    26,   401,    17,
     325,    -1,   327,    -1,   351,    -1,   123,    26,    -1,   124,
      26,    -1,   126,   401,    26,    -1,   125,   141,    26,    -1,
     350,    -1,   351,    -1,   197,    -1,   193,    -1,   195,    -1,
     196,    -1,   149,   206,    26,    -1,   138,    -1,    36,    -1,
      16,   400,    17,    -1,   353,    -1,   404,    -1,   356,    -1,
     141,    -1,   141,    14,   303,    15,    -1,   291,    -1,    -1,
      37,    -1,   354,    -1,   358,   354,    -1,   366,   354,    -1,
     366,   358,   354,    -1,   358,    -1,   366,    -1,   366,   358,
      -1,   367,    -1,   358,   367,    -1,   358,    37,   367,    -1,
     358,   132,    -1,   354,    -1,   357,   354,    -1,   162,    -1,
     358,   162,    -1,   366,   162,    -1,   366,   358,   162,    -1,
     366,   132,    -1,   162,    -1,   358,   162,    -1,   366,   162,
      -1,   366,   358,   162,    -1,   366,   132,    -1,    38,   356,
      -1,    38,   162,    -1,    38,   358,   162,    -1,   279,    -1,
     358,   279,    -1,   366,   279,    -1,   366,   358,   279,    -1,
      78,   252,    -1,   358,    78,   252,    -1,   366,    78,   252,
      -1,   366,   358,    78,   252,    -1,   162,    -1,   358,   162,
      -1,   366,   162,    -1,   366,   358,   162,    -1,   366,   132,
      -1,   363,    -1,   366,   363,    -1,   366,   132,    -1,   182,
      -1,   367,   363,    -1,   367,   132,    -1,   365,    -1,   366,
     365,    -1,   192,    -1,   367,   365,    -1,    25,    -1,   157,
      25,    -1,   157,    14,   303,    15,    25,    -1,   252,    25,
      -1,   252,    14,   303,    15,    25,    -1,    37,   141,    14,
     303,    15,    25,    -1,   181,    25,    -1,   352,    -1,   368,
      20,   400,    21,    -1,   368,    16,   370,    17,    -1,   368,
      16,   132,    -1,   368,   102,    -1,   161,    16,   370,    17,
      -1,   161,   102,    -1,   360,    16,   370,    17,    -1,   360,
     102,    -1,   368,    30,   355,   354,    -1,   368,   101,   355,
     354,    -1,   368,    30,   132,    -1,   368,   101,   132,    -1,
     368,    30,   371,    -1,   368,   101,   371,    -1,   368,    98,
      -1,   368,    99,    -1,    31,    14,   230,    15,    16,   400,
      17,    -1,    32,    14,   230,    15,    16,   400,    17,    -1,
      33,    14,   230,    15,    16,   400,    17,    -1,    34,    14,
     230,    15,    16,   400,    17,    -1,    31,    94,   230,    15,
      16,   400,    17,    -1,    32,    94,   230,    15,    16,   400,
      17,    -1,    33,    94,   230,    15,    16,   400,    17,    -1,
      34,    94,   230,    15,    16,   400,    17,    -1,    35,    16,
     400,    17,    -1,    35,    16,   230,    17,    -1,   397,    -1,
     369,    19,   397,    -1,    -1,   369,    -1,    78,   252,    -1,
     358,    78,   252,    -1,   368,    -1,    98,   384,    -1,    99,
     384,    -1,   373,   384,    -1,    67,   372,    -1,    67,    16,
     230,    17,    -1,   374,    -1,   383,    -1,    72,    -1,    76,
      -1,    70,    -1,    71,    -1,    79,    -1,    78,    -1,    68,
     376,   377,   382,    -1,    68,   376,    16,   230,    17,   382,
      -1,    16,   369,    17,    -1,    -1,   375,    -1,   281,   379,
      -1,   225,   379,    -1,   380,    -1,    -1,   378,    -1,    20,
     400,    21,    -1,   380,    20,   402,    21,    -1,    16,   370,
      17,    -1,   102,    -1,    -1,   381,    -1,    69,   384,    -1,
     406,   384,    -1,   372,    -1,    16,   230,    17,   384,    -1,
     384,    -1,   385,    28,   384,    -1,   385,   100,   384,    -1,
     385,    -1,   386,    72,   385,    -1,   386,    73,   385,    -1,
     386,    74,   385,    -1,   386,    -1,   387,    70,   386,    -1,
     387,    71,   386,    -1,   387,    -1,   388,    88,   387,    -1,
     388,    89,   387,    -1,   388,    -1,   389,    15,   388,    -1,
     389,    94,   388,    -1,   389,    95,   388,    -1,   389,   129,
     388,    -1,   389,   130,   388,    -1,   389,    -1,   390,    92,
     389,    -1,   390,    93,   389,    -1,   390,    92,   132,    -1,
     390,    93,   132,    -1,   390,    -1,   391,    76,   390,    -1,
     391,    -1,   392,    75,   391,    -1,   392,    -1,   393,    77,
     392,    -1,   393,    -1,   394,    96,   393,    -1,   394,    -1,
     395,    97,   394,    -1,   395,    -1,   395,    29,   400,    27,
     397,    -1,   396,    -1,   395,   399,   397,    -1,   320,    -1,
      -1,   397,    -1,    24,    -1,    82,    -1,    83,    -1,    84,
      -1,    80,    -1,    81,    -1,    90,    -1,    91,    -1,    86,
      -1,    85,    -1,    87,    -1,   397,    -1,   400,    19,   397,
      -1,    -1,   400,    -1,   396,    -1,    -1,   402,    -1,    16,
     328,    17,    -1,    68,   103,    -1,    69,   103,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
{
       0,   470,   470,   470,   477,   478,   479,   480,   484,   486,
     490,   491,   495,   498,   500,   503,   505,   514,   515,   518,
     520,   524,   525,   526,   527,   528,   529,   530,   534,   535,
     536,   537,   538,   558,   562,   565,   568,   571,   573,   609,
     613,   615,   618,   620,   622,   624,   628,   635,   638,   643,
     653,   655,   656,   658,   660,   662,   672,   673,   676,   679,
     682,   685,   688,   700,   702,   707,   708,   709,   710,   711,
     712,   716,   717,   718,   722,   742,   745,   746,   755,   757,
     758,   770,   771,   772,   773,   792,   793,   794,   795,   796,
     797,   798,   800,   802,   803,   804,   808,   809,   810,   811,
     812,   827,   828,   835,   851,   852,   853,   866,   867,   884,
     885,   897,   904,   931,   933,   934,   942,   956,   961,   981,
     987,   993,  1000,  1011,  1020,  1021,  1023,  1030,  1031,  1043,
    1044,  1051,  1057,  1058,  1062,  1066,  1067,  1071,  1072,  1080,
    1079,  1092,  1090,  1114,  1114,  1122,  1126,  1130,  1137,  1138,
    1147,  1152,  1163,  1165,  1175,  1177,  1178,  1181,  1183,  1184,
    1185,  1190,  1197,  1201,  1225,  1227,  1237,  1244,  1246,  1249,
    1251,  1255,  1256,  1264,  1268,  1273,  1299,  1300,  1301,  1303,
    1312,  1313,  1315,  1317,  1325,  1326,  1327,  1329,  1337,  1339,
    1341,  1350,  1357,  1376,  1377,  1383,  1386,  1389,  1390,  1399,
    1400,  1404,  1407,  1410,  1412,  1416,  1417,  1423,  1426,  1429,
    1434,  1440,  1443,  1446,  1448,  1455,  1460,  1466,  1472,  1479,
    1480,  1481,  1486,  1487,  1488,  1496,  1498,  1505,  1512,  1525,
    1536,  1541,  1542,  1546,  1548,  1552,  1553,  1560,  1564,  1570,
    1569,  1573,  1575,  1580,  1586,  1587,  1594,  1595,  1600,  1601,
    1604,  1606,  1618,  1621,  1626,  1630,  1644,  1645,  1670,  1672,
    1674,  1676,  1687,  1691,  1696,  1705,  1707,  1708,  1717,  1718,
    1727,  1729,  1730,  1734,  1735,  1742,  1743,  1753,  1755,  1767,
    1775,  1782,  1783,  1784,  1790,  1792,  1793,  1852,  1856,  1859,
    1861,  1864,  1866,  1869,  1871,  1873,  1874,  1875,  1876,  1879,
    1881,  1904,  1908,  1912,  1920,  1925,  1932,  1938,  1949,  1961,
    1966,  1971,  1976,  1981,  1983,  1988,  1993,  1995,  2000,  2005,
    2010,  2034,  2036,  2050,  2054,  2061,  2062,  2075,  2076,  2077,
    2081,  2082,  2083,  2089,  2129,  2138,  2142,  2143,  2145,  2146,
    2154,  2156,  2164,  2165,  2170,  2174,  2177,  2179,  2186,  2187,
    2191,  2192,  2197,  2206,  2214,  2215,  2216,  2217,  2219,  2220,
    2221,  2222,  2223,  2224,  2225,  2226,  2227,  2228,  2229,  2230,
    2231,  2232,  2233,  2234,  2235,  2236,  2237,  2238,  2239,  2240,
    2241,  2242,  2243,  2244,  2245,  2246,  2247,  2248,  2249,  2250,
    2251,  2252,  2253,  2254,  2255,  2256,  2257,  2258,  2274,  2277,
    2280,  2283,  2290,  2293,  2299,  2303,  2307,  2308,  2312,  2313,
    2317,  2319,  2323,  2326,  2330,  2332,  2340,  2345,  2349,  2350,
    2353,  2355,  2373,  2374,  2378,  2382,  2390,  2393,  2398,  2402,
    2416,  2418,  2420,  2422,  2424,  2426,  2430,  2446,  2447,  2446,
    2453,  2455,  2453,  2460,  2463,  2465,  2474,  2473,  2479,  2480,
    2481,  2485,  2490,  2491,  2494,  2496,  2500,  2501,  2504,  2506,
    2512,  2513,  2514,  2515,  2516,  2517,  2518,  2519,  2533,  2534,
    2536,  2540,  2544,  2548,  2549,  2552,  2554,  2558,  2559,  2560,
    2558,  2562,  2562,  2568,  2568,  2570,  2574,  2575,  2583,  2588,
    2591,  2593,  2597,  2597,  2600,  2601,  2600,  2604,  2604,  2615,
    2616,  2621,  2622,  2623,  2624,  2628,  2636,  2637,  2638,  2639,
    2640,  2648,  2661,  2662,  2663,  2664,  2665,  2669,  2677,  2678,
    2680,  2683,  2685,  2689,  2691,  2694,  2697,  2715,  2716,  2717,
    2727,  2728,  2729,  2730,  2734,  2735,  2738,  2740,  2742,  2744,
    2747,  2772,  2773,  2774,  2775,  2777,  2778,  2780,  2781,  2783,
    2784,  2786,  2788,  2790,  2791,  2793,  2795,  2800,  2801,  2802,
    2803,  2805,  2817,  2819,  2822,  2832,  2833,  2836,  2848,  2850,
    2862,  2863,  2869,  2886,  2888,  2891,  2893,  2896,  2899,  2912,
    2913,  2916,  2919,  2921,  2922,  2924,  2926,  2930,  2934,  2936,
    2939,  2941,  2943,  2946,  2950,  2951,  2953,  2955,  2957,  2959,
    2961,  2963,  2965,  2967,  2969,  2971,  2979,  2980,  2985,  2986,
    2990,  2991,  2996,  2997,  2998,  2999,  3000,  3002,  3005,  3006,
    3011,  3013,  3015,  3016,  3017,  3018,  3025,  3027,  3032,  3036,
    3038,  3056,  3061,  3063,  3067,  3068,  3072,  3075,  3081,  3083,
    3086,  3088,  3095,  3096,  3100,  3101,  3107,  3108,  3111,  3128,
    3129,  3131,  3133,  3138,  3139,  3141,  3146,  3147,  3150,  3163,
    3164,  3167,  3170,  3173,  3176,  3182,  3183,  3186,  3189,  3191,
    3196,  3197,  3202,  3203,  3208,  3209,  3214,  3215,  3221,  3222,
    3228,  3229,  3235,  3236,  3239,  3243,  3244,  3248,  3249,  3250,
    3251,  3252,  3253,  3254,  3255,  3256,  3257,  3258,  3262,  3263,
    3268,  3269,  3273,  3277,  3278,  3290,  3297,  3305
};
#endif

#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "T_IDENTIFIER", "T_TYPEDEF_ID", 
  "T_ENUM_ID", "T_NAMESPACE_ID", "T_ALIAS_ID", "T_CLASS_ID", 
  "T_TEMPLATE_ID", "T_NUM_LITERAL", "T_CHAR_LITERAL", "T_STRING_LITERAL", 
  "T_BOOLEAN_LITERAL", "T_LANGLE", "T_RANGLE", "T_LPAREN", "T_RPAREN", 
  "T_ELIPSIS", "T_COMMA", "T_LBRACK", "T_RBRACK", "T_LBRACE", "T_RBRACE", 
  "T_EQ", "T_SCOPE", "T_SEMIC", "T_COLON", "T_DOTSTAR", "T_QUESTION", 
  "T_DOT", "T_DYNAMIC_CAST", "T_STATIC_CAST", "T_REINTERPRET_CAST", 
  "T_CONST_CAST", "T_TYPEID", "T_THIS", "T_TEMPLATE", "T_TYPENAME", 
  "T_THROW", "T_TRY", "T_CATCH", "T_TYPEDEF", "T_FRIEND", "T_CLASS", 
  "T_NAMESPACE", "T_ENUM", "T_STRUCT", "T_UNION", "T_VIRTUAL", 
  "T_PRIVATE", "T_PROTECTED", "T_PUBLIC", "T_EXPORT", "T_AUTO", 
  "T_REGISTER", "T_EXTERN", "T_MUTABLE", "T_ASM", "T_USING", "T_INLINE", 
  "T_EXPLICIT", "T_STATIC", "T_CONST", "T_VOLATILE", "T_OVERLOAD", 
  "T_OPERATOR", "T_SIZEOF", "T_NEW", "T_DELETE", "T_PLUS", "T_MINUS", 
  "T_STAR", "T_SLASH", "T_PERCENT", "T_HAT", "T_AND", "T_OR", "T_TILDE", 
  "T_NOT", "T_PLUS_EQ", "T_MINUS_EQ", "T_STAR_EQ", "T_SLASH_EQ", 
  "T_PERCENT_EQ", "T_HAT_EQ", "T_AND_EQ", "T_OR_EQ", "T_LTLT", "T_GTGT", 
  "T_GTGT_EQ", "T_LTLT_EQ", "T_EQEQ", "T_NE", "T_LE", "T_GE", "T_ANDAND", 
  "T_OROR", "T_INCR", "T_DECR", "T_ARROW_STAR", "T_ARROW", "T_FUNCTION", 
  "T_SUBSCRIPT", "T_CHAR", "T_WCHAR", "T_BOOL", "T_SHORT", "T_INT", 
  "T_LONG", "T_SIGNED", "T_UNSIGNED", "T_FLOAT", "T_DOUBLE", "T_VOID", 
  "T_CASE", "T_DEFAULT", "T_IF", "T_ELSE", "T_SWITCH", "T_WHILE", "T_DO", 
  "T_FOR", "T_BREAK", "T_CONTINUE", "T_GOTO", "T_RETURN", "T_TYPEOF", 
  "T_THREAD", "T_MINIMUM", "T_MAXIMUM", "T_RESTRICT", "T_SPECIAL", 
  "T_LAST_TOKEN", "PREC", "$accept", "TRANSLATION_UNIT", "@1", "LITERAL", 
  "STRING_LIST", "IDENTIFIER_OPT", "IDENTIFIER_C", "ELIPSIS_OPT", 
  "TYPENAME_OPT", "DECLARATION_SEQ", "DECLARATION_SEQ_OPT", "DECLARATION", 
  "BLOCK_DECLARATION", "SIMPLE_DECLARATION", "DECL_SPECIFIER_SEQ_START", 
  "DECL_SPECIFIER_SEQ", "DECL_SPECIFIER_SEQ_RIGHT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_OR_TYPEDEF_SPEC_LIST_OPT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_TYPEDEF_OR_SIMPLE_SPEC_LIST_OPT", 
  "STORAGE_CLASS_FUNCTION_FRIEND_TYPEDEF_BIT_FLD_OR_SIMPLE_SPEC_LIST_OPT", 
  "STORAGE_CLASS_SPECIFIER", "FUNCTION_SPECIFIER", "TYPEDEF_NAME", 
  "NAMED_TYPE_SPECIFIER", "STRICT_NAMED_TYPE_SPECIFIER", "TYPE_SPECIFIER", 
  "SIMPLE_TYPE_SPECIFIER", "TYPE_NAME", "CLASS_ENUM_OR_ET_SPECIFIER", 
  "ENUM_PUSH", "CLASS_ET_SHORT", "CLASS_OR_ET_SHORT", "CLASS_REDEF_OR_ET", 
  "TYPE_POP", "ENUM_NAME", "ENUM_ET_SHORT", "TEMP_ID", "ENUM_OR_ET_SHORT", 
  "ENUM_REDEF_OR_ET", "TYPE_TO_ENUM", "ENUM_SPECIFIER_SHORT", 
  "ENUMERATOR_CLAUSE_LEFT", "ENUMERATOR_CLAUSE_RIGHT", "ENUMERATOR_LIST", 
  "ENUMERATOR_DEFINITION", "ENUMERATOR", "NAMESPACE_NAME", 
  "ORIGINAL_NAMESPACE_NAME", "NAMESPACE_DEFINITION", 
  "NAMED_NAMESPACE_DEFINITION", "ORIGINAL_NAMESPACE_DEFINITION", "@2", 
  "EXTENSION_NAMESPACE_DEFINITION", "@3", "UNNAMED_NAMESPACE_DEFINITION", 
  "@4", "NAMESPACE_BODY", "NAMESPACE_ALIAS", "NAMESPACE_ALIAS_DEFINITION", 
  "QUALIFIED_NAMESPACE_SPECIFIER", "USING_DECLARATION", "USING_DIRECTIVE", 
  "ASM_DEFINITION", "ASM_EXTENSION_LIST_OPT", "ASM_EXTENSION", 
  "ASM_OPERAND_CONSTRAINT_STRING", "ASM_OPERAND_EXPRESSION", 
  "ASM_OPERAND_SYMBOLIC", "LINKAGE_SPECIFICATION", "LANGUAGE_STRING", 
  "COMMA_INIT_DECLARATOR_LIST_OPT", "INIT_DECLARATOR_LIST_OPT", 
  "INIT_DECLARATOR_LIST", "INIT_DECLARATOR", "NON_PAREN_INIT_DECLARATOR", 
  "PAREN_NON_REDEF_INIT_DECLARATOR", "DECLARATOR", "NON_REDEF_DECLARATOR", 
  "NON_PAREN_DECLARATOR", "PAREN_NON_REDEF_DECLARATOR", 
  "OBVIOUSLY_A_DECLARATOR", "BIT_FIELD_DECLARATOR", "DIRECT_DECLARATOR", 
  "DIRECT_NON_REDEF_DECLARATOR", "DIRECT_NON_PAREN_DECLARATOR", 
  "DIRECT_PAREN_NON_REDEF_DECLARATOR", 
  "DIRECT_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_NON_REDEF_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_NON_PAREN_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_PAREN_NON_REDEF_DECLARATOR_PARAMETRIZED_LEFT", "PTR_OPERATOR", 
  "CV_QUALIFIER", "CV_QUALIFIER_SEQ_OPT", "DECLARATOR_ID", 
  "NON_REDEF_DECLARATOR_ID", "TYPE_ID", "TYPE_SPECIFIER_SEQ", 
  "TYPE_SPECIFIER_SEQ_OPT", "ABSTRACT_DECLARATOR", 
  "ABSTRACT_DECLARATOR_OPT", "DIRECT_ABSTRACT_DECLARATOR", "@5", 
  "DIRECT_ABSTRACT_DECLARATOR_PARAMETRIZED_LEFT", 
  "DIRECT_ABSTRACT_DECLARATOR_OPT", "PARAMETER_DECLARATION_CLAUSE", 
  "PARAMETER_DECLARATION_LIST", "PARAMETER_DECLARATION_LIST_OPT", 
  "PARAMETER_DECLARATION", 
  "PARAMETER_DECLARATION_CLAUSE_OR_CONTRUCTOR_CALL", 
  "FUNCTION_DEFINITION", "FUNCTION_BODY_LEFT", "FUNCTION_BODY_RIGHT", 
  "FUNCTION_BODY", "INITIALIZER_OPT", "INITIALIZER_CLAUSE", 
  "INITIALIZER_LIST", "INITIALIZER_LIST_LEFT", "CLASS_NAME", 
  "CLASS_SPECIFIER_SHORT", "CLASS_SPECIFIER_LEFT", 
  "CLASS_SPECIFIER_RIGHT", "CLASS_KEY", "MEMBER_SPECIFICATION", 
  "MEMBER_DECLARATION", "MEMBER_DECLARATOR_LIST_OPT", 
  "MEMBER_PARAMETER_LIST", "PARAMETERS_LEFT", "PARAM_PAREN", 
  "MEMBER_DECLARATOR", "NON_PAREN_MEMBER_DECLARATOR", 
  "PAREN_NON_REDEF_MEMBER_DECLARATOR", "PARAMETER_LIST_MEMBER_DECLARATOR", 
  "NON_PAREN_MEMBER_FUNCTION_DEFINITION", 
  "NON_PAREN_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "PAREN_NON_REDEF_MEMBER_FUNCTION_DEFINITION", 
  "PAREN_NON_REDEF_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "PARAMETER_LIST_MEMBER_FUNCTION_DEFINITION", 
  "PARAMETER_LIST_MEMBER_FUNCTION_DEFINITION_LEFT", 
  "CONSTANT_INITIALIZER_OPT", "BASE_CLAUSE_LEFT", "BASE_CLAUSE_RIGHT", 
  "BASE_SPECIFIER_LIST", "BASE_SPECIFIER", "ACCESS_SPECIFIER", 
  "CONVERSION_FUNCTION_ID", "CONVERSION_TYPE_ID", 
  "NON_ELABORATING_TYPE_SPECIFIER_SEQ", "NON_ELABORATING_TYPE_SPECIFIER", 
  "NE_CLASS_OR_ENUM_SPECIFIER", "CONVERSION_DECLARATOR_OPT", 
  "OPERATOR_SCOPE", "CTOR_INITIALIZER", "CTOR_INITIALIZER_OPT", 
  "MEM_INITIALIZER_LIST", "MEM_INITIALIZER", "MEM_INITIALIZER_ID", 
  "OPERATOR_FUNCTION_ID", "OPERATOR_NAME", "TEMPLATE_DECLARATION", 
  "MEMBER_TEMPLATE_DECLARATION", "TEMPLATE_PARAM_LEFT", 
  "TEMPLATE_PARAM_RIGHT", "TEMPLATE_PARAMETER_LIST", "TEMPLATE_PARAMETER", 
  "TYPE_PARAMETER", "TEMPLATE_ID", "TEMPLATE_NAME", 
  "TEMPLATE_ARGUMENT_LIST", "TEMPLATE_ARGUMENT_LIST_OPT", 
  "TEMPLATE_ARGUMENT", "EXPLICIT_INSTANTIATION", 
  "EXPLICIT_SPECIALIZATION", "TEMPLATE_PARAMETER_DECLARATION", 
  "TEMPLATE_DECL_SPECIFIER_SEQ", "TRY_BLOCK", "@6", "@7", 
  "FUNCTION_TRY_BLOCK", "@8", "@9", "HANDLER_SEQ", "HANDLER_SEQ_OPT", 
  "HANDLER", "@10", "EXCEPTION_DECLARATION", "THROW_EXPRESSION", 
  "EXCEPTION_SPECIFICATION", "EXCEPTION_SPECIFICATION_OPT", 
  "TYPE_ID_LIST", "TYPE_ID_LIST_OPT", "STATEMENT", "LABELED_STATEMENT", 
  "EXPRESSION_STATEMENT", "COMPOUND_STATEMENT", "STATEMENT_SEQ", 
  "STATEMENT_SEQ_OPT", "SELECTION_STATEMENT", "@11", "@12", "@13", "@14", 
  "SELECTION_STATEMENT_RIGHT", "@15", "CONDITION", "CONDITION_DECLARATOR", 
  "CONDITION_TYPE_SPECIFIER_SEQ", "CONDITION_OPT", "ITERATION_STATEMENT", 
  "@16", "@17", "@18", "@19", "FOR_INIT_STATEMENT", "JUMP_STATEMENT", 
  "DECLARATION_STATEMENT", "BLOCK_DECLARATION_STATEMENT", 
  "SIMPLE_DECLARATION_STATEMENT", "PRIMARY_EXPRESSION", "ID_EXPRESSION", 
  "UNQUALIFIED_ID", "TEMPLATE_OPT", "NESTED_NAME_SPECIFIER", 
  "NESTED_SCOPE_SPECIFIER", "LOCAL_SCOPE_SEQ", 
  "NESTED_TYPE_OR_NAME_SPECIFIER", "NESTED_TYPE_NAME_SPECIFIER", 
  "STRICT_NESTED_TYPE_NAME_SPECIFIER", 
  "NESTED_ORIGINAL_NAMESPACE_NAME_SPECIFIER", 
  "NESTED_ORIGINAL_NAMESPACE_NAME_SPECIFIER_LOCAL", 
  "NESTED_NAMESPACE_ALIAS_SPECIFIER", 
  "NESTED_NAMESPACE_ALIAS_SPECIFIER_LOCAL", "GLOBAL_SCOPE", "LOCAL_SCOPE", 
  "POSTFIX_EXPRESSION", "EXPRESSION_LIST", "EXPRESSION_LIST_OPT", 
  "PSEUDO_DESTRUCTOR_NAME", "UNARY_EXPRESSION", "UNARY_OPERATOR", 
  "NEW_EXPRESSION", "NEW_PLACEMENT", "NEW_PLACEMENT_OPT", "NEW_TYPE_ID", 
  "NEW_DECLARATOR", "NEW_DECLARATOR_OPT", "DIRECT_NEW_DECLARATOR", 
  "NEW_INITIALIZER", "NEW_INITIALIZER_OPT", "DELETE_EXPRESSION", 
  "CAST_EXPRESSION", "PM_EXPRESSION", "MULTIPLICATIVE_EXPRESSION", 
  "ADDITIVE_EXPRESSION", "SHIFT_EXPRESSION", "RELATIONAL_EXPRESSION", 
  "EQUALITY_EXPRESSION", "AND_EXPRESSION", "EXCLUSIVE_OR_EXPRESSION", 
  "INCLUSIVE_OR_EXPRESSION", "LOGICAL_AND_EXPRESSION", 
  "LOGICAL_OR_EXPRESSION", "CONDITIONAL_EXPRESSION", 
  "ASSIGNMENT_EXPRESSION", "ASSIGNMENT_EXPRESSION_OPT", 
  "ASSIGNMENT_OPERATOR", "EXPRESSION", "EXPRESSION_OPT", 
  "CONSTANT_EXPRESSION", "CONSTANT_EXPRESSION_OPT", 
  "STATEMENT_EXPRESSION", "NEW_ARRAY", "DELETE_ARRAY", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned short yyr1[] =
{
       0,   135,   137,   136,   138,   138,   138,   138,   139,   139,
     140,   140,   141,   142,   142,   143,   143,   144,   144,   145,
     145,   146,   146,   146,   146,   146,   146,   146,   147,   147,
     147,   147,   147,   148,   148,   148,   148,   148,   148,   149,
     150,   150,   150,   150,   150,   150,   150,   151,   151,   151,
     152,   152,   152,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   153,   154,   154,   155,   155,   155,   155,   155,
     155,   156,   156,   156,   157,   158,   158,   158,   159,   159,
     159,   160,   160,   160,   160,   161,   161,   161,   161,   161,
     161,   161,   161,   161,   161,   161,   162,   162,   162,   162,
     162,   163,   163,   164,   165,   165,   165,   166,   166,   167,
     167,   168,   169,   170,   170,   170,   171,   172,   172,   173,
     173,   174,   175,   176,   177,   177,   177,   178,   178,   179,
     179,   180,   181,   181,   182,   183,   183,   184,   184,   186,
     185,   188,   187,   190,   189,   191,   192,   193,   194,   194,
     195,   196,   197,   197,   198,   198,   198,   199,   199,   199,
     199,   200,   201,   202,   203,   203,   204,   205,   205,   206,
     206,   207,   207,   208,   209,   210,   211,   211,   211,   211,
     212,   212,   212,   212,   213,   213,   213,   213,   214,   214,
     214,   215,   216,   217,   217,   217,   217,   217,   217,   218,
     218,   218,   218,   218,   218,   219,   219,   219,   219,   219,
     220,   220,   220,   220,   220,   221,   222,   223,   224,   225,
     225,   225,   226,   226,   226,   227,   227,   228,   229,   230,
     231,   232,   232,   233,   233,   234,   234,   235,   235,   236,
     235,   235,   235,   237,   238,   238,   239,   239,   240,   240,
     241,   241,   242,   242,   242,   242,   243,   243,   244,   244,
     244,   244,   245,   246,   247,   248,   248,   248,   249,   249,
     250,   250,   250,   251,   251,   252,   252,   253,   253,   254,
     255,   256,   256,   256,   257,   257,   257,   258,   258,   258,
     258,   258,   258,   258,   258,   258,   258,   258,   258,   259,
     259,   260,   260,   260,   261,   261,   261,   261,   262,   263,
     264,   265,   266,   267,   267,   268,   269,   269,   270,   271,
     272,   273,   273,   274,   275,   276,   276,   277,   277,   277,
     278,   278,   278,   279,   280,   281,   282,   282,   282,   282,
     283,   283,   284,   284,   285,   286,   287,   287,   288,   288,
     289,   289,   290,   291,   292,   292,   292,   292,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   292,   292,   292,
     292,   292,   292,   292,   292,   292,   292,   292,   293,   293,
     293,   293,   294,   294,   295,   296,   297,   297,   298,   298,
     299,   299,   299,   299,   299,   299,   300,   301,   302,   302,
     303,   303,   304,   304,   305,   306,   307,   307,   307,   307,
     308,   308,   308,   308,   308,   308,   308,   310,   311,   309,
     313,   314,   312,   315,   316,   316,   318,   317,   319,   319,
     319,   320,   321,   321,   322,   322,   323,   323,   324,   324,
     325,   325,   325,   325,   325,   325,   325,   325,   326,   326,
     326,   327,   328,   329,   329,   330,   330,   332,   333,   334,
     331,   335,   331,   337,   336,   336,   338,   338,   339,   340,
     341,   341,   343,   342,   344,   345,   342,   346,   342,   347,
     347,   348,   348,   348,   348,   349,   350,   350,   350,   350,
     350,   351,   352,   352,   352,   352,   352,   353,   354,   354,
     354,   355,   355,   356,   356,   356,   356,   357,   357,   357,
     358,   358,   358,   358,   359,   359,   359,   359,   359,   359,
     359,   360,   360,   360,   360,   360,   360,   360,   360,   360,
     360,   360,   360,   360,   360,   360,   360,   361,   361,   361,
     361,   361,   362,   362,   362,   363,   363,   363,   364,   364,
     365,   365,   366,   367,   367,   367,   367,   367,   367,   368,
     368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
     368,   368,   368,   368,   368,   368,   368,   368,   368,   368,
     368,   368,   368,   368,   368,   368,   369,   369,   370,   370,
     371,   371,   372,   372,   372,   372,   372,   372,   372,   372,
     373,   373,   373,   373,   373,   373,   374,   374,   375,   376,
     376,   377,   378,   378,   379,   379,   380,   380,   381,   381,
     382,   382,   383,   383,   384,   384,   385,   385,   385,   386,
     386,   386,   386,   387,   387,   387,   388,   388,   388,   389,
     389,   389,   389,   389,   389,   390,   390,   390,   390,   390,
     391,   391,   392,   392,   393,   393,   394,   394,   395,   395,
     396,   396,   397,   397,   397,   398,   398,   399,   399,   399,
     399,   399,   399,   399,   399,   399,   399,   399,   400,   400,
     401,   401,   402,   403,   403,   404,   405,   406
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
{
       0,     2,     0,     3,     1,     1,     2,     1,     0,     2,
       0,     1,     1,     0,     1,     0,     1,     1,     2,     0,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     4,     4,     4,     3,     1,     1,
       2,     2,     2,     2,     2,     2,     2,     1,     3,     3,
       0,     2,     2,     2,     2,     2,     0,     2,     2,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     1,     1,
       4,     2,     2,     1,     1,     2,     2,     1,     0,     2,
       1,     1,     1,     2,     2,     2,     0,     1,     0,     2,
       0,     0,     2,     1,     2,     3,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       6,     0,     6,     0,     5,     1,     1,     5,     1,     1,
       4,     4,     6,     7,     0,     3,     3,     0,     1,     2,
       3,     2,     3,     3,     5,     3,     1,     0,     3,     0,
       1,     1,     3,     2,     2,     2,     1,     2,     2,     2,
       1,     2,     2,     2,     1,     2,     2,     2,     1,     2,
       2,     1,     2,     1,     5,     4,     4,     2,     3,     1,
       5,     4,     4,     2,     3,     1,     5,     4,     4,     2,
       5,     4,     4,     2,     4,     2,     2,     2,     2,     2,
       1,     3,     1,     1,     1,     0,     2,     1,     1,     2,
       2,     0,     1,     2,     1,     0,     1,     5,     4,     0,
       5,     2,     3,     2,     0,     1,     2,     3,     1,     3,
       0,     1,     2,     4,     2,     4,     1,     1,     2,     2,
       2,     3,     1,     2,     1,     0,     2,     3,     1,     3,
       0,     1,     2,     1,     3,     1,     1,     4,     2,     1,
       2,     1,     1,     1,     0,     2,     3,     2,     4,     2,
       4,     2,     4,     2,     3,     3,     1,     1,     1,     0,
       3,     5,     7,     4,     4,     6,     4,     6,     0,     2,
       2,     2,     1,     3,     2,     1,     3,     2,     1,     3,
       1,     0,     2,     1,     1,     1,     3,     1,     2,     2,
       1,     1,     1,     2,     2,     1,     1,     4,     1,     1,
       2,     2,     0,     2,     1,     2,     0,     2,     1,     3,
       4,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     5,     6,
       4,     5,     5,     6,     1,     1,     1,     3,     1,     1,
       2,     4,     2,     4,     6,     8,     4,     1,     1,     3,
       0,     1,     1,     1,     2,     4,     2,     4,     2,     4,
       2,     2,     2,     2,     2,     2,     2,     0,     0,     5,
       0,     0,     6,     2,     0,     1,     0,     6,     2,     2,
       2,     2,     4,     2,     0,     1,     1,     3,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     4,
       3,     2,     3,     1,     2,     0,     1,     0,     0,     0,
       9,     0,     6,     0,     3,     0,     1,     3,     2,     1,
       0,     1,     0,     6,     0,     0,     9,     0,     9,     1,
       1,     2,     2,     3,     3,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     3,     1,     1,     1,     1,     4,
       1,     0,     1,     1,     2,     2,     3,     1,     1,     2,
       1,     2,     3,     2,     1,     2,     1,     2,     2,     3,
       2,     1,     2,     2,     3,     2,     2,     2,     3,     1,
       2,     2,     3,     2,     3,     3,     4,     1,     2,     2,
       3,     2,     1,     2,     2,     1,     2,     2,     1,     2,
       1,     2,     1,     2,     5,     2,     5,     6,     2,     1,
       4,     4,     3,     2,     4,     2,     4,     2,     4,     4,
       3,     3,     3,     3,     2,     2,     7,     7,     7,     7,
       7,     7,     7,     7,     4,     4,     1,     3,     0,     1,
       2,     3,     1,     2,     2,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     6,     3,     0,
       1,     2,     2,     1,     0,     1,     3,     4,     3,     1,
       0,     1,     2,     2,     1,     4,     1,     3,     3,     1,
       3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
       3,     3,     3,     3,     3,     1,     3,     3,     3,     3,
       1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
       1,     5,     1,     3,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     1,     0,     1,     3,     2,     2
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned short yydefact[] =
{
       2,     0,     0,     1,    12,    74,   112,   134,   146,   275,
     417,     0,   572,    38,     0,     0,    50,    50,   281,     0,
     103,   282,   283,    72,     0,    65,    66,    68,    69,     0,
      15,    71,    73,    67,   222,   223,   224,   344,   225,   220,
       0,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,     0,    70,   518,     0,    17,    21,    28,   308,
      39,    50,    50,    99,    56,    56,   541,    76,   116,    98,
       0,   132,    27,   135,   137,   138,   136,   133,    30,    31,
      32,    29,    26,   191,   167,   180,   250,     0,    50,   199,
      22,    96,   116,   549,     0,   520,    23,   276,     0,    24,
      25,   523,   228,     0,   527,    75,   528,   530,     0,     0,
     536,     0,   176,   250,     0,   193,     0,   534,     0,   527,
     227,   528,   404,   518,   424,     0,   547,   546,     0,     0,
      50,    50,    68,    41,    47,    50,    50,    50,    40,   143,
       0,     0,   565,     0,     0,   562,     0,     0,     0,   166,
       0,     0,     0,     0,    16,     0,     0,   219,   553,     0,
     420,     3,    18,    33,   225,   167,   167,   265,   265,   184,
     188,   250,   250,     0,   205,   312,     0,     0,   167,   258,
       0,   259,     0,   260,     0,    42,    43,   420,   573,    56,
      56,    46,    56,    56,    56,    56,    63,    45,   118,   102,
       0,     0,     0,   120,     0,   578,   262,     0,   475,   216,
     703,     0,   225,   203,   182,   183,   235,     0,   251,    13,
     248,   181,    44,   420,   575,   108,   101,   104,     0,     0,
     110,   369,   370,   391,   368,     0,   354,   355,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   392,   393,
     394,   395,   396,   397,   338,     0,   333,   342,   335,   339,
     353,   336,   356,   357,   420,   225,     0,     0,   533,   542,
     550,   524,   531,     0,   545,   543,   551,   525,   529,     0,
       0,   204,   215,   703,   225,   197,   178,   179,     4,     5,
       8,     7,     0,     0,     0,     0,     0,     0,   513,   685,
       0,   629,     0,   622,   623,   620,   621,   625,   624,     0,
       0,   512,    56,   256,     0,   684,   579,   515,   517,     0,
      75,     0,   612,   257,   644,     0,   618,   619,   646,   649,
     653,   656,   659,   665,   670,   672,   674,   676,   678,   680,
     682,   606,   516,     0,   177,   366,   535,   537,   540,   538,
     529,   420,   405,     0,    10,    50,    50,   281,     0,    50,
      50,    56,    56,   557,    79,    50,     0,     0,   406,   408,
     409,   235,     0,    78,     0,   548,     0,    52,    51,    56,
      56,    53,    54,    55,    19,   139,     0,   420,   420,   141,
     564,   563,   567,   566,     0,     0,    19,   165,   154,     0,
     133,     0,   148,   149,   568,     0,     0,     0,     0,   226,
       0,   231,    82,    83,    84,   423,   235,   421,     0,   418,
      81,   422,   454,     0,     0,     0,     0,   174,   175,   217,
     703,   225,   209,   186,   187,   218,   703,   225,   213,   189,
     190,     0,     0,   185,   225,   250,     0,     0,   440,   475,
     314,   475,   317,   475,     0,    58,    57,    59,    60,    62,
      61,     0,    64,   123,   114,   117,     0,   115,   113,     0,
       0,     0,    37,   475,   437,     0,     0,     0,     0,     0,
       0,   494,     0,     0,     0,     0,   700,   518,   169,   508,
     509,   510,   507,   261,   467,   473,   460,   461,   462,   476,
       0,   463,   464,   465,   466,   505,   506,   698,   701,     0,
       0,     0,   680,   702,   704,     0,   192,   345,   348,     0,
     352,   454,   244,   252,   235,   236,   254,   234,   250,     0,
     225,     0,    14,   246,     0,   279,   323,   105,   107,   284,
       0,   109,   106,   341,   706,   707,   340,   334,   420,     0,
     221,   532,   554,   555,     0,   544,   552,   526,   198,   420,
       0,   454,     8,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   686,   451,     0,   616,
       0,   630,     0,   642,   613,   614,   608,   585,   225,   608,
     587,     0,   608,     0,   521,   594,   595,   521,   583,     0,
     615,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   687,     0,   691,   692,   688,   689,   690,   696,   695,
     697,   693,   694,     0,     0,   643,   539,     0,     0,   412,
      11,   431,   430,   410,     0,   432,   433,   436,   435,   434,
     425,     0,     0,   426,   428,   558,   561,   559,     0,    49,
      48,    20,   145,     0,    19,     0,     0,     0,    19,     0,
     400,     0,     0,     0,   154,   151,   569,   571,   150,    77,
      82,   232,   230,    81,   244,   235,   229,   527,   528,     0,
     519,     0,   455,   346,    34,    35,     0,   270,   266,   268,
       0,   454,     0,   454,   225,   225,   454,     0,   235,     0,
      36,   346,   313,   316,   319,   100,   126,   131,   122,     0,
     127,   129,   119,   168,   265,     0,     0,     0,     0,   700,
     477,   481,   492,   700,   497,   501,   502,     0,     0,   700,
       0,   170,   171,   474,   263,     0,   471,   202,     0,   608,
     351,   201,     0,     0,   233,     0,     0,   243,   239,   225,
     241,   454,   247,   249,    97,   278,     0,     0,   330,   331,
     332,     0,   324,   325,     0,   327,   343,     0,   416,   556,
       0,   196,   195,     9,     0,   705,   514,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     634,   640,   609,     0,   454,     0,   582,     0,     0,   522,
       0,   590,     0,     0,   592,   591,     0,   593,   607,   647,
     648,   650,   651,   652,   654,   655,   657,   658,   660,   661,
     662,   663,   664,   668,   666,   669,   667,   671,   673,   675,
     677,     0,   679,   683,   519,     0,     0,     0,     0,   407,
     398,     0,     0,   560,   144,     0,   147,     0,     0,     0,
       0,   401,   164,     0,   157,   157,     0,   529,   419,   458,
     453,     0,   303,   267,   273,     0,   271,   208,   207,   212,
     211,   454,   454,   346,   225,   304,   306,   214,     0,   574,
       0,   124,     0,   173,   472,   438,   700,   470,     0,     0,
       0,   495,   700,   504,   503,   468,   511,     0,   699,   349,
       0,   242,   253,   255,   225,   703,   454,   200,   576,   280,
     298,     0,     0,    15,   308,   296,   299,   285,     0,   297,
     328,   284,     0,   329,   337,     0,   645,     0,     0,     0,
       0,     0,     0,     0,     0,   605,   604,   617,   628,     0,
       0,   634,   635,   631,   633,   608,   639,   641,   626,   584,
     194,   586,   581,   580,   610,   588,     0,   589,     0,   577,
       0,   413,   411,    80,   427,   429,   140,   142,   399,   152,
       8,     0,   156,   158,     0,   155,     0,   456,   459,     0,
     347,   269,   272,   206,   210,   301,   454,     0,     0,   441,
     264,   125,   128,   130,     0,   469,   489,     0,     0,     0,
     486,     0,     0,     0,   499,   490,   500,   172,   350,   454,
       0,   238,     0,     0,   287,   315,   318,   299,   299,   299,
     289,   291,   293,   475,     0,   286,   277,   326,     0,     0,
       0,     0,     0,     0,     0,     0,   640,     0,   632,     0,
       0,   611,   681,    10,   161,     0,     0,     0,   159,     0,
     153,     0,   452,   274,   346,   305,   307,     0,     0,   439,
     444,   478,     0,   488,   700,   700,     0,   491,     0,   237,
     240,     0,     0,     0,   310,   311,     0,     0,     0,   295,
       0,   294,     0,     0,     0,     0,     0,     0,     0,     0,
     627,   636,     0,   638,   414,   163,     0,   160,   457,   302,
     442,     0,   445,   443,   700,   487,   482,   493,     0,   700,
       0,     0,   322,   288,   290,   292,   321,   300,   596,   600,
     597,   601,   598,   602,   599,   603,   637,     0,   162,   244,
       0,   479,     0,     0,   402,     0,   309,   415,   450,   448,
     449,   446,   485,     0,   700,   403,     0,   483,   480,   496,
     498,   447,   700,   484
};

/* YYDEFGOTO[NTERM-NUM]. */
static const short yydefgoto[] =
{
      -1,     1,     2,   331,   583,   659,    54,   553,   156,   681,
     682,    56,    57,    58,   508,    60,   133,   134,   196,   197,
      61,    62,    63,    64,   381,   431,   530,    66,    67,    68,
     226,   557,   227,   228,    69,   199,   200,   484,   488,   489,
     485,   486,   738,   739,   740,   741,    70,    71,    72,    73,
      74,   684,    75,   688,    76,   404,   683,    77,   509,   421,
     510,   511,   512,   693,  1002,  1003,  1078,  1004,    82,   151,
     207,   760,   761,   743,   165,   166,   744,    83,   167,   168,
      84,   214,   112,    85,   169,   170,   113,    86,   171,   172,
      87,    88,   157,   115,    89,   435,   436,   702,   545,   774,
     547,   935,   548,   549,   333,   218,   219,   220,   334,    90,
     208,   513,  1019,   447,   718,   895,   896,    91,   558,   559,
     785,    92,   786,   947,  1054,   175,   176,   177,  1147,  1047,
    1048,   178,   179,   180,   181,   182,   183,   184,  1104,   560,
     791,   792,   793,   794,    93,   276,   277,   278,   279,   567,
      94,   215,   892,   537,   538,   539,    95,   280,    96,   949,
     125,   386,   387,   388,   389,    97,    98,   437,   438,   439,
      99,   100,   390,   391,   514,   746,  1024,   470,   731,  1087,
    1089,  1133,  1090,  1176,  1160,   335,   712,   713,  1008,  1009,
     515,   516,   517,   518,   519,   520,   521,   918,  1134,  1172,
     919,  1178,  1182,  1027,  1028,  1029,  1098,   522,   920,   753,
    1033,   922,  1035,   523,   524,   525,   526,   336,   337,   101,
     832,   338,   103,   339,   120,   531,   393,   422,   145,   423,
     424,   341,   107,   342,   822,   823,   834,   344,   345,   346,
     601,   602,   821,   972,   973,   974,   977,   978,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   527,   597,   654,   528,   529,   534,   535,   362,
     282,   363
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -987
static const short yypact[] =
{
    -987,    95,  4983,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  2339,  -987,  -987,  4757,  2641,  2124,  2124,  -987,  1956,
    -987,  -987,  -987,  -987,    67,  -987,  -987,   110,  -987,    32,
     246,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
     519,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,   178,  -987,   225,  3675,  -987,  -987,  -987,  1515,
    -987,  2124,  2124,   111,  2485,  2485,  -987,  -987,  1765,  -987,
     237,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,   266,    73,  5412,  2339,  2124,  -987,
    -987,   337,  1765,  -987,  4148,  -987,  -987,  -987,   310,  -987,
    -987,  -987,  -987,   260,   796,  -987,  1004,  -987,  2339,   339,
    -987,   328,   192,  4529,  2339,  -987,  5676,  -987,   221,  1082,
    -987,  1396,  -987,   379,  -987,  5523,  -987,  -987,  1240,  1683,
    2124,  2124,  -987,  -987,  1809,  2124,  2124,  2124,  -987,  -987,
     446,   340,   362,   349,   387,  -987,   272,   476,   422,  -987,
    5412,  4870,   438,   463,  -987,  1103,  2641,   515,  -987,   233,
    6001,  -987,  -987,  -987,  -987,  -987,  -987,   243,   307,   292,
     403,  4529,  4529,  2339,  -987,   465,   373,   487,  -987,  -987,
      66,  -987,    66,  -987,   266,  -987,  -987,  6001,  -987,  2485,
    2485,  -987,  2485,  2485,  2485,  2485,   480,  -987,   531,  -987,
     531,  3539,   108,   535,  1349,  -987,  -987,   347,  4277,  -987,
    6323,  2413,  -987,  -987,  -987,  -987,  1540,   520,   513,   555,
    -987,  -987,  -987,  6001,  -987,   176,  -987,  -987,   176,   176,
     231,  -987,  -987,  -987,  -987,  2076,   457,   491,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,   519,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  2076,  -987,  -987,  -987,  -987,
    -987,   606,  -987,  -987,  6001,  -987,   929,   519,  -987,  -987,
    -987,  -987,  -987,   519,  -987,  -987,  -987,  -987,  1059,   582,
     609,  -987,  -987,  6323,  -987,  -987,  -987,  -987,  -987,  -987,
     604,  -987,  5777,    52,    65,   106,   121,   644,  -987,  6162,
    6435,   649,  6274,  -987,  -987,  -987,  -987,   519,  -987,  6323,
    6323,  -987,  2485,  -987,   625,  -987,  -987,  -987,  -987,   796,
    -987,  1004,    53,   674,  -987,  6323,  -987,  -987,  -987,    44,
     510,   500,   541,   119,   585,   592,   620,   623,   605,  2288,
    -987,  -987,  -987,  6323,  -987,  -987,  -987,  -987,  -987,  -987,
    1082,  6001,  -987,   361,   339,  2124,  2124,   214,   686,  2124,
    2124,  2485,  2485,  -987,  -987,  2124,  4983,   282,  -987,  -987,
    -987,  1540,  1082,  -987,  1403,  -987,  1151,  -987,  -987,  2485,
    2485,  -987,  -987,  -987,  4983,  -987,  1103,  6001,  6001,  -987,
    -987,  -987,  -987,  -987,  5615,  2210,  4983,  -987,  -987,   697,
     696,   701,  -987,  -987,  -987,   272,   476,   233,   706,  -987,
     716,  6472,    55,  -987,  -987,  -987,  2053,   717,   728,  -987,
      62,   541,   207,   357,   370,  6162,  6113,  -987,  -987,  -987,
    6323,  -987,  -987,  -987,  -987,  -987,  6323,  -987,  -987,  -987,
    -987,   729,   731,  -987,  -987,  5412,  5209,   408,  -987,  4277,
    -987,  4277,  -987,  4277,   737,  -987,  -987,  -987,  -987,  -987,
    -987,   744,  -987,  -987,  -987,  -987,   208,  -987,  -987,   531,
    1385,  2339,  -987,  4277,  -987,   339,  6323,   734,   749,   750,
     751,  -987,   753,   745,   746,   339,  6162,   139,  2339,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  4277,
     752,  -987,  -987,  -987,  -987,  -987,  -987,  -987,   755,   754,
      55,    62,    46,  -987,  -987,   760,  -987,  -987,   757,    75,
    -987,   207,  2627,   759,  1540,  -987,   762,    60,  5412,   152,
    -987,  5320,  -987,  -987,   773,  -987,  -987,  -987,  -987,  -987,
    1632,  -987,  -987,  -987,  -987,  -987,  -987,  1857,  6001,   775,
     515,  -987,  -987,  -987,   519,  -987,  -987,  -987,  -987,  6001,
     770,   207,   604,  -987,   777,   779,   505,  6472,  6472,  6472,
    6472,  6472,  6472,  6472,  6472,  5889,  -987,  -987,  5777,  -987,
    6162,  -987,  1833,  -987,  -987,  -987,  6162,  -987,  -987,  6162,
    -987,  1059,  3858,  6162,   440,  -987,  -987,  1410,  -987,  6162,
    -987,  6323,  6323,  6323,  6323,  6323,  6323,  6323,  6323,  6323,
    6323,  6323,  6323,  6323,  6323,  3970,  4019,  6323,  6323,  6323,
    6323,  -987,  6162,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  6323,  6162,  -987,  -987,   782,  5615,   768,
    -987,  -987,  -987,   785,   233,  -987,  -987,  -987,  -987,  -987,
    -987,  5615,  4983,   787,   788,  -987,  -987,  -987,  1082,  -987,
    -987,  4983,  -987,   783,  4983,   789,   801,   805,  4983,   282,
    -987,   797,   802,   288,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  2506,  2053,  -987,   486,  1446,  6001,
    -987,    82,  -987,   799,  -987,  -987,   516,  6113,  -987,  -987,
     803,   207,   806,   207,  -987,  -987,   207,   811,  1540,   813,
    -987,   799,  -987,  -987,  -987,   807,  -987,  -987,  -987,   222,
    -987,   817,  -987,  -987,    78,   808,   820,   821,   824,  4403,
    -987,  -987,  -987,  4403,  -987,  -987,  -987,   818,   822,  4403,
     826,   828,  -987,  -987,  -987,  6162,  -987,  -987,  2641,  6162,
    -987,  -987,   833,  6162,  -987,  6162,   837,  -987,  -987,  -987,
    -987,   207,  -987,  -987,   830,  -987,  4642,  1632,  -987,  -987,
    -987,   835,  -987,   839,  1632,  -987,  -987,   844,  -987,  -987,
     845,  -987,  -987,  -987,  6323,  -987,  -987,   846,   848,   852,
     853,   857,   858,   860,   862,   863,   524,   864,   528,  6472,
    1590,   103,   674,   865,   207,   866,  -987,   872,   542,   339,
     519,  -987,   233,  1453,  -987,  -987,   233,  -987,  -987,  -987,
    -987,    44,    44,    44,   510,   510,   500,   500,   541,   541,
     541,   541,   541,  -987,   119,  -987,   119,   585,   592,   620,
     623,   301,   605,  -987,   868,   418,  6472,  6472,   877,  -987,
    -987,  6323,  6323,  -987,  -987,   873,  -987,   807,   830,   881,
    4983,  -987,  -987,   874,    89,    89,   351,   486,  -987,  6472,
    -987,  2641,  -987,  -987,  -987,   882,   887,  -987,  -987,  -987,
    -987,   207,   207,   799,  -987,   884,   888,  -987,   820,  -987,
     241,  -987,  6323,  -987,  -987,  -987,  4403,  -987,  5889,  5889,
    5889,  -987,  4529,  -987,  -987,  -987,  -987,  2339,  -987,  -987,
     892,  -987,  -987,  -987,  -987,  6323,   207,  -987,  -987,  -987,
    -987,   368,   876,   883,  1966,  -987,   266,  -987,   895,  -987,
    -987,  -987,  1632,  -987,  -987,   868,  -987,   899,   903,   907,
     908,   910,   911,   913,   923,  -987,  -987,  -987,  -987,   924,
    6162,  1590,  -987,  -987,   925,  6162,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,   519,  -987,  6162,  -987,
     900,  -987,  -987,  -987,   541,   541,  -987,  -987,  -987,  -987,
     604,  2324,  -987,   930,   936,  -987,   931,  -987,   937,   932,
    -987,  -987,  6113,  -987,  -987,  -987,   207,  6162,  6162,  -987,
    -987,  -987,  -987,  -987,   909,  -987,  -987,   938,   935,  2339,
     755,   943,   946,   847,  -987,  5889,  -987,  -987,  -987,   207,
     944,  -987,  5615,   422,  -987,   322,   322,  -987,  -987,  -987,
    -987,  -987,  -987,  4277,   413,  -987,  -987,  -987,  6162,  6162,
    6162,  6162,  6162,  6162,  6162,  6162,   103,   546,  -987,  6323,
     951,  -987,  -987,   339,  -987,   948,  1151,  6323,  -987,   930,
    -987,  6472,  -987,  -987,   799,  -987,  -987,   909,   956,  -987,
     909,  -987,  6162,  -987,  4403,  4403,   957,  -987,   958,  -987,
    -987,   282,  5615,  6323,  -987,  -987,   434,   435,   447,  -987,
    2339,  -987,   586,   587,   595,   602,   607,   626,   647,   656,
    -987,  -987,   962,  -987,   963,  -987,   109,  -987,  -987,  -987,
    -987,  6472,  -987,  -987,  4403,  -987,  -987,  -987,  6162,  6162,
    5096,   282,  -987,  -987,  -987,  -987,   973,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,  -987,  2324,  -987,  2235,
     969,  -987,   657,   983,  -987,  5096,  -987,  -987,  -987,  -987,
    -987,  -987,   886,   976,  4403,  -987,   820,  -987,  -987,  -987,
    -987,  -987,  4403,  -987
};

/* YYPGOTO[NTERM-NUM].  */
static const short yypgoto[] =
{
    -987,  -987,  -987,  -987,  -548,  -357,   142,  -987,  -987,  1001,
     589,    -9,  -987,  -987,    22,   189,   823,   522,   163,   -96,
    3106,  3228,   114,   880,  -987,  -987,    -2,  2018,  2494,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,   926,  -987,  -987,  -987,
    -162,  -987,  -987,  -987,   105,  -987,  -987,    49,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,  -186,  -108,    72,   610,
      27,   126,   165,   323,   136,    20,   -53,  -987,  -987,  -987,
     171,  -987,  -987,  -476,  -987,  -987,    10,   562,    85,    88,
    -749,   104,  -987,  -987,  -987,  -987,  -987,  -987,  -987,  -987,
     226,  2807,   174,   -56,  -987,   401,  -344,  -987,  -515,  -194,
    -987,  -987,  -987,  -987,   -47,  -987,  -987,   483,   462,  -987,
    -173,  -443,  -987,  -149,  -677,  -987,  -987,  2279,   456,  -987,
      84,   -71,  -987,  -918,  -627,  -987,  -987,  -987,  -987,  -987,
    -987,    93,    98,  -987,    99,  -987,   100,  -987,  -986,  -987,
    -987,    86,  -298,   250,   -73,  -987,   448,  -987,  -987,  -987,
    1893,   -31,  -696,  -709,  -987,  -987,  -987,  -987,  -987,  -987,
    -146,  -383,  -406,   377,  -987,  -987,  -987,  -987,   -82,   344,
    -987,  -987,  -987,  -987,  -987,  -987,  -987,   867,  -987,  -987,
    -776,  -987,  -987,  -987,  -987,  -987,  -987,  -491,  -987,  -987,
    -152,  -987,   133,  -306,  -987,   566,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -855,  -987,  -987,  -987,  -987,  -987,  -987,
    -987,  -987,  -987,  -987,  -987,  -987,   147,  -987,  -956,  2343,
     444,    -1,   348,  1164,  -141,   554,  -987,  1052,  -104,  -987,
     264,  1609,   353,  -987,   -64,  -551,   455,   761,  -987,  -987,
    -987,  -987,  -987,  -987,   113,  -987,  -987,     8,  -987,  -278,
    -568,    71,    92,  1165,    94,   443,   437,   458,   454,   424,
    -200,  -193,   885,  -987,  -987,   -84,  -490,  -471,  -285,  -987,
    -987,     5
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -701
static const short yytable[] =
{
      65,   102,   414,   174,   672,   124,   585,   469,   689,   471,
     532,   473,    65,   102,   127,   428,   758,   533,   580,   448,
     663,   111,   546,   275,    59,   748,   732,   772,   733,    79,
     734,   290,   762,   296,   803,   908,    59,   946,   487,   217,
     894,    79,   411,   413,   603,  1075,   162,   420,   152,   343,
     771,   604,   605,    65,   102,   841,   842,   843,   825,   929,
    1105,   827,   194,   194,  1031,  1032,   587,   620,   142,   612,
     540,   606,   621,   613,    78,   642,  -245,    59,   609,   589,
    -245,   307,    79,   614,    65,   655,    78,   701,   206,   209,
     802,   769,   274,   210,   445,     3,   153,   221,   889,   283,
     211,  1000,   446,   532,   148,   474,   468,   343,   343,  1001,
     533,   332,     5,     6,     7,     8,     9,    10,   299,   975,
     591,   283,   149,   382,   364,   187,  1158,    78,    80,   290,
     275,   296,   400,   141,   630,   593,   188,   621,   454,   460,
      80,   554,   417,   653,   622,   286,   588,   150,    65,    65,
     102,   615,   616,   160,   617,   618,   123,   607,   432,   590,
    1166,   140,  -245,  -245,   610,   720,   759,    81,   777,   332,
     332,   722,   778,    59,    37,   212,   213,   770,    79,    81,
    1097,    80,  1010,   463,   890,   432,   287,   194,   194,   772,
     194,   194,   194,   194,   159,   142,   142,   674,   555,   274,
     592,  1167,   569,   556,   142,   976,   332,  1015,   302,   622,
     198,     4,   303,   631,   632,   594,   306,     4,   930,   211,
      81,   432,  1164,    78,     4,   576,   543,   191,   586,   -10,
     898,   736,   900,   -10,   225,   903,     4,   114,   -10,   160,
     288,   910,   706,   141,     4,   911,   711,  1175,   633,   634,
     532,   300,   865,  -111,   779,   780,   532,   533,  -111,   445,
     141,   141,   205,   533,  1021,  -315,   290,   446,   296,   141,
      34,    35,    36,   453,   459,   216,     5,    80,     7,     8,
       9,    10,   432,  -315,   154,   173,   668,    37,   206,   657,
     937,   155,   585,   285,   304,   305,   532,   372,   420,    37,
     482,   671,   216,   533,   680,   883,   880,   884,   449,   109,
     432,  1130,   450,   114,  1132,   885,    81,   420,   420,   211,
     765,   411,   413,   445,   284,   686,   687,   742,   988,  -318,
     194,   446,   285,   980,   114,  1083,   443,   444,   442,   415,
     114,  -321,     4,   839,   840,   301,  1103,  -318,  -321,   467,
     507,   223,   475,   476,   407,   477,   478,   479,   480,   118,
     216,   216,   224,   408,     4,   188,   491,   763,  1006,   432,
     884,     4,   147,   492,   224,   658,   491,   670,   885,   194,
     194,   716,   122,   714,    65,   102,   541,  -132,  1129,   491,
     464,   946,   465,   371,   451,   452,   715,   194,   194,   114,
     141,   673,    65,   102,   410,   432,   432,   118,    59,   409,
    1013,  1014,   382,    79,    65,   102,   946,   576,   727,   455,
    1106,  1107,  1108,   456,  1070,   691,    59,   491,   300,   700,
     211,    79,  1110,   990,   730,   118,   122,   671,    59,  1111,
     915,  1023,   544,    79,     5,  1041,     7,     8,     9,    10,
     418,  1037,  1074,  1110,  1110,   142,   118,   292,    78,   570,
    1143,  1144,   118,    65,    65,   102,  1110,   332,   405,   332,
     406,   332,   292,  1145,   142,   142,    78,   829,   581,   419,
       5,   292,     7,     8,     9,    10,   797,  -320,    78,   950,
       5,   332,     7,     8,     9,    10,   953,   800,   875,   147,
     147,   776,   879,   466,   427,   457,   458,   481,   426,  1126,
     141,   816,    80,   109,   586,   300,   660,   332,   830,   660,
     141,   118,   806,   286,   765,  1084,   956,     9,    10,   828,
      80,   275,   551,   893,   906,   619,   818,   550,   576,   141,
     141,   966,    80,   765,   667,   968,    65,   619,  1099,    65,
     141,    81,   299,   483,   364,   292,   105,  -121,   861,   427,
     564,   765,   679,   983,   118,   765,   432,  1121,   105,    81,
     626,   627,   831,   552,  1026,  1026,  1026,   432,    34,    35,
      36,    81,   623,   624,   625,   700,   700,   700,   700,   700,
     700,   700,   700,   432,   565,   913,   432,   917,  1122,   578,
     274,   921,  1020,  1148,  1149,   765,   765,   925,   412,   105,
    1109,   507,  1150,   507,   765,   507,   582,   544,   288,  1151,
     568,   765,   203,   579,  1152,   721,   765,   540,   737,   628,
     629,   723,  1142,   461,   462,   507,  1101,   747,   726,   571,
     105,   114,   608,  1153,  1170,   765,   230,   757,   281,  1163,
    1040,   292,   397,   398,   216,   728,   382,   401,   402,   403,
     595,   507,   705,   870,  1154,   600,   765,   340,   637,   382,
      65,   102,   162,  1155,  1173,   765,   765,   635,   636,    65,
     102,   141,    65,   102,   561,   562,    65,   102,   105,   696,
     697,  1026,   292,   619,    59,   638,  1141,   844,   845,    79,
     639,   640,   664,    59,   105,   105,    59,   432,    79,   694,
      59,    79,   532,   584,   440,    79,  1124,   114,  1140,   533,
     846,   847,  -570,   292,   781,   340,   340,   695,   141,   854,
     856,   141,   698,   699,   114,   532,   709,   216,   905,   118,
     216,   440,   533,   710,    78,   292,   724,   332,   725,   292,
     540,   332,   735,    78,   536,   281,    78,   332,  1165,   426,
      78,   749,   340,   118,  1025,   750,   751,   752,   544,   754,
     544,   755,   756,  1053,   765,   764,   768,   440,   426,   426,
     766,   767,   824,   773,    65,   102,   775,  1159,   784,   563,
     798,   801,   866,   796,   804,  1042,   805,   864,    80,     4,
       5,     6,     7,     8,     9,    10,   874,    80,   944,   867,
      80,   871,   872,   945,    80,   876,   877,   700,   141,   141,
     878,   141,   141,   881,   897,   882,   891,   899,   904,   566,
     907,   914,   909,   286,  1030,  1030,  1030,    81,   440,   118,
     138,   912,   493,   292,   923,   406,    81,   927,   924,    81,
     931,   916,   926,    81,   934,   938,   118,   951,   952,   954,
     955,   957,    37,   958,   700,   700,   440,   959,   960,   532,
    1181,   998,   961,   962,   287,   963,   533,   964,    65,   102,
     965,   967,   979,   981,   185,   186,  1067,   700,   174,   982,
     118,   507,   118,   989,   993,   507,   996,  1102,   901,   902,
     999,   507,    59,   532,   997,  1011,  1012,    79,  1017,  1038,
     533,   222,  1018,  1043,   332,  1058,   432,   432,   432,  1059,
     332,   154,  1055,  1060,  1061,   440,  1062,  1063,   288,  1064,
     705,   705,     4,     5,   141,     7,     8,     9,    10,  1065,
     105,  1066,  1136,  1137,  1073,  1069,  1077,   141,  1000,  1082,
    1088,  1030,    78,   936,   544,  1091,  1081,  1080,   105,  1092,
    1094,   440,   440,  1095,   292,  1100,   109,  1096,  1123,  1125,
     105,   300,  1131,  1138,  1112,  1113,  1114,  1115,  1116,  1117,
    1118,  1119,  1161,  1156,  1139,   703,  1171,  1157,   807,   808,
     809,   810,   811,   812,   813,   814,   815,  1103,   361,   817,
    1174,   141,  1179,    55,  1177,   692,    80,     4,     5,     6,
       7,     8,     9,    10,   399,  1022,   685,   886,   229,   105,
     105,  1005,  1180,   340,  1079,   340,  1127,   340,   729,  1045,
    1183,   292,  1046,   432,   783,  1056,   948,  1049,  1057,  1093,
     382,   109,  1050,  1051,  1052,    81,   971,   340,   869,   472,
     820,   332,   737,   888,  1162,  1034,   361,   361,   507,   745,
     292,   836,     4,     5,     6,     7,     8,     9,    10,  1036,
      37,   144,   837,   340,  1120,   858,   118,   862,  1016,   700,
     857,   599,   293,   300,  1068,   141,     5,     6,     7,     8,
       9,    10,   332,   332,   860,     0,   286,   859,     0,     0,
     382,     0,   105,     0,     0,   105,     0,     5,  1039,     7,
       8,     9,    10,     0,   795,   141,   427,     0,     0,   286,
    1146,     0,   440,     0,     0,    37,     0,     0,    12,   700,
       0,     0,   332,   440,     0,     0,   294,   574,    65,   102,
     109,   703,   703,   703,   703,   703,   703,   703,   703,   440,
       0,     0,   440,   114,     4,     5,   281,     7,     8,     9,
      10,     0,   944,    65,   102,     0,   104,   945,     0,  1169,
     173,     0,   332,     0,     0,   119,     0,     0,   104,   128,
     332,     0,     0,     0,     0,     0,   292,   944,   286,     0,
     141,   288,   945,     0,     0,   507,     0,   971,   661,   662,
       0,     0,   665,   666,   596,     0,     0,     0,   669,     0,
       0,     0,     0,     0,   288,   660,     0,    37,     0,   104,
     969,     0,     0,   119,     0,     0,   105,     0,     0,     0,
       0,     0,   202,     0,     0,   105,   507,   507,   105,   427,
     292,     0,   105,     4,     5,     6,     7,     8,     9,    10,
     202,   119,     0,     0,     0,   114,   202,     0,   202,     0,
       0,     0,     0,   440,     0,     0,     0,   991,   992,     0,
     298,   141,   119,     0,     0,   118,   507,   286,   119,     0,
       0,     0,     0,   288,     0,   370,     0,     0,     0,   392,
    1007,     0,   118,   396,     0,     0,     0,     0,   202,     0,
       0,     0,     0,   340,     0,     0,    37,   340,     0,     0,
       0,     0,     0,   340,   202,   104,   507,     0,     0,     0,
     119,     0,     0,     0,   507,   441,     0,     0,     0,     0,
     361,   719,     0,     0,     0,     0,   114,   119,     0,     0,
     105,   795,     0,     0,     0,     0,     0,     0,   795,     0,
       0,     0,   441,     5,     6,     7,     8,     9,    10,     0,
       0,     0,     0,     0,     0,   202,     0,     0,   490,     0,
       0,     0,   288,   703,     0,   119,     0,   118,     0,     0,
     119,     0,     0,     0,     0,   544,   109,     0,   441,     5,
       6,     7,     8,     9,    10,     0,     0,     0,     0,   202,
       5,     6,     7,     8,     9,    10,     0,     5,     6,     7,
       8,     9,    10,     0,     5,    37,     7,     8,     9,    10,
     703,   703,   286,     0,     0,     0,     0,   293,     0,   292,
       0,     0,     0,   109,   105,     0,     0,     0,     0,   202,
     109,     0,     0,   703,     0,     0,     0,   829,     0,   441,
       5,    37,     7,     8,     9,    10,     0,     5,   118,     7,
       8,     9,    10,   574,     0,     0,     0,     0,     0,     0,
     340,     0,   440,   440,   440,     0,   340,     0,     0,     0,
       0,   294,  1128,   109,     0,   361,     0,     0,   830,     0,
     286,   361,     0,     0,   361,     0,     0,   361,     0,     0,
       0,     0,     0,     0,   838,   611,   795,   118,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   288,     4,     5,
       6,     7,     8,     9,    10,     0,     0,     0,   368,     0,
       0,   986,     0,     0,     0,   676,   441,     0,     0,   863,
      12,   163,   835,     4,     5,     6,     7,     8,     9,    10,
     104,     0,   109,     0,     0,   119,   542,     0,   678,     0,
    -244,     0,     0,     0,     0,    12,     0,     0,   104,     0,
       0,     0,   441,   441,     0,     0,     0,   109,   392,   119,
     104,    37,     0,     0,     0,   288,     0,    38,     0,   440,
       0,    39,     0,     0,     5,   202,     7,     8,     9,    10,
     707,     0,   719,     0,     0,     0,    37,   340,     0,     0,
     970,   106,    38,     0,     0,    12,    39,   164,     0,     0,
     121,     0,     0,   106,   129,     0,     0,   109,   146,   202,
     104,     0,     0,     0,     0,   703,     5,     6,     7,     8,
       9,    10,  -244,  -244,     0,     0,     0,     0,   340,   340,
     928,     0,     0,     0,   361,   119,     0,    12,   932,     0,
     933,     0,    38,     0,   106,     0,    39,     0,   121,   109,
      15,     0,   119,     0,     0,     0,     0,   204,     0,     0,
       0,   787,   788,   789,   790,   703,     4,     5,   340,     7,
       8,     9,    10,     0,   105,   204,   121,     0,    37,     0,
       0,   204,     0,   204,     0,     0,   119,     0,   119,     0,
      40,     0,   202,     0,     0,   202,     0,   121,     0,   105,
     109,     0,     0,   121,   202,     0,     0,     0,   340,     0,
       0,   707,     0,   441,   394,     0,   340,     0,     0,     0,
       0,     0,     0,   204,   441,     0,     0,     0,     0,    37,
       0,   202,   202,   202,   202,   202,   202,   202,   202,   204,
     106,     0,     0,     0,   425,   121,   202,     0,     4,     5,
       6,     7,     8,     9,    10,     0,     0,     0,   833,     0,
       0,   833,   121,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,   848,   849,   850,   851,   852,
       0,     0,   109,    15,     0,     0,     0,     0,     0,     0,
     204,     0,     0,     5,     6,     7,     8,     9,    10,     0,
     121,     0,   392,     0,     0,   121,     0,     0,     0,     0,
       0,    37,     0,     0,    12,   392,   104,     5,     6,     7,
       8,     9,    10,    40,   204,   104,   109,    15,   104,   819,
       0,     0,   104,    18,     0,    20,    21,    22,    12,     0,
     361,     5,     0,     7,     8,     9,    10,     0,   707,   707,
     109,    15,   887,  1072,   441,    37,     0,    18,     0,   235,
      21,    22,    12,     0,   204,     0,     0,    40,     0,     0,
       0,     0,   119,     0,   109,     0,     0,   719,     0,    37,
       0,     0,  1085,  1086,   116,     0,     0,     0,   116,     0,
       0,    40,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,     0,     0,     0,    38,
       0,     0,   119,    39,     0,     0,    52,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     0,     0,
     104,   202,   116,     0,     0,     0,     0,     0,   202,     4,
       5,   201,     7,     8,     9,    10,     0,     0,     0,     4,
       5,     6,     7,     8,     9,    10,     0,  1135,   139,   201,
     116,    12,     0,   202,   707,   201,     0,   201,     0,     0,
       0,    12,  1044,   109,     0,   106,     0,     0,     0,     0,
     121,   116,     0,   109,     0,     0,     0,   116,     0,     0,
       0,   116,     0,   106,     0,   425,     0,     0,     0,     0,
       0,   116,   116,   394,   121,   106,     0,   201,     0,   110,
     202,   202,    37,   126,     0,     0,   994,   995,    38,     0,
     204,     0,    39,   201,   104,   708,     0,     0,     0,   116,
       0,     0,   116,   202,     0,   119,     0,     5,     0,     7,
       8,     9,    10,     0,     0,     0,   116,     0,   164,   704,
       0,     0,     0,  -244,   204,   106,     0,   110,    12,     0,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
     109,   119,     0,     0,   201,   201,     0,   201,     0,     0,
     121,    12,     0,     0,   116,   110,     0,     0,   119,   116,
       0,     0,     0,   109,    15,     0,   202,   121,     0,     0,
       0,     0,   289,     0,   295,    38,   110,     0,   201,    39,
       0,     0,   110,     0,     0,   707,     0,   367,     0,   369,
       0,     0,    37,   383,     0,     0,   395,     0,     0,     0,
       0,   121,     0,   121,    40,  -244,  -244,   204,     0,     0,
     204,     0,     0,     0,     0,  1076,   130,   131,   201,   204,
       0,     0,     0,    23,   110,     0,   708,     0,    25,    26,
     132,    28,     0,     0,    31,    32,    33,    34,    35,    36,
       0,   110,     0,   119,     0,     0,   204,   204,   204,   204,
     204,   204,   204,   204,     0,     0,   392,     0,     0,     0,
       0,   204,     0,     4,     5,     6,     7,     8,     9,    10,
     289,     0,   295,     0,     0,     0,   108,     0,     0,   110,
       0,     0,     0,     0,   110,    12,   690,     0,     4,     5,
       6,     7,     8,     9,    10,   202,     0,   109,     0,     0,
       0,   542,    53,  1168,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,   392,   394,     0,     0,
       0,     0,   109,     0,   119,     0,    37,     0,     0,     0,
     394,   106,    38,     0,   116,     0,    39,     0,     0,   116,
     106,     0,     0,   106,     0,   202,     0,   106,   143,     0,
       0,    37,     0,     0,   104,     0,     0,    38,   116,     0,
       0,    39,   641,   708,   708,     0,   575,   642,     0,   158,
     116,  1076,     0,   119,   201,     0,     0,     4,     5,   104,
       7,     8,     9,    10,     0,     0,     0,   121,     0,     0,
       0,     0,     4,     5,     6,     7,     8,     9,    10,    12,
       0,     0,     0,     0,   117,   108,     0,   289,   201,   295,
       0,   109,     0,     0,    12,     0,     0,     0,   643,   644,
     645,   646,   647,   648,   649,   650,   109,   121,   651,   652,
       0,     0,     0,   201,   116,   653,     0,     0,   656,     0,
      37,     0,     0,     0,     0,   106,   204,     0,     0,     0,
       0,   116,   117,   204,     0,    37,     0,     0,   143,   110,
     675,    38,   677,     0,     0,    39,     4,     5,     6,     7,
       8,     9,    10,   536,     0,   143,   143,     0,   204,   708,
     117,     0,   383,   110,   143,   116,     0,   116,    12,     0,
       0,   201,     0,     0,   201,     0,     0,   291,     0,   297,
     109,   117,     0,   201,     0,     0,     0,   117,     0,     0,
       0,   366,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   291,   297,     0,     0,   204,   204,     0,     0,    37,
     201,   201,   201,   201,   201,   201,   201,   201,     0,   106,
       0,     0,     0,     0,     0,   201,     0,     0,   204,   117,
     121,     0,   430,     0,     0,     0,     0,     0,   575,   110,
       5,     0,     7,     8,     9,    10,   117,     0,     0,     0,
       0,     0,   704,     0,     0,   158,   110,   189,   190,     0,
       0,    12,     0,     0,    23,     0,   121,     0,     0,    25,
      26,   132,    28,   109,     0,    31,    32,    33,    34,    35,
      36,     0,     0,   121,   117,     0,     0,   116,     0,   117,
     110,   204,   110,     0,     0,   143,   572,     0,     0,     0,
       0,     0,   573,     0,     0,     0,     0,     0,    38,     0,
     708,     0,    39,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,     0,     0,     0,     0,   158,     0,     0,     0,
     129,     0,     0,    53,     0,     0,     0,     0,     0,   384,
       0,   116,     0,     0,     0,     0,     0,     0,     0,   575,
       4,     5,     6,     7,     8,     9,    10,     0,   121,     0,
       0,   577,     0,   542,     4,     5,     6,     7,     8,     9,
      10,   394,    12,     0,   433,     0,     0,     0,     0,     0,
       0,   116,     0,     0,   109,     0,    12,     0,     0,     0,
       0,     0,     0,     0,     0,   143,   383,     0,   109,     0,
     201,   433,   291,     0,   297,   143,     0,   201,     0,   383,
     204,     0,     0,    37,     0,     0,   873,     0,     0,    38,
       0,     0,     0,    39,   143,   143,     0,    37,     0,     0,
       0,   394,   201,     0,     0,   143,     0,   433,     0,   121,
       0,     0,     0,     0,     0,   116,     0,     0,     0,   116,
       0,     0,     0,     0,   117,     0,     0,     0,     0,   577,
     204,     0,     0,     0,     0,     0,   110,     0,     0,   106,
       0,     0,     0,     0,     0,     0,     0,     0,   117,   201,
     201,     0,     0,     0,     0,     0,   129,     0,   121,     0,
     366,     0,     0,     0,   106,     0,     0,     0,   433,     0,
       0,     0,   201,     0,   116,     0,   110,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   433,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     116,     0,     0,   137,   137,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   117,     0,     0,   116,     0,     0,
       0,     0,     0,     0,     0,   201,   143,     0,     0,     0,
       0,   117,     0,   799,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   433,     0,     0,   137,   137,
       0,   195,   195,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   117,     0,   117,     0,     0,
       0,     0,     0,   143,   116,   137,   143,     0,     0,     0,
       0,   433,   433,     0,     0,     0,     0,     0,   384,   110,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   116,     0,     0,   433,     0,     0,     0,     0,
       0,     0,   385,     0,     0,     0,     0,   137,   137,     0,
       0,     0,   137,   137,   137,   110,     0,     0,     0,     0,
       0,     0,     0,     0,   577,     0,     0,     0,     0,     0,
       0,     0,   110,     0,   429,     0,     0,   434,     0,   116,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
       0,     0,     0,   143,   143,     0,   143,   143,     0,     0,
       0,     0,     0,     0,   434,     0,   195,   195,     0,   195,
     195,   195,   195,   116,     0,     0,     0,   868,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   201,     0,     0,     0,     0,     0,
     434,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   110,     0,     0,
     116,     0,   116,     0,     0,     0,     0,     0,     0,     0,
     383,     0,   433,     0,     0,     0,     0,     0,     0,     0,
       0,   117,     0,   433,     0,     0,     0,     0,     0,     0,
       0,   433,   433,   433,   433,   433,   433,   433,   433,   433,
       0,   434,   433,     0,     0,     0,     0,     0,     0,   143,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   984,
       0,   117,   143,     0,     0,     0,     0,     0,     0,   434,
     383,     0,   135,   135,     0,     0,     0,     0,   110,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   195,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   384,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   384,   143,   135,   135,     0,
     192,   192,     0,     0,     0,   985,     0,   110,   434,   987,
       0,     0,   137,   137,     0,     0,   137,   137,   195,   195,
       0,     0,   137,     0,   135,     0,     0,     0,     0,     0,
       0,     0,     0,   433,     0,     0,   195,   195,     0,     0,
       0,     0,     0,     0,   434,   434,     0,     0,     0,     0,
       0,   385,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   379,     0,     0,   117,     0,   135,   135,   434,     0,
       0,   135,   135,   135,   136,   136,     0,     0,     0,   429,
     143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1071,     0,     0,     0,     0,
     117,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     143,     0,     0,     0,     0,     0,     0,   117,     0,   136,
     136,     0,   193,   193,     0,   192,   192,     0,   192,   192,
     192,   192,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   433,     0,     0,   136,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   429,     0,
       0,     0,     0,   380,     0,   143,     0,     0,   136,   136,
     433,   433,     0,   136,   136,   136,     0,     0,     0,     0,
       0,     0,   117,     0,     0,   434,     0,   429,     0,     0,
       0,     0,     0,   433,     0,     0,   434,     0,   429,     0,
       0,     0,     0,     0,   434,   434,   434,   434,   434,   434,
     434,   434,   434,     0,     0,   434,     0,     0,     0,     0,
       0,     0,   433,   433,   433,     0,     0,   193,   193,   291,
     193,   193,   193,   193,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   143,     0,   192,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   117,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   385,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   385,     0,
       0,   135,   135,     0,     0,   135,   135,   192,   192,     0,
       0,   135,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   117,     0,     0,   192,   192,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   434,     0,     0,     0,
     379,     0,     0,     0,     0,     0,     0,     0,   429,   433,
     429,     0,     0,   429,     0,     0,   384,     0,     0,     0,
       0,     0,     0,     5,     6,     7,     8,     9,    10,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     193,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   433,   109,    15,     0,     0,
       0,     0,     0,    18,     0,   235,    21,    22,   429,     0,
       0,     0,     0,     0,     0,     0,   384,     0,     0,     0,
       0,     0,     0,   136,   136,    37,     0,   136,   136,   193,
     193,     0,     0,   136,     0,     0,     0,    40,     0,     0,
       0,     0,     0,     0,     0,   433,   434,   193,   193,     0,
       0,   429,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   380,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   434,   434,     0,     0,     0,     4,     5,
       6,     7,     8,     9,    10,     0,     0,     0,     0,     0,
       0,    11,     0,     0,     0,     0,   434,     0,     0,     0,
      12,    13,     0,     0,     0,     0,     0,     0,   429,   429,
       0,     0,    14,    15,     0,     0,     0,    16,    17,    18,
      19,    20,    21,    22,    23,   434,   434,   434,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,     0,   429,     0,     0,     0,    38,     0,     0,
       0,    39,     0,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   379,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   379,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    52,    53,     0,     0,     0,   161,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   429,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   434,     0,     0,     0,   429,     0,     0,   385,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     5,     6,     7,     8,     9,    10,   308,   309,
     310,   311,     0,     0,   312,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,   380,     0,   434,   313,
     314,   315,   316,   317,   318,   109,    15,   319,     0,   380,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   385,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,   320,   321,   322,   323,   324,
     325,     0,     0,     0,   326,     0,   327,   328,   434,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,     0,     0,
       0,     0,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     4,     5,     6,     7,     8,     9,    10,
     308,   309,   310,   311,     0,     0,   312,     0,     0,     0,
     826,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,   313,   314,   315,   316,   317,   318,   109,    15,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     4,     5,     6,     7,     8,     9,    10,   308,
     309,   310,   311,     0,     0,   312,    37,   320,   321,   322,
     323,   324,   325,     0,    12,     0,   326,     0,   327,   328,
     313,   314,   315,   316,   317,   318,   109,    15,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    37,   320,   321,   322,   323,
     324,   325,     0,     0,     0,   326,     0,   327,   328,     0,
       0,     0,   853,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   379,     0,
       0,   855,     5,     6,     7,     8,     9,    10,     0,     0,
       0,     0,   231,   232,     0,     0,     0,   233,     0,     0,
       0,     0,   234,    12,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   109,    15,     0,     0,     0,
       0,     0,    18,     0,   235,    21,    22,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   379,     0,
       0,     0,     0,     0,    37,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,     0,     0,     0,     0,     0,     0,     0,
     380,     0,     0,     0,     0,     0,     0,   272,   273,     0,
       4,     5,     6,     7,     8,     9,    10,   308,   309,   310,
     311,     0,     0,   312,     0,     0,     0,     0,     0,   493,
       0,     0,    12,  -700,     0,     0,     0,     0,   313,   314,
     315,   316,   317,   318,   109,    15,   319,   494,     0,    16,
      17,    18,   495,    20,    21,    22,    23,     0,     0,     0,
     380,    25,    26,   132,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,   320,   321,   322,   323,   324,   325,
       0,     0,     0,   326,     0,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,   496,   497,   498,     0,   499,   500,   501,   502,
     503,   504,   505,   506,    52,    53,     4,     5,     6,     7,
       8,     9,    10,   308,   309,   310,   311,     0,     0,   312,
       0,     0,     0,     0,     0,   493,     0,     0,    12,     0,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
     109,    15,   319,   494,     0,    16,    17,    18,   495,    20,
      21,    22,    23,     0,     0,     0,     0,    25,    26,   132,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
     320,   321,   322,   323,   324,   325,     0,     0,     0,   326,
       0,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,   496,   497,
     498,     0,   499,   500,   501,   502,   503,   504,   505,   506,
      52,    53,     4,     5,     6,     7,     8,     9,    10,   308,
     309,   310,   311,     0,     0,   312,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,   109,    15,   319,     0,
       0,    16,    17,    18,     0,    20,    21,    22,    23,     0,
       0,     0,     0,    25,    26,   132,    28,     0,     0,    31,
      32,    33,    34,    35,    36,    37,   320,   321,   322,   323,
     324,   325,     0,     0,     0,   326,     0,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     0,     4,     5,     6,     7,     8,
       9,    10,     0,     0,     0,     0,    52,    53,    11,     0,
       0,     0,     0,     0,     0,   939,     0,    12,   940,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   941,
      15,     0,     0,     0,    16,    17,    18,     0,    20,    21,
      22,    23,   788,   789,   790,   942,    25,    26,   132,    28,
       0,   943,    31,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,    38,     0,     0,     0,    39,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     0,     0,     0,
       4,     5,     6,     7,     8,     9,    10,     0,     0,    52,
      53,   122,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,    12,    13,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    14,    15,     0,     0,     0,    16,
      17,    18,    19,    20,    21,    22,    23,     0,     0,     0,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,     0,     0,     0,     0,     0,    38,
       0,     0,     0,    39,     0,    40,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     0,     4,     5,     6,     7,     8,     9,    10,
       0,     0,     0,     0,    52,    53,    11,     0,     0,     0,
       0,     0,   416,     0,     0,    12,    13,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    14,    15,     0,
       0,     0,    16,    17,    18,    19,    20,    21,    22,    23,
       0,     0,     0,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,    38,     0,     0,     0,    39,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     4,     5,     6,     7,
       8,     9,    10,     0,     0,     0,     0,    52,    53,    11,
       0,     0,     0,     0,     0,     0,     0,     0,    12,    13,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      14,    15,     0,     0,     0,    16,    17,    18,    19,    20,
      21,    22,    23,     0,     0,     0,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
       0,     0,     0,     0,     0,    38,     0,     0,     0,    39,
       0,    40,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     0,     4,
       5,     6,     7,     8,     9,    10,     0,     0,     0,     0,
      52,    53,    11,     0,     0,     0,     0,     0,     0,     0,
       0,    12,   940,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   941,    15,     0,     0,     0,    16,    17,
      18,     0,    20,    21,    22,    23,     0,     0,     0,   942,
      25,    26,   132,    28,     0,   943,    31,    32,    33,    34,
      35,    36,    37,     0,     0,     0,     0,     0,    38,     0,
       0,     0,    39,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,     0,     4,     5,     6,     7,     8,     9,    10,     0,
       0,     0,     0,    52,    53,    11,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   109,    15,     0,     0,
       0,    16,    17,    18,     0,    20,    21,    22,    23,     0,
       0,     0,     0,    25,    26,   132,    28,     0,     0,    31,
      32,    33,    34,    35,    36,    37,     0,     0,     0,     0,
       0,    38,     0,     0,     0,    39,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     5,     6,     7,     8,     9,    10,
       0,     0,     0,     0,     0,     0,    52,    53,   782,     0,
       0,     0,     0,     0,     0,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   109,    15,     0,
       0,     0,    16,    17,    18,     0,    20,    21,    22,    23,
       0,     0,     0,     0,    25,    26,   132,    28,     0,     0,
      31,    32,    33,    34,    35,    36,    37,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     5,     6,     7,     8,
       9,    10,     0,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,     0,     0,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    52,    53,   109,
      15,     0,     0,     0,    16,    17,    18,     0,    20,    21,
      22,    23,     0,     0,     0,     0,    25,    26,   132,    28,
       0,     0,    31,    32,    33,    34,    35,    36,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     5,     6,     7,
       8,     9,    10,     0,     0,     0,     0,     0,   372,    52,
      53,     0,     0,     0,     0,     0,     0,     0,    12,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     373,   374,     0,     0,     0,   375,   376,   377,     0,    20,
      21,    22,    23,     0,     0,     0,     0,    25,    26,   132,
      28,     0,     0,    31,    32,    33,    34,    35,    36,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     5,
       6,     7,     8,     9,    10,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     0,     0,
      12,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     378,    53,   373,   374,     0,     0,     0,   375,   376,   377,
       0,    20,    21,    22,    23,     0,     0,     0,     0,    25,
      26,   132,    28,     0,     0,    31,    32,    33,    34,    35,
      36,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     231,   232,     0,     0,     0,   233,     0,     0,     0,     0,
     234,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   378,    53,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   365,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
       4,     5,     6,     7,     8,     9,    10,   308,   309,   310,
     311,     0,     0,   312,     0,     0,     0,     0,     0,   493,
       0,     0,    12,     0,     0,   272,   273,     0,   313,   314,
     315,   316,   317,   318,   109,    15,   319,     0,     0,     0,
       0,    18,     0,    20,    21,    22,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      34,    35,    36,    37,   320,   321,   322,   323,   324,   325,
       0,     0,     0,   326,     0,   327,   328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   329,   330,     0,     0,     0,
       0,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,     4,     5,     6,     7,     8,     9,    10,   308,
     309,   310,   311,     0,     0,   312,     0,     0,     0,     0,
       0,     0,     0,     0,    12,     0,     0,     0,     0,     0,
     313,   314,   315,   316,   317,   318,   109,    15,   319,     0,
       0,     0,     0,    18,     0,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    34,    35,    36,    37,   320,   321,   322,   323,
     324,   325,     0,     0,     0,   326,     0,   327,   328,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   329,   330,     0,
       0,     0,     0,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,     4,     5,     6,     7,     8,     9,
      10,   308,   309,   310,   311,     0,     0,   312,     0,     0,
       0,     0,     0,     0,     0,     0,    12,     0,     0,     0,
       0,     0,   313,   314,   315,   316,   317,   318,   109,    15,
       0,     0,     0,     0,     0,    18,     0,    20,    21,    22,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    34,    35,    36,    37,   320,   321,
     322,   323,   324,   325,     0,     0,     0,   326,     0,   327,
     328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   329,
     330,     0,     0,     0,     0,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,     4,     5,     6,     7,
       8,     9,    10,   308,   309,   310,   311,     0,     0,   312,
       0,     0,     0,     0,     0,   717,     0,     0,    12,     0,
       0,     0,     0,     0,   313,   314,   315,   316,   317,   318,
     109,    15,   319,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     4,     5,     6,     7,     8,
       9,    10,   308,   309,   310,   311,     0,     0,   312,    37,
     320,   321,   322,   323,   324,   325,     0,    12,     0,   326,
       0,   327,   328,   313,   314,   315,   316,   317,   318,   109,
      15,   319,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    37,   320,
     321,   322,   323,   324,   325,     0,     0,     0,   326,     0,
     327,   328,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,     4,     5,     6,
       7,     8,     9,    10,   308,   309,   310,   311,     0,     0,
     312,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,     0,     0,   313,   314,   315,   316,   317,
     318,   109,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     4,     5,     6,     7,
       8,     9,    10,   308,   309,   310,   311,     0,     0,   312,
      37,   320,   321,   322,   323,   324,   325,     0,    12,     0,
     326,     0,   327,   328,   313,   314,   315,   316,   317,   318,
     109,    15,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,     0,     0,     0,   565,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    37,
     320,   321,   322,   323,   324,   325,     0,     0,     0,   326,
       0,   327,   328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   329,   330,     0,     0,     0,     0,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,     4,     5,
       6,     7,     8,     9,    10,   308,   309,   310,   311,     0,
       0,   598,     0,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,     0,     0,   313,   314,   315,   316,
     317,   318,   109,    15,     0,     0,     5,     6,     7,     8,
       9,    10,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
       0,    37,   320,   321,   322,   323,   324,   325,     0,   109,
      15,   326,     0,   327,   328,     0,    18,     0,    20,    21,
      22,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   329,   330,    34,    35,    36,    37,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51
};

static const short yycheck[] =
{
       2,     2,   148,    59,   387,    14,   312,   180,   414,   182,
     210,   184,    14,    14,    15,   156,   506,   210,   303,   168,
     377,    11,   216,    94,     2,   496,   469,   542,   471,     2,
     473,   104,   508,   106,   582,   731,    14,   786,   200,    86,
     717,    14,   146,   147,   322,  1001,    55,   155,    16,   113,
     541,   329,   330,    55,    55,   623,   624,   625,   609,   768,
    1046,   612,    64,    65,   919,   920,    14,   345,    19,    16,
     211,    16,    28,    20,     2,    29,    16,    55,    16,    14,
      20,   112,    55,    30,    86,   363,    14,   431,    22,    16,
     581,    16,    94,    20,    16,     0,    64,    87,    16,    94,
      27,    12,    24,   303,    37,   187,    40,   171,   172,    20,
     303,   113,     4,     5,     6,     7,     8,     9,   108,    16,
      14,   116,    12,   125,   114,    14,    17,    55,     2,   202,
     201,   204,   134,    19,    15,    14,    25,    28,   169,   170,
      14,   223,   151,    97,   100,    37,    94,    37,   150,   151,
     151,    98,    99,    14,   101,   102,    14,   102,   160,    94,
    1146,    19,   102,   103,   102,   450,    27,     2,    16,   171,
     172,   456,    20,   151,    66,   102,   103,   102,   151,    14,
    1035,    55,   891,   173,   102,   187,    78,   189,   190,   704,
     192,   193,   194,   195,    16,   146,   147,   391,    22,   201,
      94,  1157,   284,    27,   155,   102,   208,   903,    16,   100,
      68,     3,    20,    94,    95,    94,   112,     3,   769,    27,
      55,   223,  1140,   151,     3,   298,   216,    64,   312,    15,
     721,    23,   723,    19,    92,   726,     3,    11,    24,    14,
     132,    19,   436,   129,     3,    23,    39,  1165,   129,   130,
     450,   109,   658,    22,   102,   103,   456,   450,    27,    16,
     146,   147,    25,   456,    23,    22,   339,    24,   341,   155,
      63,    64,    65,   169,   170,    86,     4,   151,     6,     7,
       8,     9,   284,    40,    38,    59,   382,    66,    22,   371,
     781,    45,   598,    72,   102,   103,   496,    15,   406,    66,
     196,    19,   113,   496,   400,    17,   689,    19,    16,    37,
     312,  1087,    20,    87,  1090,    27,   151,   425,   426,    27,
      19,   425,   426,    16,    14,   407,   408,   489,    27,    22,
     332,    24,    72,   824,   108,  1012,   165,   166,   164,   150,
     114,    19,     3,   621,   622,    17,    24,    40,    26,   178,
     208,    14,   189,   190,    14,   192,   193,   194,   195,    11,
     171,   172,    25,    14,     3,    25,    19,   519,    17,   371,
      19,     3,    19,    26,    25,    14,    19,   386,    27,   381,
     382,   445,    14,    26,   386,   386,   212,    25,  1084,    19,
      17,  1140,    19,    14,   102,   103,    26,   399,   400,   173,
     286,   391,   404,   404,   132,   407,   408,    59,   386,    22,
     901,   902,   414,   386,   416,   416,  1165,   490,   465,    16,
    1047,  1048,  1049,    20,   975,   415,   404,    19,   286,   431,
      27,   404,    19,    15,    26,    87,    14,    19,   416,    26,
     746,   912,   216,   416,     4,   936,     6,     7,     8,     9,
      12,   927,  1000,    19,    19,   406,   108,   104,   386,   285,
      26,    26,   114,   465,   466,   466,    19,   469,    22,   471,
      24,   473,   119,    26,   425,   426,   404,    37,   304,    16,
       4,   128,     6,     7,     8,     9,   568,    22,   416,   787,
       4,   493,     6,     7,     8,     9,   794,   579,   684,   146,
     147,   548,   688,    16,   156,   102,   103,    27,   155,  1077,
     396,   595,   386,    37,   598,   373,   374,   519,    78,   377,
     406,   173,    17,    37,    19,  1016,   804,     8,     9,   613,
     404,   602,    19,    17,   728,    19,   600,    17,   611,   425,
     426,    17,   416,    19,   381,    17,   548,    19,  1039,   551,
     436,   386,   542,    22,   544,   202,     2,    22,   642,   211,
     103,    19,   399,    21,   216,    19,   568,    21,    14,   404,
      70,    71,   132,    18,   918,   919,   920,   579,    63,    64,
      65,   416,    72,    73,    74,   587,   588,   589,   590,   591,
     592,   593,   594,   595,   103,   744,   598,   749,  1069,    17,
     602,   753,   908,    17,    17,    19,    19,   759,   132,    55,
    1053,   469,    17,   471,    19,   473,    12,   391,   132,    17,
      14,    19,    68,    14,    17,   451,    19,   768,   486,    88,
      89,   457,  1103,   171,   172,   493,  1042,   495,   464,   286,
      86,   415,    17,    17,  1159,    19,    92,   505,    94,  1139,
     935,   298,   130,   131,   465,   466,   658,   135,   136,   137,
      16,   519,   436,   672,    17,    16,    19,   113,    76,   671,
     672,   672,   681,    17,    17,    19,    19,    92,    93,   681,
     681,   567,   684,   684,   228,   229,   688,   688,   134,   425,
     426,  1035,   339,    19,   672,    75,  1102,   626,   627,   672,
      77,    96,    16,   681,   150,   151,   684,   709,   681,    12,
     688,   684,   912,   312,   160,   688,  1073,   491,  1101,   912,
     628,   629,    26,   370,   550,   171,   172,    26,   614,   635,
     636,   617,    26,    17,   508,   935,    19,   548,   728,   391,
     551,   187,   935,    15,   672,   392,    17,   749,    17,   396,
     891,   753,    15,   681,    10,   201,   684,   759,  1141,   406,
     688,    27,   208,   415,   916,    16,    16,    16,   542,    16,
     544,    26,    26,   946,    19,    23,    19,   223,   425,   426,
      26,    21,   608,    24,   786,   786,    24,  1131,    15,   235,
      15,    21,    24,   567,    17,   941,    17,    15,   672,     3,
       4,     5,     6,     7,     8,     9,    23,   681,   786,    24,
     684,    24,    24,   786,   688,    26,    15,   819,   704,   705,
      15,   707,   708,    26,    21,    23,    27,    21,    17,   275,
      17,    23,    25,    37,   918,   919,   920,   672,   284,   491,
      17,    24,    22,   490,    26,    24,   681,    19,    26,   684,
      17,    27,    26,   688,    17,    25,   508,    22,    19,    15,
      15,    15,    66,    15,   866,   867,   312,    15,    15,  1069,
    1176,   880,    15,    15,    78,    15,  1069,    15,   880,   880,
      17,    17,    17,    17,    61,    62,   970,   889,   944,    17,
     542,   749,   544,    25,    17,   753,    23,  1043,   724,   725,
      26,   759,   880,  1103,    23,    23,    19,   880,    24,    17,
    1103,    88,    24,    37,   916,    16,   918,   919,   920,    16,
     922,    38,    27,    16,    16,   371,    16,    16,   132,    16,
     704,   705,     3,     4,   820,     6,     7,     8,     9,    16,
     386,    17,  1094,  1095,    44,    20,    16,   833,    12,    17,
      41,  1035,   880,   779,   728,    17,    19,    26,   404,    24,
      17,   407,   408,    17,   611,    21,    37,   120,    17,    21,
     416,   829,    16,    16,  1058,  1059,  1060,  1061,  1062,  1063,
    1064,  1065,  1134,    21,    26,   431,    17,    24,   587,   588,
     589,   590,   591,   592,   593,   594,   595,    24,   113,   598,
      17,   887,    26,     2,   118,   416,   880,     3,     4,     5,
       6,     7,     8,     9,   134,   910,   406,   694,    92,   465,
     466,   885,  1174,   469,  1004,   471,  1079,   473,   466,   944,
    1182,   678,   944,  1035,   551,   951,   786,   944,   952,  1029,
    1042,    37,   944,   944,   944,   880,   820,   493,   671,   182,
     602,  1053,   910,   709,  1138,   922,   171,   172,   916,   493,
     707,   617,     3,     4,     5,     6,     7,     8,     9,   922,
      66,    19,   617,   519,  1066,   638,   728,   653,   904,  1081,
     637,   320,    78,   941,   971,   971,     4,     5,     6,     7,
       8,     9,  1094,  1095,   640,    -1,    37,   639,    -1,    -1,
    1102,    -1,   548,    -1,    -1,   551,    -1,     4,   934,     6,
       7,     8,     9,    -1,   560,  1001,   768,    -1,    -1,    37,
    1110,    -1,   568,    -1,    -1,    66,    -1,    -1,    25,  1131,
      -1,    -1,  1134,   579,    -1,    -1,   132,    78,  1140,  1140,
      37,   587,   588,   589,   590,   591,   592,   593,   594,   595,
      -1,    -1,   598,   927,     3,     4,   602,     6,     7,     8,
       9,    -1,  1140,  1165,  1165,    -1,     2,  1140,    -1,  1159,
     944,    -1,  1174,    -1,    -1,    11,    -1,    -1,    14,    15,
    1182,    -1,    -1,    -1,    -1,    -1,   833,  1165,    37,    -1,
    1076,   132,  1165,    -1,    -1,  1053,    -1,   971,   375,   376,
      -1,    -1,   379,   380,   319,    -1,    -1,    -1,   385,    -1,
      -1,    -1,    -1,    -1,   132,  1073,    -1,    66,    -1,    55,
     819,    -1,    -1,    59,    -1,    -1,   672,    -1,    -1,    -1,
      -1,    -1,    68,    -1,    -1,   681,  1094,  1095,   684,   891,
     887,    -1,   688,     3,     4,     5,     6,     7,     8,     9,
      86,    87,    -1,    -1,    -1,  1029,    92,    -1,    94,    -1,
      -1,    -1,    -1,   709,    -1,    -1,    -1,   866,   867,    -1,
     106,  1157,   108,    -1,    -1,   927,  1134,    37,   114,    -1,
      -1,    -1,    -1,   132,    -1,   121,    -1,    -1,    -1,   125,
     889,    -1,   944,   129,    -1,    -1,    -1,    -1,   134,    -1,
      -1,    -1,    -1,   749,    -1,    -1,    66,   753,    -1,    -1,
      -1,    -1,    -1,   759,   150,   151,  1174,    -1,    -1,    -1,
     156,    -1,    -1,    -1,  1182,   160,    -1,    -1,    -1,    -1,
     445,   446,    -1,    -1,    -1,    -1,  1110,   173,    -1,    -1,
     786,   787,    -1,    -1,    -1,    -1,    -1,    -1,   794,    -1,
      -1,    -1,   187,     4,     5,     6,     7,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,   204,    -1,
      -1,    -1,   132,   819,    -1,   211,    -1,  1029,    -1,    -1,
     216,    -1,    -1,    -1,    -1,  1159,    37,    -1,   223,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,   235,
       4,     5,     6,     7,     8,     9,    -1,     4,     5,     6,
       7,     8,     9,    -1,     4,    66,     6,     7,     8,     9,
     866,   867,    37,    -1,    -1,    -1,    -1,    78,    -1,  1076,
      -1,    -1,    -1,    37,   880,    -1,    -1,    -1,    -1,   275,
      37,    -1,    -1,   889,    -1,    -1,    -1,    37,    -1,   284,
       4,    66,     6,     7,     8,     9,    -1,     4,  1110,     6,
       7,     8,     9,    78,    -1,    -1,    -1,    -1,    -1,    -1,
     916,    -1,   918,   919,   920,    -1,   922,    -1,    -1,    -1,
      -1,   132,  1081,    37,    -1,   600,    -1,    -1,    78,    -1,
      37,   606,    -1,    -1,   609,    -1,    -1,   612,    -1,    -1,
      -1,    -1,    -1,    -1,   619,   341,   952,  1159,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,     3,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,   132,    -1,
      -1,    78,    -1,    -1,    -1,   132,   371,    -1,    -1,   654,
      25,    26,   132,     3,     4,     5,     6,     7,     8,     9,
     386,    -1,    37,    -1,    -1,   391,    16,    -1,   394,    -1,
      20,    -1,    -1,    -1,    -1,    25,    -1,    -1,   404,    -1,
      -1,    -1,   407,   408,    -1,    -1,    -1,    37,   414,   415,
     416,    66,    -1,    -1,    -1,   132,    -1,    72,    -1,  1035,
      -1,    76,    -1,    -1,     4,   431,     6,     7,     8,     9,
     436,    -1,   717,    -1,    -1,    -1,    66,  1053,    -1,    -1,
      20,     2,    72,    -1,    -1,    25,    76,   102,    -1,    -1,
      11,    -1,    -1,    14,    15,    -1,    -1,    37,    19,   465,
     466,    -1,    -1,    -1,    -1,  1081,     4,     5,     6,     7,
       8,     9,   102,   103,    -1,    -1,    -1,    -1,  1094,  1095,
     765,    -1,    -1,    -1,   769,   491,    -1,    25,   773,    -1,
     775,    -1,    72,    -1,    55,    -1,    76,    -1,    59,    37,
      38,    -1,   508,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    49,    50,    51,    52,  1131,     3,     4,  1134,     6,
       7,     8,     9,    -1,  1140,    86,    87,    -1,    66,    -1,
      -1,    92,    -1,    94,    -1,    -1,   542,    -1,   544,    -1,
      78,    -1,   548,    -1,    -1,   551,    -1,   108,    -1,  1165,
      37,    -1,    -1,   114,   560,    -1,    -1,    -1,  1174,    -1,
      -1,   567,    -1,   568,   125,    -1,  1182,    -1,    -1,    -1,
      -1,    -1,    -1,   134,   579,    -1,    -1,    -1,    -1,    66,
      -1,   587,   588,   589,   590,   591,   592,   593,   594,   150,
     151,    -1,    -1,    -1,   155,   156,   602,    -1,     3,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,   614,    -1,
      -1,   617,   173,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    -1,    -1,   630,   631,   632,   633,   634,
      -1,    -1,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,
     201,    -1,    -1,     4,     5,     6,     7,     8,     9,    -1,
     211,    -1,   658,    -1,    -1,   216,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    -1,    25,   671,   672,     4,     5,     6,
       7,     8,     9,    78,   235,   681,    37,    38,   684,    16,
      -1,    -1,   688,    44,    -1,    46,    47,    48,    25,    -1,
     975,     4,    -1,     6,     7,     8,     9,    -1,   704,   705,
      37,    38,   708,   988,   709,    66,    -1,    44,    -1,    46,
      47,    48,    25,    -1,   275,    -1,    -1,    78,    -1,    -1,
      -1,    -1,   728,    -1,    37,    -1,    -1,  1012,    -1,    66,
      -1,    -1,  1017,  1018,    11,    -1,    -1,    -1,    15,    -1,
      -1,    78,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,   768,    76,    -1,    -1,   127,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,    -1,
     786,   787,    59,    -1,    -1,    -1,    -1,    -1,   794,     3,
       4,    68,     6,     7,     8,     9,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    -1,  1092,    22,    86,
      87,    25,    -1,   819,   820,    92,    -1,    94,    -1,    -1,
      -1,    25,    26,    37,    -1,   386,    -1,    -1,    -1,    -1,
     391,   108,    -1,    37,    -1,    -1,    -1,   114,    -1,    -1,
      -1,   118,    -1,   404,    -1,   406,    -1,    -1,    -1,    -1,
      -1,   128,   129,   414,   415,   416,    -1,   134,    -1,    11,
     866,   867,    66,    15,    -1,    -1,   871,   872,    72,    -1,
     431,    -1,    76,   150,   880,   436,    -1,    -1,    -1,   156,
      -1,    -1,   159,   889,    -1,   891,    -1,     4,    -1,     6,
       7,     8,     9,    -1,    -1,    -1,   173,    -1,   102,    16,
      -1,    -1,    -1,    20,   465,   466,    -1,    59,    25,    -1,
       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
      37,   927,    -1,    -1,   201,   202,    -1,   204,    -1,    -1,
     491,    25,    -1,    -1,   211,    87,    -1,    -1,   944,   216,
      -1,    -1,    -1,    37,    38,    -1,   952,   508,    -1,    -1,
      -1,    -1,   104,    -1,   106,    72,   108,    -1,   235,    76,
      -1,    -1,   114,    -1,    -1,   971,    -1,   119,    -1,   121,
      -1,    -1,    66,   125,    -1,    -1,   128,    -1,    -1,    -1,
      -1,   542,    -1,   544,    78,   102,   103,   548,    -1,    -1,
     551,    -1,    -1,    -1,    -1,  1001,    42,    43,   275,   560,
      -1,    -1,    -1,    49,   156,    -1,   567,    -1,    54,    55,
      56,    57,    -1,    -1,    60,    61,    62,    63,    64,    65,
      -1,   173,    -1,  1029,    -1,    -1,   587,   588,   589,   590,
     591,   592,   593,   594,    -1,    -1,  1042,    -1,    -1,    -1,
      -1,   602,    -1,     3,     4,     5,     6,     7,     8,     9,
     202,    -1,   204,    -1,    -1,    -1,    16,    -1,    -1,   211,
      -1,    -1,    -1,    -1,   216,    25,    26,    -1,     3,     4,
       5,     6,     7,     8,     9,  1081,    -1,    37,    -1,    -1,
      -1,    16,   128,    18,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    -1,  1102,   658,    -1,    -1,
      -1,    -1,    37,    -1,  1110,    -1,    66,    -1,    -1,    -1,
     671,   672,    72,    -1,   391,    -1,    76,    -1,    -1,   396,
     681,    -1,    -1,   684,    -1,  1131,    -1,   688,    19,    -1,
      -1,    66,    -1,    -1,  1140,    -1,    -1,    72,   415,    -1,
      -1,    76,    24,   704,   705,    -1,   298,    29,    -1,    40,
     427,  1157,    -1,  1159,   431,    -1,    -1,     3,     4,  1165,
       6,     7,     8,     9,    -1,    -1,    -1,   728,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    25,
      -1,    -1,    -1,    -1,    11,    16,    -1,   339,   465,   341,
      -1,    37,    -1,    -1,    25,    -1,    -1,    -1,    80,    81,
      82,    83,    84,    85,    86,    87,    37,   768,    90,    91,
      -1,    -1,    -1,   490,   491,    97,    -1,    -1,   370,    -1,
      66,    -1,    -1,    -1,    -1,   786,   787,    -1,    -1,    -1,
      -1,   508,    59,   794,    -1,    66,    -1,    -1,   129,   391,
     392,    72,   394,    -1,    -1,    76,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,   146,   147,    -1,   819,   820,
      87,    -1,   414,   415,   155,   542,    -1,   544,    25,    -1,
      -1,   548,    -1,    -1,   551,    -1,    -1,   104,    -1,   106,
      37,   108,    -1,   560,    -1,    -1,    -1,   114,    -1,    -1,
      -1,   118,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   128,   129,    -1,    -1,   866,   867,    -1,    -1,    66,
     587,   588,   589,   590,   591,   592,   593,   594,    -1,   880,
      -1,    -1,    -1,    -1,    -1,   602,    -1,    -1,   889,   156,
     891,    -1,   159,    -1,    -1,    -1,    -1,    -1,   490,   491,
       4,    -1,     6,     7,     8,     9,   173,    -1,    -1,    -1,
      -1,    -1,    16,    -1,    -1,   246,   508,    42,    43,    -1,
      -1,    25,    -1,    -1,    49,    -1,   927,    -1,    -1,    54,
      55,    56,    57,    37,    -1,    60,    61,    62,    63,    64,
      65,    -1,    -1,   944,   211,    -1,    -1,   664,    -1,   216,
     542,   952,   544,    -1,    -1,   286,   287,    -1,    -1,    -1,
      -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,    72,    -1,
     971,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,    -1,    -1,   327,    -1,    -1,    -1,
    1001,    -1,    -1,   128,    -1,    -1,    -1,    -1,    -1,   125,
      -1,   728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   611,
       3,     4,     5,     6,     7,     8,     9,    -1,  1029,    -1,
      -1,   298,    -1,    16,     3,     4,     5,     6,     7,     8,
       9,  1042,    25,    -1,   160,    -1,    -1,    -1,    -1,    -1,
      -1,   768,    -1,    -1,    37,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   396,   658,    -1,    37,    -1,
     787,   187,   339,    -1,   341,   406,    -1,   794,    -1,   671,
    1081,    -1,    -1,    66,    -1,    -1,   678,    -1,    -1,    72,
      -1,    -1,    -1,    76,   425,   426,    -1,    66,    -1,    -1,
      -1,  1102,   819,    -1,    -1,   436,    -1,   223,    -1,  1110,
      -1,    -1,    -1,    -1,    -1,   832,    -1,    -1,    -1,   836,
      -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,   396,
    1131,    -1,    -1,    -1,    -1,    -1,   728,    -1,    -1,  1140,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   415,   866,
     867,    -1,    -1,    -1,    -1,    -1,  1157,    -1,  1159,    -1,
     427,    -1,    -1,    -1,  1165,    -1,    -1,    -1,   284,    -1,
      -1,    -1,   889,    -1,   891,    -1,   768,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     927,    -1,    -1,    16,    17,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,   944,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   952,   567,    -1,    -1,    -1,
      -1,   508,    -1,   574,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    61,    62,
      -1,    64,    65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   542,    -1,   544,    -1,    -1,
      -1,    -1,    -1,   614,  1001,    88,   617,    -1,    -1,    -1,
      -1,   407,   408,    -1,    -1,    -1,    -1,    -1,   414,   891,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1029,    -1,    -1,   431,    -1,    -1,    -1,    -1,
      -1,    -1,   125,    -1,    -1,    -1,    -1,   130,   131,    -1,
      -1,    -1,   135,   136,   137,   927,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   944,    -1,   157,    -1,    -1,   160,    -1,  1076,
      -1,    -1,    -1,    -1,  1081,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   704,   705,    -1,   707,   708,    -1,    -1,
      -1,    -1,    -1,    -1,   187,    -1,   189,   190,    -1,   192,
     193,   194,   195,  1110,    -1,    -1,    -1,   664,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1131,    -1,    -1,    -1,    -1,    -1,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1029,    -1,    -1,
    1157,    -1,  1159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1042,    -1,   568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   728,    -1,   579,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   587,   588,   589,   590,   591,   592,   593,   594,   595,
      -1,   284,   598,    -1,    -1,    -1,    -1,    -1,    -1,   820,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   830,
      -1,   768,   833,    -1,    -1,    -1,    -1,    -1,    -1,   312,
    1102,    -1,    16,    17,    -1,    -1,    -1,    -1,  1110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   658,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   671,   887,    61,    62,    -1,
      64,    65,    -1,    -1,    -1,   832,    -1,  1159,   371,   836,
      -1,    -1,   375,   376,    -1,    -1,   379,   380,   381,   382,
      -1,    -1,   385,    -1,    88,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   709,    -1,    -1,   399,   400,    -1,    -1,
      -1,    -1,    -1,    -1,   407,   408,    -1,    -1,    -1,    -1,
      -1,   414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    -1,   891,    -1,   130,   131,   431,    -1,
      -1,   135,   136,   137,    16,    17,    -1,    -1,    -1,   442,
     971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   986,    -1,    -1,    -1,    -1,
     927,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1001,    -1,    -1,    -1,    -1,    -1,    -1,   944,    -1,    61,
      62,    -1,    64,    65,    -1,   189,   190,    -1,   192,   193,
     194,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   819,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   541,    -1,
      -1,    -1,    -1,   125,    -1,  1076,    -1,    -1,   130,   131,
     866,   867,    -1,   135,   136,   137,    -1,    -1,    -1,    -1,
      -1,    -1,  1029,    -1,    -1,   568,    -1,   570,    -1,    -1,
      -1,    -1,    -1,   889,    -1,    -1,   579,    -1,   581,    -1,
      -1,    -1,    -1,    -1,   587,   588,   589,   590,   591,   592,
     593,   594,   595,    -1,    -1,   598,    -1,    -1,    -1,    -1,
      -1,    -1,   918,   919,   920,    -1,    -1,   189,   190,  1076,
     192,   193,   194,   195,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1157,    -1,   332,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1110,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   658,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   671,    -1,
      -1,   375,   376,    -1,    -1,   379,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1159,    -1,    -1,   399,   400,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   709,    -1,    -1,    -1,
     414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   721,  1035,
     723,    -1,    -1,   726,    -1,    -1,  1042,    -1,    -1,    -1,
      -1,    -1,    -1,     4,     5,     6,     7,     8,     9,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     332,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1081,    37,    38,    -1,    -1,
      -1,    -1,    -1,    44,    -1,    46,    47,    48,   781,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1102,    -1,    -1,    -1,
      -1,    -1,    -1,   375,   376,    66,    -1,   379,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1131,   819,   399,   400,    -1,
      -1,   824,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   414,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   866,   867,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,   889,    -1,    -1,    -1,
      25,    26,    -1,    -1,    -1,    -1,    -1,    -1,   901,   902,
      -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,   918,   919,   920,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    -1,   936,    -1,    -1,    -1,    72,    -1,    -1,
      -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   658,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   671,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1016,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1035,    -1,    -1,    -1,  1039,    -1,    -1,  1042,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    25,    -1,    -1,   658,    -1,  1081,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    -1,   671,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1102,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    -1,    -1,    76,    -1,    78,    79,  1131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,
      -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
     132,    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    31,    32,    33,    34,    35,    36,    37,    38,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    66,    67,    68,    69,
      70,    71,    72,    -1,    25,    -1,    76,    -1,    78,    79,
      31,    32,    33,    34,    35,    36,    37,    38,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    66,    67,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    -1,    78,    79,    -1,
      -1,    -1,   132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1042,    -1,
      -1,   132,     4,     5,     6,     7,     8,     9,    -1,    -1,
      -1,    -1,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,
      -1,    -1,    44,    -1,    46,    47,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1102,    -1,
      -1,    -1,    -1,    -1,    66,    -1,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1042,    -1,    -1,    -1,    -1,    -1,    -1,   129,   130,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    22,
      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,
    1102,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    -1,    -1,    -1,    -1,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,    -1,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
      -1,    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    -1,    78,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,     3,     4,     5,     6,     7,
       8,     9,    -1,    -1,    -1,    -1,   127,   128,    16,    -1,
      -1,    -1,    -1,    -1,    -1,    23,    -1,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
      38,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    -1,    -1,   127,
     128,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    -1,    -1,    -1,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,     3,     4,     5,     6,     7,     8,     9,
      -1,    -1,    -1,    -1,   127,   128,    16,    -1,    -1,    -1,
      -1,    -1,    22,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      -1,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    -1,    -1,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,    -1,    76,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,     3,     4,     5,     6,
       7,     8,     9,    -1,    -1,    -1,    -1,   127,   128,    16,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    26,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    43,    44,    45,    46,
      47,    48,    49,    -1,    -1,    -1,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    76,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,     3,
       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
     127,   128,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    -1,    -1,    -1,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    76,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
      -1,    -1,    -1,   127,   128,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    -1,
      -1,    -1,    -1,    54,    55,    56,    57,    -1,    -1,    60,
      61,    62,    63,    64,    65,    66,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,    76,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,     4,     5,     6,     7,     8,     9,
      -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    18,    -1,
      -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    54,    55,    56,    57,    -1,    -1,
      60,    61,    62,    63,    64,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     4,     5,     6,     7,
       8,     9,    -1,    -1,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,    -1,    25,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,    37,
      38,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    -1,    -1,    -1,    -1,    54,    55,    56,    57,
      -1,    -1,    60,    61,    62,    63,    64,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     4,     5,     6,
       7,     8,     9,    -1,    -1,    -1,    -1,    -1,    15,   127,
     128,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      37,    38,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    -1,    -1,    -1,    -1,    54,    55,    56,
      57,    -1,    -1,    60,    61,    62,    63,    64,    65,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,
       5,     6,     7,     8,     9,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     127,   128,    37,    38,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    54,
      55,    56,    57,    -1,    -1,    60,    61,    62,    63,    64,
      65,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      14,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   127,   128,    68,    69,    70,    71,    72,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    -1,    -1,    16,    -1,    -1,    -1,    -1,    -1,    22,
      -1,    -1,    25,    -1,    -1,   129,   130,    -1,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,
      -1,    44,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      -1,    -1,    -1,    76,    -1,    78,    79,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    98,    99,    -1,    -1,    -1,
      -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,    -1,    -1,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
      -1,    -1,    -1,    44,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    -1,    -1,    76,    -1,    78,    79,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,    99,    -1,
      -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    31,    32,    33,    34,    35,    36,    37,    38,
      -1,    -1,    -1,    -1,    -1,    44,    -1,    46,    47,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    -1,    -1,    -1,    76,    -1,    78,
      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    98,
      99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
      -1,    -1,    -1,    -1,    -1,    22,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    -1,    -1,    16,    66,
      67,    68,    69,    70,    71,    72,    -1,    25,    -1,    76,
      -1,    78,    79,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    66,    67,
      68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    -1,
      78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    -1,    -1,
      16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      -1,    -1,    -1,    -1,    -1,    31,    32,    33,    34,    35,
      36,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
      66,    67,    68,    69,    70,    71,    72,    -1,    25,    -1,
      76,    -1,    78,    79,    31,    32,    33,    34,    35,    36,
      37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    98,    99,    -1,    -1,    -1,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    66,
      67,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
      -1,    78,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    98,    99,    -1,    -1,    -1,    -1,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    -1,    -1,    -1,    -1,    -1,    31,    32,    33,    34,
      35,    36,    37,    38,    -1,    -1,     4,     5,     6,     7,
       8,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    37,
      38,    76,    -1,    78,    79,    -1,    44,    -1,    46,    47,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    98,    99,    63,    64,    65,    66,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned short yystos[] =
{
       0,   136,   137,     0,     3,     4,     5,     6,     7,     8,
       9,    16,    25,    26,    37,    38,    42,    43,    44,    45,
      46,    47,    48,    49,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    72,    76,
      78,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   127,   128,   141,   144,   146,   147,   148,   149,
     150,   155,   156,   157,   158,   161,   162,   163,   164,   169,
     181,   182,   183,   184,   185,   187,   189,   192,   193,   195,
     196,   197,   203,   212,   215,   218,   222,   225,   226,   229,
     244,   252,   256,   279,   285,   291,   293,   300,   301,   305,
     306,   354,   356,   357,   358,   360,   366,   367,    16,    37,
     162,   211,   217,   221,   225,   228,   285,   354,   357,   358,
     359,   366,    14,   141,   146,   295,   162,   356,   358,   366,
      42,    43,    56,   151,   152,   155,   156,   226,   151,    22,
     141,   157,   182,   252,   362,   363,   366,   367,    37,    12,
      37,   204,    16,    64,    38,    45,   143,   227,   252,    16,
      14,   132,   146,    26,   102,   209,   210,   213,   214,   219,
     220,   223,   224,   225,   228,   260,   261,   262,   266,   267,
     268,   269,   270,   271,   272,   151,   151,    14,    25,    42,
      43,   153,   155,   156,   161,   226,   153,   154,   141,   170,
     171,   285,   358,   360,   366,    25,    22,   205,   245,    16,
      20,    27,   102,   103,   216,   286,   150,   239,   240,   241,
     242,   211,   151,    14,    25,   141,   165,   167,   168,   171,
     360,    14,    15,    19,    24,    46,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   129,   130,   161,   256,   280,   281,   282,   283,
     292,   360,   405,   406,    14,    72,    37,    78,   132,   162,
     279,   354,   367,    78,   132,   162,   279,   354,   358,   211,
     141,    17,    16,    20,   102,   103,   216,   286,    10,    11,
      12,    13,    16,    31,    32,    33,    34,    35,    36,    39,
      67,    68,    69,    70,    71,    72,    76,    78,    79,    98,
      99,   138,   161,   239,   243,   320,   352,   353,   356,   358,
     360,   366,   368,   369,   372,   373,   374,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   404,   406,   211,    78,   354,   162,   132,   162,
     358,    14,    15,    37,    38,    42,    43,    44,   127,   155,
     156,   159,   161,   162,   163,   226,   296,   297,   298,   299,
     307,   308,   358,   361,   366,   162,   358,   152,   152,   158,
     161,   152,   152,   152,   190,    22,    24,    14,    14,    22,
     132,   363,   132,   363,   295,   150,    22,   146,    12,    16,
     192,   194,   362,   364,   365,   366,   367,   357,   359,   226,
     354,   160,   161,   163,   226,   230,   231,   302,   303,   304,
     360,   388,   227,   205,   205,    16,    24,   248,   248,    16,
      20,   102,   103,   216,   286,    16,    20,   102,   103,   216,
     286,   243,   243,   211,    17,    19,    16,   205,    40,   245,
     312,   245,   312,   245,   303,   153,   153,   153,   153,   153,
     153,    27,   216,    22,   172,   175,   176,   175,   173,   174,
     358,    19,    26,    22,    40,    45,   115,   116,   117,   119,
     120,   121,   122,   123,   124,   125,   126,   141,   149,   193,
     195,   196,   197,   246,   309,   325,   326,   327,   328,   329,
     330,   331,   342,   348,   349,   350,   351,   397,   400,   401,
     161,   360,   395,   396,   402,   403,    10,   288,   289,   290,
     359,   227,    16,   211,   225,   233,   234,   235,   237,   238,
      17,    19,    18,   142,   303,    22,    27,   166,   253,   254,
     274,   253,   253,   360,   103,   103,   360,   284,    14,   303,
     227,   367,   252,   252,    78,   162,   279,   354,    17,    14,
     403,   227,    12,   139,   230,   328,   400,    14,    94,    14,
      94,    14,    94,    14,    94,    16,   397,   398,    16,   372,
      16,   375,   376,   384,   384,   384,    16,   102,    17,    16,
     102,   358,    16,    20,    30,    98,    99,   101,   102,    19,
     384,    28,   100,    72,    73,    74,    70,    71,    88,    89,
      15,    94,    95,   129,   130,    92,    93,    76,    75,    77,
      96,    24,    29,    80,    81,    82,    83,    84,    85,    86,
      87,    90,    91,    97,   399,   384,   162,   303,    14,   140,
     141,   151,   151,   140,    16,   151,   151,   153,   154,   151,
     146,    19,   296,   211,   234,   162,   132,   162,   358,   153,
     154,   144,   145,   191,   186,   194,   303,   303,   188,   297,
      26,   211,   145,   198,    12,    26,   365,   365,    26,    17,
     161,   231,   232,   360,    16,   225,   234,   358,   366,    19,
      15,    39,   321,   322,    26,    26,   369,    22,   249,   397,
     403,   227,   403,   227,    17,    17,   227,   239,   150,   212,
      26,   313,   246,   246,   246,    15,    23,   141,   177,   178,
     179,   180,   175,   208,   211,   330,   310,   141,   402,    27,
      16,    16,    16,   344,    16,    26,    26,   141,   401,    27,
     206,   207,   208,   325,    23,    19,    26,    21,    19,    16,
     102,   322,   233,    24,   234,    24,   239,    16,    20,   102,
     103,   227,    18,   242,    15,   255,   257,    49,    50,    51,
      52,   275,   276,   277,   278,   360,   225,   303,    15,   252,
     303,    21,   322,   139,    17,    17,    17,   230,   230,   230,
     230,   230,   230,   230,   230,   230,   400,   230,   369,    16,
     281,   377,   369,   370,   227,   370,   132,   370,   400,    37,
      78,   132,   355,   358,   371,   132,   355,   371,   397,   384,
     384,   385,   385,   385,   386,   386,   387,   387,   388,   388,
     388,   388,   388,   132,   389,   132,   389,   390,   391,   392,
     393,   400,   394,   397,    15,   297,    24,    24,   354,   298,
     146,    24,    24,   162,    23,   191,    26,    15,    15,   191,
     296,    26,    23,    17,    19,    27,   198,   358,   304,    16,
     102,    27,   287,    17,   249,   250,   251,    21,   322,    21,
     322,   227,   227,   322,    17,   211,   234,    17,   287,    25,
      19,    23,    24,   248,    23,   328,    27,   325,   332,   335,
     343,   325,   346,    26,    26,   325,    26,    19,   397,   288,
     370,    17,   397,   397,    17,   236,   227,   322,    25,    23,
      26,    37,    53,    59,   149,   195,   215,   258,   278,   294,
     277,    22,    19,   277,    15,    15,   384,    15,    15,    15,
      15,    15,    15,    15,    15,    17,    17,    17,    17,   230,
      20,   225,   378,   379,   380,    16,   102,   381,   382,    17,
     322,    17,    17,    21,   252,   354,    78,   354,    27,    25,
      15,   230,   230,    17,   388,   388,    23,    23,   146,    26,
      12,    20,   199,   200,   202,   199,    17,   230,   323,   324,
     288,    23,    19,   322,   322,   287,   227,    24,    24,   247,
     328,    23,   179,   402,   311,   325,   231,   338,   339,   340,
     400,   338,   338,   345,   327,   347,   351,   208,    17,   227,
     403,   322,   295,    37,    26,   213,   214,   264,   265,   266,
     267,   269,   271,   245,   259,    27,   255,   276,    16,    16,
      16,    16,    16,    16,    16,    16,    17,   400,   379,    20,
     370,   252,   397,    44,   139,   353,   358,    16,   201,   200,
      26,    19,    17,   249,   322,   397,   397,   314,    41,   315,
     317,    17,    24,   211,    17,    17,   120,   338,   341,   322,
      21,   297,   295,    24,   273,   273,   259,   259,   259,   246,
      19,    26,   400,   400,   400,   400,   400,   400,   400,   400,
     382,    21,   402,    17,   140,    21,   385,   201,   230,   287,
     315,    16,   315,   316,   333,   397,   325,   325,    16,    26,
     296,   297,   402,    26,    26,    26,   211,   263,    17,    17,
      17,    17,    17,    17,    17,    17,    21,    24,    17,   231,
     319,   325,   400,   401,   258,   296,   273,   353,    18,   211,
     233,    17,   334,    17,    17,   258,   318,   118,   336,    26,
     325,   328,   337,   325
};

#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrlab1


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)         \
  Current.first_line   = Rhs[1].first_line;      \
  Current.first_column = Rhs[1].first_column;    \
  Current.last_line    = Rhs[N].last_line;       \
  Current.last_column  = Rhs[N].last_column;
#endif

/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (cinluded).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylineno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylineno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

#endif /* !YYERROR_VERBOSE */



#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM);
# else
int yyparse ();
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;



#define YYPOPSTACK   (yyvsp--, yyssp--)

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* When reducing, the number of symbols on the RHS of the reduced
     rule.  */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;


  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 470 "c++.y"
    { PARSER_INIT(); }
    break;

  case 3:
#line 471 "c++.y"
    { PARSER_DONE(); }
    break;

  case 4:
#line 477 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 5:
#line 478 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 6:
#line 479 "c++.y"
    { yyval = type_string(); }
    break;

  case 7:
#line 480 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 10:
#line 490 "c++.y"
    { PUSH_AUTO_ID(); }
    break;

  case 11:
#line 491 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 12:
#line 495 "c++.y"
    { PASS_ID(); yyval = yyvsp[0]; }
    break;

  case 14:
#line 500 "c++.y"
    { DEFINE_VA_LIST(); }
    break;

  case 33:
#line 559 "c++.y"
    { yyval = POP_TYPE();
					  GNU_ANONYMOUS_UNION(yyval);
					  is_type_def = 0; }
    break;

  case 34:
#line 564 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 35:
#line 567 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 36:
#line 570 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 37:
#line 572 "c++.y"
    { DEFINE(variable_c); }
    break;

  case 39:
#line 609 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 40:
#line 614 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 41:
#line 616 "c++.y"
    { yyval = yyvsp[0];
					  is_type_def = 1; }
    break;

  case 42:
#line 619 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 43:
#line 621 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 44:
#line 623 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 45:
#line 626 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 46:
#line 630 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 47:
#line 636 "c++.y"
    { yyval = type_simple(void_t);
					  SET_CV(yyval); }
    break;

  case 48:
#line 641 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 49:
#line 646 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 52:
#line 657 "c++.y"
    { is_type_def = 1; }
    break;

  case 56:
#line 672 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 57:
#line 675 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 58:
#line 678 "c++.y"
    { yyval = yyvsp[0]; is_type_def = 1; }
    break;

  case 59:
#line 681 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 60:
#line 684 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 61:
#line 687 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 62:
#line 690 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 63:
#line 701 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 64:
#line 703 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 67:
#line 709 "c++.y"
    { is_static = 1; }
    break;

  case 72:
#line 717 "c++.y"
    { is_virtual = 1; }
    break;

  case 74:
#line 722 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 75:
#line 743 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID();
					  yyval.nested = yyvsp[0].nested; }
    break;

  case 76:
#line 745 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 77:
#line 747 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 78:
#line 756 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 79:
#line 757 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 80:
#line 759 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 81:
#line 770 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 82:
#line 771 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 83:
#line 772 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 84:
#line 773 "c++.y"
    { yyval = type_simple(void_t);
					  SET_CV(yyval); }
    break;

  case 85:
#line 792 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 86:
#line 793 "c++.y"
    { yyval = type_simple(char_t); }
    break;

  case 87:
#line 794 "c++.y"
    { yyval = type_simple(bool_t); }
    break;

  case 88:
#line 795 "c++.y"
    { yyval = type_simple(short_t); }
    break;

  case 89:
#line 796 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 90:
#line 797 "c++.y"
    { yyval = type_simple(int_t); }
    break;

  case 91:
#line 798 "c++.y"
    { yyval = type_simple(int_t);
					  yyval = type_signed(yyval); }
    break;

  case 92:
#line 800 "c++.y"
    { yyval = type_simple(int_t);
					  yyval = type_unsigned(yyval); }
    break;

  case 93:
#line 802 "c++.y"
    { yyval = type_simple(float_t); }
    break;

  case 94:
#line 803 "c++.y"
    { yyval = type_simple(double_t); }
    break;

  case 95:
#line 804 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 101:
#line 827 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 102:
#line 828 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 104:
#line 851 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 105:
#line 852 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-1]); }
    break;

  case 106:
#line 853 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 107:
#line 866 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 108:
#line 867 "c++.y"
    { yyval = DEFINE(class_c); }
    break;

  case 109:
#line 884 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 110:
#line 885 "c++.y"
    { yyval = POP_TYPE();
					  yyval = type_connect(yyval, POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 111:
#line 897 "c++.y"
    { yyval = POP_TYPE();
					  yyval.nested = yyvsp[0].nested;
					  yyval = type_connect(yyval, POP_TYPE());
					  PUSH_TYPE(yyval); }
    break;

  case 112:
#line 904 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 113:
#line 932 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 114:
#line 933 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-1]); }
    break;

  case 115:
#line 934 "c++.y"
    { yyval = yyvsp[0];
#ifdef USING_ENUMS
					  PUSH_TYPE(yyvsp[0]); USING();
#endif /* USING_ENUMS */
					}
    break;

  case 116:
#line 942 "c++.y"
    { PUSH_AUTO_ID(); }
    break;

  case 117:
#line 956 "c++.y"
    { yyval = yyvsp[0];
#ifndef USING_ENUMS
					  PUSH_TYPE(yyvsp[0]); USING();
#endif /* USING_ENUMS */
					}
    break;

  case 118:
#line 961 "c++.y"
    { PUSH_TYPE(type_enum());
					  yyval = DEFINE(enum_c); }
    break;

  case 119:
#line 982 "c++.y"
    { yyval = yyvsp[0];
#ifndef USING_ENUMS
					  PUSH_TYPE(yyvsp[0]); USING();
#endif /* USING_ENUMS */
					}
    break;

  case 120:
#line 987 "c++.y"
    { yyval = type_connect(POP_TYPE(),
							type_enum());
					  POPFREE_ID(); }
    break;

  case 121:
#line 993 "c++.y"
    { POPFREE_TYPE(); }
    break;

  case 122:
#line 1001 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 123:
#line 1011 "c++.y"
    { PUSH_TYPE(type_enum());
					  yyval = type_copy(ENTER(enum_c)); }
    break;

  case 124:
#line 1020 "c++.y"
    { LEAVE(); }
    break;

  case 125:
#line 1022 "c++.y"
    { LEAVE(); }
    break;

  case 126:
#line 1023 "c++.y"
    { LEAVE(); }
    break;

  case 131:
#line 1051 "c++.y"
    { PUSH_TYPE(type_simple(int_t));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 134:
#line 1062 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 139:
#line 1080 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  ENTER(namespace_c); }
    break;

  case 140:
#line 1082 "c++.y"
    { LEAVE(); type_dispose(yyvsp[-4]); }
    break;

  case 141:
#line 1092 "c++.y"
    { ENTER(namespace_c); }
    break;

  case 142:
#line 1093 "c++.y"
    { LEAVE(); }
    break;

  case 143:
#line 1114 "c++.y"
    { PUSH_ID(UNNAMED_ID);
					  PUSH_TYPE(type_simple(void_t));
					  yyvsp[0] = ENTER(namespace_c);
					  PUSH_TYPE(yyvsp[0]); }
    break;

  case 144:
#line 1118 "c++.y"
    { LEAVE(); USING(); }
    break;

  case 146:
#line 1126 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 147:
#line 1131 "c++.y"
    { POPFREE_ID();
					  type_dispose(DEFINE(link_c));
					  type_dispose(yyvsp[-3]); }
    break;

  case 150:
#line 1148 "c++.y"
    { USING_ID(yyvsp[-1]); }
    break;

  case 151:
#line 1153 "c++.y"
    { USING(); POPFREE_ID(); }
    break;

  case 162:
#line 1197 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 163:
#line 1201 "c++.y"
    { type_dispose(yyvsp[-1]); POPFREE_ID(); }
    break;

  case 164:
#line 1226 "c++.y"
    { language_set_local(lang_global); }
    break;

  case 165:
#line 1228 "c++.y"
    { language_set_local(lang_global); }
    break;

  case 166:
#line 1237 "c++.y"
    { language_set_local(
						language_from_name(
							last_string)); }
    break;

  case 173:
#line 1264 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 174:
#line 1269 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 175:
#line 1274 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 176:
#line 1299 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 177:
#line 1300 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 178:
#line 1302 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 179:
#line 1304 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 180:
#line 1312 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 181:
#line 1314 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 182:
#line 1316 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 183:
#line 1318 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 184:
#line 1325 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 185:
#line 1326 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 186:
#line 1328 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 187:
#line 1330 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 188:
#line 1338 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 189:
#line 1340 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 190:
#line 1342 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 191:
#line 1350 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 193:
#line 1376 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 194:
#line 1380 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]);
					  SET_FSPEC(yyval); }
    break;

  case 195:
#line 1384 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0);
					  SET_FSPEC(yyval); }
    break;

  case 196:
#line 1387 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 197:
#line 1389 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 198:
#line 1390 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 199:
#line 1399 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 200:
#line 1402 "c++.y"
    { LEAVE(); yyval = yyvsp[-4];
					  SET_FSPEC(yyval); }
    break;

  case 201:
#line 1405 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0);
					  SET_FSPEC(yyval); }
    break;

  case 202:
#line 1408 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 203:
#line 1411 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 204:
#line 1412 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 205:
#line 1416 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 206:
#line 1420 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]);
					  SET_FSPEC(yyval); }
    break;

  case 207:
#line 1424 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0);
					  SET_FSPEC(yyval); }
    break;

  case 208:
#line 1427 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 209:
#line 1430 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 210:
#line 1437 "c++.y"
    { LEAVE();
					  yyval = TYPE_FN_OR_CTOR(yyvsp[-4], yyvsp[-3]);
					  SET_FSPEC(yyval); }
    break;

  case 211:
#line 1441 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0);
					  SET_FSPEC(yyval); }
    break;

  case 212:
#line 1444 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 213:
#line 1447 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 214:
#line 1449 "c++.y"
    { yyval = yyvsp[-1];
					  type_dispose(yyvsp[-3]);
					  LEAVE(); }
    break;

  case 215:
#line 1455 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 216:
#line 1461 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 217:
#line 1467 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 218:
#line 1473 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS_AT(yyvsp[-1])); }
    break;

  case 219:
#line 1479 "c++.y"
    { is_const = 0; }
    break;

  case 221:
#line 1482 "c++.y"
    { scope_stmt_reset(); is_const = 0; }
    break;

  case 222:
#line 1486 "c++.y"
    { is_const = 1; }
    break;

  case 227:
#line 1505 "c++.y"
    { yyval = yyvsp[0]; yyval.ref_depth = 0; }
    break;

  case 228:
#line 1512 "c++.y"
    { yyval = yyvsp[0]; yyval.ref_depth = 0; }
    break;

  case 229:
#line 1526 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 230:
#line 1537 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 231:
#line 1541 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 232:
#line 1542 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 233:
#line 1547 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 234:
#line 1548 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 235:
#line 1552 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 236:
#line 1553 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 237:
#line 1562 "c++.y"
    { LEAVE(); yyval = yyvsp[-4];
					  SET_FSPEC(yyval); }
    break;

  case 238:
#line 1567 "c++.y"
    { yyval = type_parametrized(yyvsp[-3], 0);
					  SET_FSPEC(yyval); }
    break;

  case 239:
#line 1570 "c++.y"
    { yyvsp[-1] = type_reference(yyvsp[-1]); }
    break;

  case 240:
#line 1572 "c++.y"
    { type_dispose(yyvsp[-1]); yyval = yyvsp[-4]; }
    break;

  case 241:
#line 1574 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 242:
#line 1576 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 243:
#line 1581 "c++.y"
    { yyval = type_parametrized(yyvsp[-1],
							ENTER_PARAMS()); }
    break;

  case 244:
#line 1586 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 245:
#line 1587 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 247:
#line 1596 "c++.y"
    { DEFINE_VA_LIST(); }
    break;

  case 252:
#line 1619 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 253:
#line 1623 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 254:
#line 1627 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_NUM_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 255:
#line 1632 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_NUM_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 256:
#line 1644 "c++.y"
    { yyval.nested = 0; }
    break;

  case 257:
#line 1645 "c++.y"
    { yyval.nested = 1; }
    break;

  case 258:
#line 1671 "c++.y"
    { is_type_def = 0; }
    break;

  case 259:
#line 1673 "c++.y"
    { is_type_def = 0; }
    break;

  case 260:
#line 1675 "c++.y"
    { is_type_def = 0; }
    break;

  case 262:
#line 1687 "c++.y"
    { ENTER(function_c); code_scope = 1; }
    break;

  case 263:
#line 1691 "c++.y"
    { LEAVE(); code_scope = 0; }
    break;

  case 275:
#line 1742 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 277:
#line 1754 "c++.y"
    { yyval = yyvsp[-3]; }
    break;

  case 278:
#line 1756 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 279:
#line 1767 "c++.y"
    { yyval = type_copy(ENTER(class_c)); }
    break;

  case 280:
#line 1775 "c++.y"
    { LEAVE(); }
    break;

  case 281:
#line 1782 "c++.y"
    { PUSH_TYPE(type_class(class_t)); }
    break;

  case 282:
#line 1783 "c++.y"
    { PUSH_TYPE(type_class(struct_t)); }
    break;

  case 283:
#line 1784 "c++.y"
    { PUSH_TYPE(type_class(union_t)); }
    break;

  case 287:
#line 1853 "c++.y"
    { yyval = POP_TYPE();
					  GNU_ANONYMOUS_UNION(yyval);
					  is_type_def = 0; }
    break;

  case 288:
#line 1858 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 289:
#line 1860 "c++.y"
    { is_type_def = 0; }
    break;

  case 290:
#line 1863 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 291:
#line 1865 "c++.y"
    { is_type_def = 0; }
    break;

  case 292:
#line 1868 "c++.y"
    { POPFREE_TYPE(); is_type_def = 0; }
    break;

  case 293:
#line 1870 "c++.y"
    { is_type_def = 0; }
    break;

  case 294:
#line 1872 "c++.y"
    { DEFINE(variable_c); }
    break;

  case 301:
#line 1906 "c++.y"
    { LEAVE(); yyval = yyvsp[-4];
					  SET_FSPEC(yyval); }
    break;

  case 302:
#line 1910 "c++.y"
    { LEAVE(); yyval = yyvsp[-6];
					  SET_FSPEC(yyval); }
    break;

  case 303:
#line 1913 "c++.y"
    { yyval = TOP_TYPE();
					  yyval = type_parametrized(yyval, 0);
					  SET_FSPEC(yyval);
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 304:
#line 1921 "c++.y"
    { yyval = yyvsp[-3];
					  PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c));
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 305:
#line 1927 "c++.y"
    { yyval = yyvsp[-5];
					  PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]);
					  ID_FROM_TYPE(); ID_MANGLE(); }
    break;

  case 306:
#line 1933 "c++.y"
    { yyval = yyvsp[-3];
					  ID_FROM_TYPE(); ID_MANGLE();
					  PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_NUM_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 307:
#line 1940 "c++.y"
    { yyval = yyvsp[-5];
					  ID_FROM_TYPE(); ID_MANGLE();
					  PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_NUM_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 308:
#line 1949 "c++.y"
    { yyval = TOP_TYPE();
					  yyval = type_parametrized(
						yyval, ENTER_PARAMS_AT(yyval)); }
    break;

  case 309:
#line 1962 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 310:
#line 1967 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 311:
#line 1972 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[-1]); }
    break;

  case 312:
#line 1976 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  DEFINE_VAR_OR_FUNC(yyvsp[0]); }
    break;

  case 315:
#line 1988 "c++.y"
    { yyvsp[0] = type_connect(yyvsp[0], POP_TYPE());
					  PUSH_TYPE(yyvsp[0]); is_type_def = 0; }
    break;

  case 318:
#line 2000 "c++.y"
    { yyvsp[0] = type_connect(yyvsp[0], POP_TYPE());
					  PUSH_TYPE(yyvsp[0]); is_type_def = 0; }
    break;

  case 320:
#line 2010 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 323:
#line 2050 "c++.y"
    { yyval = type_copy(ENTER(class_c)); }
    break;

  case 327:
#line 2075 "c++.y"
    { POPFREE_ID(); USING(); }
    break;

  case 334:
#line 2130 "c++.y"
    { scope_stmt_pop();
					  yyval = scope_define_conversion(
						  	type_connect(yyvsp[-1], yyvsp[0]));
					  PUSH_TYPE(yyval);
					  PUSH_OP_ID(yyval); }
    break;

  case 335:
#line 2138 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 336:
#line 2142 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 337:
#line 2144 "c++.y"
    { yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 338:
#line 2145 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 339:
#line 2146 "c++.y"
    { yyval = yyvsp[0]; POPFREE_ID(); }
    break;

  case 340:
#line 2155 "c++.y"
    { yyval = POP_TYPE(); POPFREE_TYPE(); }
    break;

  case 341:
#line 2157 "c++.y"
    { yyval = POP_TYPE(); }
    break;

  case 342:
#line 2164 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 343:
#line 2166 "c++.y"
    { yyval = type_reference(yyvsp[-1]); }
    break;

  case 344:
#line 2170 "c++.y"
    { scope_stmt_push(); }
    break;

  case 352:
#line 2197 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[0]); }
    break;

  case 353:
#line 2206 "c++.y"
    { yyval = yyvsp[0]; PUSH_OP_ID(yyvsp[0]); }
    break;

  case 354:
#line 2214 "c++.y"
    { yyval = TYPE_OP(operator_new); }
    break;

  case 355:
#line 2215 "c++.y"
    { yyval = TYPE_OP(operator_delete); }
    break;

  case 356:
#line 2216 "c++.y"
    { yyval = TYPE_OP(operator_new_array); }
    break;

  case 357:
#line 2217 "c++.y"
    { yyval = TYPE_OP(
						operator_delete_array); }
    break;

  case 358:
#line 2219 "c++.y"
    { yyval = TYPE_OP(operator_plus); }
    break;

  case 359:
#line 2220 "c++.y"
    { yyval = TYPE_OP(operator_minus); }
    break;

  case 360:
#line 2221 "c++.y"
    { yyval = TYPE_OP(operator_star); }
    break;

  case 361:
#line 2222 "c++.y"
    { yyval = TYPE_OP(operator_slash); }
    break;

  case 362:
#line 2223 "c++.y"
    { yyval = TYPE_OP(operator_percent); }
    break;

  case 363:
#line 2224 "c++.y"
    { yyval = TYPE_OP(operator_hat); }
    break;

  case 364:
#line 2225 "c++.y"
    { yyval = TYPE_OP(operator_and); }
    break;

  case 365:
#line 2226 "c++.y"
    { yyval = TYPE_OP(operator_or); }
    break;

  case 366:
#line 2227 "c++.y"
    { yyval = TYPE_OP(operator_tilde); }
    break;

  case 367:
#line 2228 "c++.y"
    { yyval = TYPE_OP(operator_not); }
    break;

  case 368:
#line 2229 "c++.y"
    { yyval = TYPE_OP(operator_eq); }
    break;

  case 369:
#line 2230 "c++.y"
    { yyval = TYPE_OP(operator_langle); }
    break;

  case 370:
#line 2231 "c++.y"
    { yyval = TYPE_OP(operator_rangle); }
    break;

  case 371:
#line 2232 "c++.y"
    { yyval = TYPE_OP(operator_plus_eq); }
    break;

  case 372:
#line 2233 "c++.y"
    { yyval = TYPE_OP(operator_minus_eq); }
    break;

  case 373:
#line 2234 "c++.y"
    { yyval = TYPE_OP(operator_star_eq); }
    break;

  case 374:
#line 2235 "c++.y"
    { yyval = TYPE_OP(operator_slash_eq); }
    break;

  case 375:
#line 2236 "c++.y"
    { yyval = TYPE_OP(operator_percent_eq); }
    break;

  case 376:
#line 2237 "c++.y"
    { yyval = TYPE_OP(operator_hat_eq); }
    break;

  case 377:
#line 2238 "c++.y"
    { yyval = TYPE_OP(operator_and_eq); }
    break;

  case 378:
#line 2239 "c++.y"
    { yyval = TYPE_OP(operator_or_eq); }
    break;

  case 379:
#line 2240 "c++.y"
    { yyval = TYPE_OP(operator_ltlt); }
    break;

  case 380:
#line 2241 "c++.y"
    { yyval = TYPE_OP(operator_gtgt); }
    break;

  case 381:
#line 2242 "c++.y"
    { yyval = TYPE_OP(operator_gtgt_eq); }
    break;

  case 382:
#line 2243 "c++.y"
    { yyval = TYPE_OP(operator_ltlt_eq); }
    break;

  case 383:
#line 2244 "c++.y"
    { yyval = TYPE_OP(operator_eqeq); }
    break;

  case 384:
#line 2245 "c++.y"
    { yyval = TYPE_OP(operator_ne); }
    break;

  case 385:
#line 2246 "c++.y"
    { yyval = TYPE_OP(operator_le); }
    break;

  case 386:
#line 2247 "c++.y"
    { yyval = TYPE_OP(operator_ge); }
    break;

  case 387:
#line 2248 "c++.y"
    { yyval = TYPE_OP(operator_andand); }
    break;

  case 388:
#line 2249 "c++.y"
    { yyval = TYPE_OP(operator_oror); }
    break;

  case 389:
#line 2250 "c++.y"
    { yyval = TYPE_OP(operator_incr); }
    break;

  case 390:
#line 2251 "c++.y"
    { yyval = TYPE_OP(operator_decr); }
    break;

  case 391:
#line 2252 "c++.y"
    { yyval = TYPE_OP(operator_comma); }
    break;

  case 392:
#line 2253 "c++.y"
    { yyval = TYPE_OP(operator_arrow_star); }
    break;

  case 393:
#line 2254 "c++.y"
    { yyval = TYPE_OP(operator_arrow); }
    break;

  case 394:
#line 2255 "c++.y"
    { yyval = TYPE_OP(operator_function); }
    break;

  case 395:
#line 2256 "c++.y"
    { yyval = TYPE_OP(operator_subscript); }
    break;

  case 396:
#line 2257 "c++.y"
    { yyval = TYPE_OP(operator_minimum); }
    break;

  case 397:
#line 2258 "c++.y"
    { yyval = TYPE_OP(operator_maximum); }
    break;

  case 398:
#line 2276 "c++.y"
    { scope_reset_template(); }
    break;

  case 399:
#line 2279 "c++.y"
    { scope_reset_template(); }
    break;

  case 400:
#line 2281 "c++.y"
    { type_dispose(yyvsp[-1]);
					  is_type_def = 0; }
    break;

  case 401:
#line 2284 "c++.y"
    { POPFREE_ID();
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[-1]);
					  is_type_def = 0; }
    break;

  case 402:
#line 2292 "c++.y"
    { scope_reset_template(); }
    break;

  case 403:
#line 2295 "c++.y"
    { scope_reset_template(); }
    break;

  case 404:
#line 2299 "c++.y"
    { ENTER_PARAMS(); }
    break;

  case 405:
#line 2303 "c++.y"
    { scope_close_template(); }
    break;

  case 410:
#line 2317 "c++.y"
    { PUSH_TYPE(type_class(class_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 411:
#line 2320 "c++.y"
    { type_dispose(yyvsp[0]);
					  PUSH_TYPE(type_class(class_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 412:
#line 2324 "c++.y"
    { PUSH_TYPE(type_simple(void_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 413:
#line 2327 "c++.y"
    { type_dispose(yyvsp[0]);
					  PUSH_TYPE(type_simple(void_t));
					  type_dispose(DEFINE(class_c)); }
    break;

  case 414:
#line 2331 "c++.y"
    { POPFREE_ID(); }
    break;

  case 415:
#line 2334 "c++.y"
    { POPFREE_ID(); POPFREE_ID();
					  type_dispose(yyvsp[0]); }
    break;

  case 417:
#line 2345 "c++.y"
    { PUSH_TYPE(yyvsp[0]); PASS_ID(); }
    break;

  case 422:
#line 2373 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 423:
#line 2374 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 425:
#line 2383 "c++.y"
    { scope_reset_template(); }
    break;

  case 426:
#line 2391 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 427:
#line 2395 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 428:
#line 2399 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[0], yyvsp[-1]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c)); }
    break;

  case 429:
#line 2404 "c++.y"
    { PUSH_TYPE(type_connect(yyvsp[-2], yyvsp[-3]));
					  PUSH_AUTO_ID();
					  type_dispose(DEFINE(variable_c));
					  type_dispose(yyvsp[0]); }
    break;

  case 430:
#line 2417 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 431:
#line 2419 "c++.y"
    { yyval = yyvsp[0]; is_type_def = 1; }
    break;

  case 432:
#line 2421 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 433:
#line 2423 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 434:
#line 2425 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 435:
#line 2428 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 436:
#line 2432 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]);
					  SET_CV(yyval); }
    break;

  case 437:
#line 2446 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 438:
#line 2447 "c++.y"
    { LEAVE(); }
    break;

  case 440:
#line 2453 "c++.y"
    { ENTER(function_c); }
    break;

  case 441:
#line 2455 "c++.y"
    { LEAVE(); }
    break;

  case 446:
#line 2474 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 447:
#line 2475 "c++.y"
    { LEAVE(); }
    break;

  case 451:
#line 2486 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 468:
#line 2533 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[-2]); }
    break;

  case 469:
#line 2535 "c++.y"
    { type_dispose(yyvsp[-2]); }
    break;

  case 471:
#line 2540 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 477:
#line 2558 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 478:
#line 2559 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 479:
#line 2560 "c++.y"
    { LEAVE(); }
    break;

  case 480:
#line 2561 "c++.y"
    { LEAVE(); }
    break;

  case 481:
#line 2562 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 482:
#line 2564 "c++.y"
    { LEAVE(); }
    break;

  case 483:
#line 2568 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 484:
#line 2569 "c++.y"
    { LEAVE(); }
    break;

  case 486:
#line 2574 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 487:
#line 2576 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 488:
#line 2584 "c++.y"
    { DEFINE_VAR_OR_FUNC(yyvsp[0]); }
    break;

  case 489:
#line 2588 "c++.y"
    { PUSH_TYPE(yyvsp[0]); }
    break;

  case 492:
#line 2597 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 493:
#line 2599 "c++.y"
    { LEAVE(); }
    break;

  case 494:
#line 2600 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 495:
#line 2601 "c++.y"
    { LEAVE(); }
    break;

  case 496:
#line 2603 "c++.y"
    { type_dispose(yyvsp[-2]); }
    break;

  case 497:
#line 2604 "c++.y"
    { ENTER_ANONYMOUS(); }
    break;

  case 498:
#line 2606 "c++.y"
    { type_dispose(yyvsp[-2]); LEAVE(); }
    break;

  case 503:
#line 2623 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 504:
#line 2624 "c++.y"
    { POPFREE_ID(); type_dispose(yyvsp[-1]); }
    break;

  case 511:
#line 2649 "c++.y"
    { is_type_def = 0; POPFREE_TYPE(); }
    break;

  case 512:
#line 2661 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 513:
#line 2662 "c++.y"
    { yyval = TYPE_THIS(); }
    break;

  case 514:
#line 2663 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 515:
#line 2664 "c++.y"
    { yyval = yyvsp[0]; POPFREE_ID(); }
    break;

  case 516:
#line 2665 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 517:
#line 2669 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 518:
#line 2677 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 519:
#line 2679 "c++.y"
    { yyval = yyvsp[-3]; }
    break;

  case 520:
#line 2680 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 523:
#line 2689 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 0; }
    break;

  case 524:
#line 2692 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 525:
#line 2695 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 526:
#line 2698 "c++.y"
    { yyval = yyvsp[0];
					  yyval.nested = 1; }
    break;

  case 533:
#line 2730 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 534:
#line 2734 "c++.y"
    { yyval = yyvsp[0]; ID_CLASS(variable_c); }
    break;

  case 535:
#line 2736 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1;
					  ID_CLASS(variable_c); }
    break;

  case 536:
#line 2738 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 537:
#line 2740 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 538:
#line 2742 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 539:
#line 2745 "c++.y"
    { yyval = POP_TYPE(); yyval.nested = 1;
					  ID_CLASS(typename_c); }
    break;

  case 540:
#line 2747 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 541:
#line 2772 "c++.y"
    { yyval.nested = 0; }
    break;

  case 542:
#line 2773 "c++.y"
    { yyval.nested = 1; }
    break;

  case 543:
#line 2774 "c++.y"
    { yyval.nested = 1; }
    break;

  case 544:
#line 2776 "c++.y"
    { yyval.nested = 1; }
    break;

  case 545:
#line 2777 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 546:
#line 2779 "c++.y"
    { yyval = yyvsp[-1]; PUSH_TYPE(yyvsp[-1]); }
    break;

  case 547:
#line 2780 "c++.y"
    { yyval.nested = 0; }
    break;

  case 548:
#line 2782 "c++.y"
    { yyval.nested = 1; }
    break;

  case 549:
#line 2783 "c++.y"
    { yyval.nested = 0; }
    break;

  case 550:
#line 2785 "c++.y"
    { yyval.nested = 1; }
    break;

  case 551:
#line 2787 "c++.y"
    { yyval.nested = 1; }
    break;

  case 552:
#line 2789 "c++.y"
    { yyval.nested = 1; }
    break;

  case 553:
#line 2790 "c++.y"
    { yyval.nested = 0; is_destructor = 1; }
    break;

  case 554:
#line 2792 "c++.y"
    { yyval.nested = 1; }
    break;

  case 555:
#line 2794 "c++.y"
    { yyval.nested = 1; }
    break;

  case 556:
#line 2796 "c++.y"
    { yyval.nested = 1; }
    break;

  case 557:
#line 2800 "c++.y"
    { yyval.nested = 0; }
    break;

  case 558:
#line 2801 "c++.y"
    { yyval.nested = 1; }
    break;

  case 559:
#line 2802 "c++.y"
    { yyval.nested = 1; }
    break;

  case 560:
#line 2804 "c++.y"
    { yyval.nested = 1; }
    break;

  case 561:
#line 2805 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 562:
#line 2818 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 563:
#line 2821 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 564:
#line 2822 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 566:
#line 2835 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 567:
#line 2836 "c++.y"
    { scope_stmt_lookup_info(); YYACCEPT; }
    break;

  case 568:
#line 2849 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 569:
#line 2852 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 571:
#line 2865 "c++.y"
    { yyval = yyvsp[0]; yyval.nested = 1; }
    break;

  case 572:
#line 2869 "c++.y"
    { scope_stmt_global(); }
    break;

  case 573:
#line 2886 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 574:
#line 2889 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 575:
#line 2891 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 576:
#line 2894 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 577:
#line 2897 "c++.y"
    { scope_stmt_enter(yyvsp[-4]);
					  POPFREE_ID(); }
    break;

  case 578:
#line 2899 "c++.y"
    { scope_stmt_enter(POP_TYPE());
					  POPFREE_ID(); }
    break;

  case 579:
#line 2912 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 580:
#line 2914 "c++.y"
    { yyval = type_dereference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 581:
#line 2917 "c++.y"
    { yyval = type_return(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 582:
#line 2920 "c++.y"
    { scope_function_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 583:
#line 2921 "c++.y"
    { yyval = type_return(yyvsp[-1]); }
    break;

  case 584:
#line 2923 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 585:
#line 2925 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 586:
#line 2928 "c++.y"
    { type_dispose(yyvsp[-1]);
					  yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 587:
#line 2931 "c++.y"
    { yyval = yyvsp[-1];
					  yyval = POP_TYPE(); POPFREE_ID(); }
    break;

  case 588:
#line 2935 "c++.y"
    { yyval = TYPE_LOOKUP(yyvsp[-3]); }
    break;

  case 589:
#line 2937 "c++.y"
    { yyval = TYPE_LOOKUP(yyvsp[-3]); }
    break;

  case 590:
#line 2940 "c++.y"
    { scope_lookup_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 591:
#line 2942 "c++.y"
    { scope_lookup_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 592:
#line 2944 "c++.y"
    { yyval = type_simple(void_t);
					  type_dispose(yyvsp[-2]); }
    break;

  case 593:
#line 2947 "c++.y"
    { yyval = type_simple(void_t);
					  type_dispose(yyvsp[-2]); }
    break;

  case 594:
#line 2950 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 595:
#line 2951 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 596:
#line 2954 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 597:
#line 2956 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 598:
#line 2958 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 599:
#line 2960 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 600:
#line 2962 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 601:
#line 2964 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 602:
#line 2966 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 603:
#line 2968 "c++.y"
    { yyval = yyvsp[-4]; type_dispose(yyvsp[-1]); }
    break;

  case 604:
#line 2970 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 605:
#line 2972 "c++.y"
    { yyval = yyvsp[-3]; type_dispose(yyvsp[-1]); }
    break;

  case 606:
#line 2979 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 607:
#line 2981 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-2]); }
    break;

  case 608:
#line 2985 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 609:
#line 2986 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 610:
#line 2990 "c++.y"
    { POPFREE_TYPE(); POPFREE_ID(); }
    break;

  case 611:
#line 2992 "c++.y"
    { POPFREE_TYPE(); POPFREE_ID(); }
    break;

  case 612:
#line 2996 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 613:
#line 2997 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 614:
#line 2998 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 615:
#line 2999 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 616:
#line 3000 "c++.y"
    { yyval = type_simple(int_t);
					  type_dispose(yyvsp[0]); }
    break;

  case 617:
#line 3003 "c++.y"
    { yyval = type_simple(int_t);
					  type_dispose(yyvsp[-1]); }
    break;

  case 618:
#line 3005 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 619:
#line 3006 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 620:
#line 3011 "c++.y"
    { yyval = type_simple(void_t);
					  yyval = type_dereference(yyval); }
    break;

  case 621:
#line 3013 "c++.y"
    { yyval = type_simple(void_t);
					  yyval = type_reference(yyval); }
    break;

  case 622:
#line 3015 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 623:
#line 3016 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 624:
#line 3017 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 625:
#line 3018 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 626:
#line 3026 "c++.y"
    { yyval = yyvsp[-1]; }
    break;

  case 627:
#line 3028 "c++.y"
    { yyval = yyvsp[-2]; }
    break;

  case 628:
#line 3033 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 631:
#line 3057 "c++.y"
    { yyval = type_connect(yyvsp[-1], yyvsp[0]); }
    break;

  case 632:
#line 3062 "c++.y"
    { yyval = type_reference(yyvsp[0]); }
    break;

  case 633:
#line 3063 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 634:
#line 3067 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 635:
#line 3068 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 636:
#line 3072 "c++.y"
    { yyval = type_simple(void_t);
					  yyval = type_reference(yyval);
					  type_dispose(yyvsp[-1]); }
    break;

  case 637:
#line 3076 "c++.y"
    { yyval = type_reference(yyvsp[-3]);
					  type_dispose(yyvsp[-1]); }
    break;

  case 638:
#line 3082 "c++.y"
    { type_dispose(yyvsp[-1]); }
    break;

  case 642:
#line 3095 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 643:
#line 3096 "c++.y"
    { type_dispose(yyvsp[0]); }
    break;

  case 644:
#line 3100 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 645:
#line 3102 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 646:
#line 3107 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 647:
#line 3109 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 648:
#line 3112 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 649:
#line 3128 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 650:
#line 3130 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 651:
#line 3132 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 652:
#line 3134 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 653:
#line 3138 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 654:
#line 3140 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 655:
#line 3142 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 656:
#line 3146 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 657:
#line 3148 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 658:
#line 3151 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 659:
#line 3163 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 660:
#line 3165 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 661:
#line 3168 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 662:
#line 3171 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 663:
#line 3174 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 664:
#line 3177 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 665:
#line 3182 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 666:
#line 3184 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 667:
#line 3187 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 668:
#line 3190 "c++.y"
    { scope_enum_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 669:
#line 3192 "c++.y"
    { scope_enum_info(yyvsp[-2]); YYACCEPT; }
    break;

  case 670:
#line 3196 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 671:
#line 3198 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 672:
#line 3202 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 673:
#line 3204 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 674:
#line 3208 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 675:
#line 3210 "c++.y"
    { yyval = type_connect(yyvsp[-2], yyvsp[0]); }
    break;

  case 676:
#line 3214 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 677:
#line 3216 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 678:
#line 3221 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 679:
#line 3223 "c++.y"
    { yyval = type_simple(bool_t);
					  type_dispose(yyvsp[-2]); type_dispose(yyvsp[0]); }
    break;

  case 680:
#line 3228 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 681:
#line 3230 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[-4]); type_dispose(yyvsp[0]); }
    break;

  case 682:
#line 3235 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 683:
#line 3237 "c++.y"
    { yyval = yyvsp[-2];
					  type_dispose(yyvsp[0]); }
    break;

  case 684:
#line 3239 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 685:
#line 3243 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 686:
#line 3244 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 698:
#line 3262 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 699:
#line 3264 "c++.y"
    { yyval = yyvsp[0]; type_dispose(yyvsp[-2]); }
    break;

  case 700:
#line 3268 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 701:
#line 3269 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 702:
#line 3273 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 703:
#line 3277 "c++.y"
    { yyval = type_simple(void_t); }
    break;

  case 704:
#line 3278 "c++.y"
    { yyval = yyvsp[0]; }
    break;

  case 705:
#line 3291 "c++.y"
    { yyval = type_simple(void_t); }
    break;


    }

/* Line 999 of yacc.c.  */
#line 6476 "y.tab.c"

  yyvsp -= yylen;
  yyssp -= yylen;


  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (YYPACT_NINF < yyn && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  int yytype = YYTRANSLATE (yychar);
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("syntax error, unexpected ") + 1;
	  yysize += yystrlen (yytname[yytype]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("syntax error; also virtual memory exhausted");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* Return failure if at end of input.  */
      if (yychar == YYEOF)
        {
	  /* Pop the error token.  */
          YYPOPSTACK;
	  /* Pop the rest of the stack.  */
	  while (yyss < yyssp)
	    {
	      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
	      yydestruct (yystos[*yyssp], yyvsp);
	      YYPOPSTACK;
	    }
	  YYABORT;
        }

      YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
      yydestruct (yytoken, &yylval);
      yychar = YYEMPTY;

    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*----------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action.  |
`----------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      yyvsp--;
      yystate = *--yyssp;

      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;


  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}


#line 3308 "c++.y"


